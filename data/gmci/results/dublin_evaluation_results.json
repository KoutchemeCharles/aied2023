{"submission_id":5825,"func_code":"def append2list(l1, s=''):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    if s:\n        l2.append(s)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, s=''):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    if s:\n        l2.append(s)\n    return l2","n_lines":7,"__index_level_0__":1,"repair":""}
{"submission_id":24431,"func_code":"def append2list(l1=None, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1=None, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":2,"repair":"def append2list(l1=None, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 == None:\n        l2 = []\n    \n    l2.extend( l1 )\n\n    return l2"}
{"submission_id":35966,"func_code":"def append2list(l1, l2=None):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":5,"__index_level_0__":3,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2:\n        l2.extend(l1)\n        return l2"}
{"submission_id":3990,"func_code":"def append2list(l1, s=None):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    if s:\n        l2.append(s)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, s=None):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    if s:\n        l2.append(s)\n    return l2","n_lines":7,"__index_level_0__":4,"repair":"def append2list(l1, s=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if s is None:\n        l2 = []\n    else:\n        l2 = s\n    l2.extend( l1 )\n    return l2"}
{"submission_id":39776,"func_code":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","n_lines":8,"__index_level_0__":5,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 == None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2"}
{"submission_id":7115,"func_code":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"536d6075-5a50-4346-89ff-5e21df057756","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":6,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 == None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":37849,"func_code":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n    for i in l2:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n    for i in l2:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":7,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":18664,"func_code":"def append2list(l1, l2=None):\n    if l2 == None:\n        l3 = []\n        for i in l1:\n            l3.append(i)\n        return l3\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 == None:\n        l3 = []\n        for i in l1:\n            l3.append(i)\n        return l3\n    else:\n        return l1","n_lines":8,"__index_level_0__":8,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":42087,"func_code":"def append2list(l1, l2=None):\n    if l2 == None:\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 == None:\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","n_lines":7,"__index_level_0__":9,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    \n    l2.extend( l1 )\n    \n    return l2"}
{"submission_id":6246,"func_code":"def append2list(l1, l2=None):\n    if l2 in None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"2b5f9b04-bd61-4108-b289-84a2c1002a82","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 in None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":10,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2"}
{"submission_id":17488,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        l3 = l1 + l2\n        return l3","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        l3 = l1 + l2\n        return l3","n_lines":5,"__index_level_0__":11,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":28418,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        l2.append(l1)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        l2.append(l1)\n    return l2","n_lines":5,"__index_level_0__":12,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":27244,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(l1)\n        return l2\n    else:\n        return [l1, l2]","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=List(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(l1)\n        return l2\n    else:\n        return [l1, l2]","n_lines":8,"__index_level_0__":13,"repair":"def append2list(l1, l2=None):\n        \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n        if l2 is None:\n            l2 = []\n    \n        if l1:\n            l2.extend(l1)\n            return l2\n        else:\n            return l2"}
{"submission_id":8604,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","n_lines":8,"__index_level_0__":14,"repair":"def append2list(l1, l2=None):\n        \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n        if l2 is None:\n            l2 = []\n    \n        if l1:\n            for i in l1:\n                l2.append(i)\n            return l2\n        else:\n            return l1"}
{"submission_id":6575,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":15,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2"}
{"submission_id":26138,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n    l2.append(l1)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"f93e7adc-52fc-42e1-ba0d-59e245864c63","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        l2 = []\n    l2.append(l1)\n    return l2","n_lines":5,"__index_level_0__":16,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":34383,"func_code":"def append2list(l1, l2=None):\n    if l2 is None:\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 is None:\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","n_lines":7,"__index_level_0__":17,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    \n    l2.extend(l1)\n    return l2"}
{"submission_id":37293,"func_code":"def append2list(l1, l2=None):\n    if l2 != None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 != None:\n        l2 = []\n        for i in l1:\n            l2.append(i)\n        return l2\n    else:\n        return l1","n_lines":8,"__index_level_0__":18,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2"}
{"submission_id":4578,"func_code":"def append2list(l1, l2=None):\n    if l2 != None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=None):\n    if l2 != None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":19,"repair":"def append2list(l1, l2=None):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2 is None:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":36318,"func_code":"def append2list(l1, l2=[]):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"b33a8ad6-3321-48f9-b796-fc62eb24c45f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":5,"__index_level_0__":21,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2:\n        for i in l1:\n            l2.append(i)\n        return l2"}
{"submission_id":40733,"func_code":"def append2list(l1, l=[]):\n    l2 = []\n    for item in l1:\n        l2.append(item)\n    for item in l:\n        l2.append(item)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"e0141b22-9477-459d-8e1c-18f5d5ef6624","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l=[]):\n    l2 = []\n    for item in l1:\n        l2.append(item)\n    for item in l:\n        l2.append(item)\n    return l2","n_lines":7,"__index_level_0__":22,"repair":"def append2list(l1, l=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    l.extend(l1)\n    return l"}
{"submission_id":26475,"func_code":"def append2list(l1, l2=[]):\n    for i in l1:\n        l2.append(l1[i])\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    for i in l1:\n        l2.append(l1[i])\n    return l2","n_lines":4,"__index_level_0__":23,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if not l2:\n        l2 = []\n    \n    return l2 + l1"}
{"submission_id":16306,"func_code":"def append2list(l1, l2=[]):\n    for i in l2:\n        l1.append(i)\n    return l1","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"36685ead-53f8-40af-a908-4c048278dc6b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    for i in l2:\n        l1.append(i)\n    return l1","n_lines":4,"__index_level_0__":24,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if not l2:\n        l2 = []\n    l2.extend(l1)\n    return l2"}
{"submission_id":19530,"func_code":"def append2list(l1, l2=[]):\n    if len(l2) == 2:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    if len(l2) == 2:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":25,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if len(l1)==0:\n        l2 = []\n    else:\n        for i in l1:\n            l2.append(i)\n        return l2"}
{"submission_id":10994,"func_code":"def append2list(l1, l2=[]):\n    if len(l2) > 1:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    if len(l2) > 1:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":26,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if not l2:\n        return l1\n    else:\n        for i in l1:\n            l2.append(i)\n        return l2"}
{"submission_id":15344,"func_code":"def append2list(l1, l2=[]):\n    if l2 is none:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"a0677365-0929-4e2e-8719-3729105927cd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Name(id='none', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    if l2 is none:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":27,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2==[]:\n        l2 = l1\n    else:\n        for i in l1:\n            l2.append(i)\n        return l2"}
{"submission_id":30055,"func_code":"def append2list(l1, l2=[]):\n    if not l2 is None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"e3c31dbf-4c63-4e59-aa78-540cb586910e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1, l2=[]):\n    if not l2 is None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":6,"__index_level_0__":28,"repair":"def append2list(l1, l2=[]):\n    \"\"\"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.\"\"\"\n    \n    if l2==[]:\n        l2 = l1\n    else:\n        for i in l1:\n            l2.append(i)\n        return l2"}
{"submission_id":8887,"func_code":"def append2list(l1):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","assignment_id":"append2list","func_name":"append2list","description":"Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.","test":"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def append2list(l1):\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2","n_lines":5,"__index_level_0__":29,"repair":""}
{"submission_id":15480,"func_code":"def bsearch(a, q):\n    a = sorted(a)\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    a = sorted(a)\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low","n_lines":11,"__index_level_0__":30,"repair":""}
{"submission_id":36333,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < mid:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < mid:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":31,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n    \n            if a[mid] < q:\n                low = mid + 1\n                assert a[low - 1] < q\n            else:\n                high = mid\n                assert q <= a[high]\n        return low"}
{"submission_id":4792,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < mid:\n            low = mid\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < mid:\n            low = mid\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":32,"repair":"def bsearch(a, q):\n    \"\"\"Search for element q in the sorted array a.\"\"\"\n    lo, hi = 0, len(a)-1\n    while lo < hi:\n        mid = (lo + hi) \/\/ 2\n        if a[mid] < q:\n            lo = mid + 1\n        elif a[mid] > q:\n            hi = mid - 1\n        else:\n            return mid\n    return lo"}
{"submission_id":16746,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < a[mid]:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < a[mid]:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","n_lines":13,"__index_level_0__":33,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n            if a[mid] < q:\n                low = mid + 1\n            elif a[mid] > q:\n                high = mid\n            else:\n                return mid\n        return low"}
{"submission_id":12648,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < a[mid]:\n            low = mid\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if q < a[mid]:\n            low = mid\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","n_lines":13,"__index_level_0__":34,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = low + (high - low) \/\/ 2\n            \n            if a[mid] == q:\n                return mid\n            elif a[mid] < q:\n                low = mid + 1\n            elif a[mid] > q:\n                high = mid - 1\n            elif a[low - 1] > q:\n                assert a[low - 1] < q\n            else:\n                high = mid\n                assert q < a[high]\n        return low"}
{"submission_id":11280,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] > q:\n            high = mid\n            assert q <= a[high]\n        else:\n            low = mid + 1\n            assert low == 0 or a[low - 1] < a\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] > q:\n            high = mid\n            assert q <= a[high]\n        else:\n            low = mid + 1\n            assert low == 0 or a[low - 1] < a\n    return low","n_lines":13,"__index_level_0__":35,"repair":""}
{"submission_id":12543,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert low == 0 or a[low - 1] < a\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert low == 0 or a[low - 1] < a\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":36,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n    \n        while low < high:\n            mid = (low + high)\/\/2\n    \n            if a[mid] < q:\n                low = mid + 1\n            elif a[mid] == q:\n                return mid\n            else:\n                high = mid \n        return low"}
{"submission_id":14120,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n        return low","n_lines":13,"__index_level_0__":37,"repair":""}
{"submission_id":29045,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n    return low","n_lines":13,"__index_level_0__":38,"repair":""}
{"submission_id":6740,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= high\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_3', ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= high\n    return low","n_lines":13,"__index_level_0__":39,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n    \n            if a[mid] == q:\n                return mid\n            elif a[mid] < q:\n                high = mid - 1\n                assert a[high - 1]\n                low = mid + 1\n                assert a[low - 1] < q\n            else:\n                high = mid\n                assert q <= high\n        return low"}
{"submission_id":13509,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n        return low","n_lines":13,"__index_level_0__":40,"repair":""}
{"submission_id":12800,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":41,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n            assert low <= mid < high\n            if a[mid] < q:\n                low = mid + 1\n                assert a[low - 1] < q\n            else:\n                high = mid\n                assert q <= a[high]\n        return low"}
{"submission_id":17318,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        elif q < a[mid]:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        elif q < a[mid]:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":42,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high)\/\/2\n    \n            if a[mid] == q:\n                return mid\n    \n            elif a[mid] < q:\n                low = mid + 1\n                assert a[low - 1] < q\n            elif q < a[mid]:\n                high = mid\n                assert q <= a[high]\n        return low"}
{"submission_id":36517,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        if q < a[high]:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        if q < a[high]:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":43,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = low + (high - low) \/\/ 2\n            \n            if a[mid] < q:\n                low = mid + 1\n            else:\n                high = mid \n        return low"}
{"submission_id":16948,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        if q < a[mid]:\n            high = mid\n            assert q <= a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        if q < a[mid]:\n            high = mid\n            assert q <= a[high]\n    return low","n_lines":13,"__index_level_0__":44,"repair":""}
{"submission_id":28607,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert q < a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert q < a[high]\n        return low","n_lines":13,"__index_level_0__":45,"repair":""}
{"submission_id":32938,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert q < a[high]\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert q < a[high]\n    return low","n_lines":13,"__index_level_0__":46,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = low + (high - low) \/\/ 2\n            if a[mid] == q:\n                return mid\n            if a[mid] < q:\n                low = mid + 1\n                assert a[mid] <= q\n            if q < a[mid]:\n                high = mid\n                assert q < a[high]\n        return low"}
{"submission_id":26320,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert a[q] < a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[mid] <= q\n        if q < a[mid]:\n            high = mid\n            assert a[q] < a[high]\n        return low","n_lines":13,"__index_level_0__":47,"repair":"def bsearch(a, q):\n    \"\"\"Search for element q in the sorted array a.\"\"\"\n    left, right = 0, len(a)-1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if a[mid] < q:\n            left = mid + 1\n        elif a[mid] > q:\n            right = mid - 1\n        else:\n            return mid\n    return left"}
{"submission_id":38151,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low - 1","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low - 1","n_lines":10,"__index_level_0__":48,"repair":""}
{"submission_id":40601,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return mid - 1","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return mid - 1","n_lines":10,"__index_level_0__":49,"repair":""}
{"submission_id":27152,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return low","n_lines":10,"__index_level_0__":50,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n            \n            if a[mid] < q:\n                low = mid + 1\n            else:\n                high = mid\n    \n        return low"}
{"submission_id":29021,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return mid","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        else:\n            low = mid + 1\n    return mid","n_lines":10,"__index_level_0__":51,"repair":""}
{"submission_id":3953,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        elif a[mid] < q:\n            low = mid + 1\n        else:\n            i = 0\n            while i < len(a) and a[i] != q:\n                i = i + 1\n                return i\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_5', ctx=Load()))], orelse=[])])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] > q:\n            high = mid\n        elif a[mid] < q:\n            low = mid + 1\n        else:\n            i = 0\n            while i < len(a) and a[i] != q:\n                i = i + 1\n                return i\n    return low","n_lines":15,"__index_level_0__":52,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high)\/\/2\n            \n            if a[mid] == q:\n                return mid\n            elif a[mid] > q:\n                high = mid\n            elif a[mid] < q:\n                low = mid + 1\n            else:\n                i = 0\n                while i < len(a) and a[i] != q:\n                    i = i + 1\n                    return i\n        return low"}
{"submission_id":25606,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] < q:\n            low = mid + 1\n        else:\n            high = mid\n    return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"85db1d22-a87d-4132-bd9a-e07bf9282015","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) \/ 2\n        if a[mid] < q:\n            low = mid + 1\n        else:\n            high = mid\n    return low","n_lines":10,"__index_level_0__":53,"repair":"def bsearch(a, q):\n        \"\"\"Search for element q in the sorted array a.\"\"\"\n        low = 0\n        high = len(a)\n        while low < high:\n    \n            mid = (low + high) \/\/ 2\n            if a[mid] < q:\n                low = mid + 1\n            else:\n                high = mid\n        return low"}
{"submission_id":8000,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high + 1]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high + 1]\n        return low","n_lines":13,"__index_level_0__":54,"repair":""}
{"submission_id":38614,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q < a[high]\n        return low","n_lines":13,"__index_level_0__":55,"repair":""}
{"submission_id":15566,"func_code":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n        return low","assignment_id":"bsearch","func_name":"bsearch","description":"Search for element q in the sorted array a.","test":"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def bsearch(a, q):\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = len(a) \/ 2\n        assert low <= mid < high\n        if a[mid] < q:\n            low = mid + 1\n            assert a[low - 1] < q\n        else:\n            high = mid\n            assert q <= a[high]\n        return low","n_lines":13,"__index_level_0__":56,"repair":"def bsearch(a, q):\n    \"\"\"Search for element q in the sorted array a.\"\"\"\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if a[mid] < q:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"submission_id":31620,"func_code":"def count_letters(s='', i=0):\n    print((s, i))\n    if s == '':\n        return i\n    i += 1\n    return count_letters(s.replace[s[0], '', 1], i)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"60b76a41-ddf8-4d27-a286-8da8c4e298cd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=''), Constant(value=1)], ctx=Load()), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s='', i=0):\n    print((s, i))\n    if s == '':\n        return i\n    i += 1\n    return count_letters(s.replace[s[0], '', 1], i)","n_lines":6,"__index_level_0__":57,"repair":""}
{"submission_id":2734,"func_code":"def count_letters(n='', i=0):\n    if n == '':\n        return i\n    i += 1\n    return count_letters(n.replace(n[0], '', 1))","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=''), Constant(value=1)], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(n='', i=0):\n    if n == '':\n        return i\n    i += 1\n    return count_letters(n.replace(n[0], '', 1))","n_lines":5,"__index_level_0__":58,"repair":"def count_letters(n='', i=0):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    i=0\n    while i<len(n):\n        if n[i] in 'aeiou':\n            i=i+1\n        else:\n            i=i+1\n    return i"}
{"submission_id":38565,"func_code":"def count_letters(s, l=[]):\n    if not s:\n        return sum(l)\n    l.append(1)\n    s = s[1:]\n    return count_letters(s, l)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s, l=[]):\n    if not s:\n        return sum(l)\n    l.append(1)\n    s = s[1:]\n    return count_letters(s, l)","n_lines":6,"__index_level_0__":59,"repair":"def count_letters(s, l=[]):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    l = list(s)\n    l.reverse()\n    l.sort()\n    return len(l)"}
{"submission_id":28740,"func_code":"def count_letters(s, l=[]):\n    if not s:\n        return sum(l)\n    l.append(1)\n    s = s[1:]\n    return count_letters(l, s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s, l=[]):\n    if not s:\n        return sum(l)\n    l.append(1)\n    s = s[1:]\n    return count_letters(l, s)","n_lines":6,"__index_level_0__":60,"repair":"def count_letters(s, l=[]):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    \n    return len(s)"}
{"submission_id":10538,"func_code":"def count_letters(n, word):\n    if len(word) == 0:\n        return 0\n    if word[0] == n:\n        count = 1\n    else:\n        return count + count_letters(n, word[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(n, word):\n    if len(word) == 0:\n        return 0\n    if word[0] == n:\n        count = 1\n    else:\n        return count + count_letters(n, word[1:])","n_lines":7,"__index_level_0__":61,"repair":""}
{"submission_id":39643,"func_code":"def count_letters(s=''):\n    return count(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Return(value=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s=''):\n    return count(s)","n_lines":2,"__index_level_0__":62,"repair":"def count_letters(s=''):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    letters = 0\n    for letter in s:\n        letters += 1\n    return letters"}
{"submission_id":1737,"func_code":"def count_letters(s):\n    count = 0\n    i = 0\n    while s[i] != '':\n        count += 1\n        i += 1\n        return count_letters(s)\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    i = 0\n    while s[i] != '':\n        count += 1\n        i += 1\n        return count_letters(s)\n    return count","n_lines":8,"__index_level_0__":63,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count += 1\n    return count"}
{"submission_id":18046,"func_code":"def count_letters(s):\n    total = 0\n    for c in (s - 1):\n        total += 1\n    return count_letters(s[:-1]) + 1","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    for c in (s - 1):\n        total += 1\n    return count_letters(s[:-1]) + 1","n_lines":5,"__index_level_0__":64,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    total = 0\n    for c in s:\n        total += 1\n    return total"}
{"submission_id":31319,"func_code":"def count_letters(s):\n    count = 0\n    for x in s:\n        count += 1\n        return count_letters(s)\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    for x in s:\n        count += 1\n        return count_letters(s)\n    return count","n_lines":6,"__index_level_0__":65,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n        for x in s:\n            count += 1\n    \n        return count"}
{"submission_id":10252,"func_code":"def count_letters(s):\n    count = 0\n    for x in s:\n        count += 1\n        return count_letters(s[1:])\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    for x in s:\n        count += 1\n        return count_letters(s[1:])\n    return count","n_lines":6,"__index_level_0__":66,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for x in s:\n        count += 1\n    return count"}
{"submission_id":27522,"func_code":"def count_letters(n):\n    total = 0\n    for char in n:\n        total += 1\n    return count_letters(n)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(n):\n    total = 0\n    for char in n:\n        total += 1\n    return count_letters(n)","n_lines":5,"__index_level_0__":67,"repair":"def count_letters(n):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    total = 0\n    for char in n:\n        total += 1\n    return total"}
{"submission_id":455,"func_code":"def count_letters(s):\n    total = 0\n    for c in s[:-1]:\n        total += 1\n    return count_letters(s[:-1]) + 1","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    for c in s[:-1]:\n        total += 1\n    return count_letters(s[:-1]) + 1","n_lines":5,"__index_level_0__":68,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n    \n        for char in s:\n            total += 1\n        return total"}
{"submission_id":21617,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    count = count + 1\n    length = count_letters(s[:-1])\n    if length == 0:\n        return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    count = count + 1\n    length = count_letters(s[:-1])\n    if length == 0:\n        return count","n_lines":8,"__index_level_0__":74,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n        if s == '':\n            return 0\n    \n        for c in s:\n            count = count + 1\n        return count"}
{"submission_id":37055,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count = count + 1\n    if length == 0:\n        return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count = count + 1\n    if length == 0:\n        return count","n_lines":8,"__index_level_0__":75,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n        if s == '':\n            return 0\n    \n        for i in range(len(s)):\n            if s[i] == s[i]:\n                count += 1\n        return count"}
{"submission_id":17383,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count += 1\n    if length == 0:\n        return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count += 1\n    if length == 0:\n        return count","n_lines":8,"__index_level_0__":76,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count += 1\n    return count"}
{"submission_id":26627,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    for i in s:\n        if s.isalpha():\n            total += 1\n    return total","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    for i in s:\n        if s.isalpha():\n            total += 1\n    return total","n_lines":8,"__index_level_0__":77,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n        if s == '':\n            return 0\n        for i in s:\n    \n                total += 1\n        return total"}
{"submission_id":8845,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return count + count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return count + count_letters(s[1:])","n_lines":5,"__index_level_0__":78,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n        if s == '':\n            return 0\n    \n        for c in s:\n            total += 1\n    \n        return total"}
{"submission_id":29967,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s)","n_lines":5,"__index_level_0__":79,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n        if s == '':\n            return 0\n    \n        for letter in s:\n            total += 1\n    \n        return total"}
{"submission_id":15226,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[0])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[0])","n_lines":5,"__index_level_0__":80,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    \n    return len(s)"}
{"submission_id":24123,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[1])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[1])","n_lines":5,"__index_level_0__":81,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n        if s == '':\n            return 0\n    \n        for c in s:\n            total += 1\n        return total"}
{"submission_id":17053,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[0:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[0:])","n_lines":5,"__index_level_0__":82,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    total = 0\n    for c in s:\n        total += 1\n    return total"}
{"submission_id":41060,"func_code":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if s == '':\n        return 0\n    return total + count_letters(s[1:])","n_lines":5,"__index_level_0__":83,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        total = 0\n        if s == '':\n            return 0\n    \n        for c in s:\n            total += 1\n        return total"}
{"submission_id":4835,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count = 0\n    count += 1\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count = 0\n    count += 1\n    return count_letters(s[1:])","n_lines":7,"__index_level_0__":92,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count += 1\n    return count"}
{"submission_id":14216,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count += 1\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count += 1\n    return count_letters(s[1:])","n_lines":6,"__index_level_0__":93,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n        if s == '':\n            return count\n    \n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}
{"submission_id":17725,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count + 1\n    s = s - s[0]\n    return count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Expr(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    count + 1\n    s = s - s[0]\n    return count_letters(s)","n_lines":7,"__index_level_0__":94,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n        if s == '':\n            return count\n    \n        for char in s:\n            count +=1\n        return count"}
{"submission_id":32787,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s - s[0])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s - s[0])","n_lines":5,"__index_level_0__":95,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    \n    return len(s)"}
{"submission_id":36310,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s)","n_lines":5,"__index_level_0__":96,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count += 1\n    return count"}
{"submission_id":21078,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s.remove[s[0]])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s.remove[s[0]])","n_lines":5,"__index_level_0__":97,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        count = 0\n    \n        for letter in s:\n            count += 1\n        return count"}
{"submission_id":30464,"func_code":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s.replace[s[0], ''])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='')], ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    if s == '':\n        return count\n    return count + 1, count_letters(s.replace[s[0], ''])","n_lines":5,"__index_level_0__":98,"repair":""}
{"submission_id":42374,"func_code":"def count_letters(s):\n    total = 0\n    if not s:\n        return total\n    else:\n        for c in s[:-1]:\n            total += 1\n    return count_letters(s) + 1","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    total = 0\n    if not s:\n        return total\n    else:\n        for c in s[:-1]:\n            total += 1\n    return count_letters(s) + 1","n_lines":8,"__index_level_0__":99,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    total = 0\n    for c in s:\n        total += 1\n    return total"}
{"submission_id":9212,"func_code":"def count_letters(word):\n    i = 0\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(word):\n    i = 0\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","n_lines":7,"__index_level_0__":100,"repair":"def count_letters(word):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    i=0\n    for c in word:\n        i+=1\n    return i"}
{"submission_id":10341,"func_code":"def count_letters(s):\n    count = 0\n    while s[i] != '':\n        count += 1\n        return count_letters(s)\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count = 0\n    while s[i] != '':\n        count += 1\n        return count_letters(s)\n    return count","n_lines":6,"__index_level_0__":101,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count +=1\n    return count"}
{"submission_id":42278,"func_code":"def count_letters(s):\n    count == 0\n    for c in s:\n        count += 1\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    count == 0\n    for c in s:\n        count += 1\n    return count","n_lines":5,"__index_level_0__":102,"repair":""}
{"submission_id":2945,"func_code":"def count_letters(s):\n    global count\n    count += 1\n    if not s:\n        return count\n    s = s[:-1]\n    return count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['count']), AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='count', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    global count\n    count += 1\n    if not s:\n        return count\n    s = s[:-1]\n    return count_letters(s)","n_lines":7,"__index_level_0__":103,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count += 1\n    return count"}
{"submission_id":18076,"func_code":"def count_letters(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return 1 + count_letters(l + 1)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return 1 + count_letters(l + 1)","n_lines":5,"__index_level_0__":104,"repair":"def count_letters(l):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if len(l) == 0:\n            return 0\n    \n        l = list(l)\n        l.sort()\n        \n        return len(l)"}
{"submission_id":1668,"func_code":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    return count_letters(s[1:])","n_lines":6,"__index_level_0__":105,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if len(s) == 0:\n            return 0\n    \n        s = s.lower()\n        return len(s)"}
{"submission_id":2282,"func_code":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(len(s) - 1)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(len(s) - 1)","n_lines":4,"__index_level_0__":106,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    letters = ''\n    for c in s:\n        letters += c\n    return len(letters)"}
{"submission_id":36767,"func_code":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(s[1:])","n_lines":4,"__index_level_0__":107,"repair":""}
{"submission_id":14145,"func_code":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(s[:1])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if len(s) == 0:\n        return 0\n    return count_letters(s[:1])","n_lines":4,"__index_level_0__":108,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    \n    return len(s)"}
{"submission_id":31598,"func_code":"def count_letters(s):\n    if len(s) == 1:\n        return 1\n    return 1 + count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"ebcb6801-87f5-4fa5-b252-f89ccb02603a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if len(s) == 1:\n        return 1\n    return 1 + count_letters(s[1:])","n_lines":4,"__index_level_0__":109,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if len(s) == 1:\n            return 1\n    \n        return len(s)"}
{"submission_id":3340,"func_code":"def count_letters(s):\n    if theString == '':\n        return 0\n    return 1 + count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='theString', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if theString == '':\n        return 0\n    return 1 + count_letters(s[1:])","n_lines":4,"__index_level_0__":110,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in s:\n        count +=1\n    return count"}
{"submission_id":23545,"func_code":"def count_letters(s):\n    if s == '':\n        return 0\n    else:\n        i = 1\n        f = s[i + 1:]\n    return i + count_letters(f)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"50d273d2-c9d2-425d-a22d-cc7338b6bc3e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return 0\n    else:\n        i = 1\n        f = s[i + 1:]\n    return i + count_letters(f)","n_lines":7,"__index_level_0__":111,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if s == '':\n            return 0\n        else:\n    \n            letters = ''\n            for letter in s:\n                letters += letter\n            return len(letters)"}
{"submission_id":22910,"func_code":"def count_letters(s):\n    if s == '':\n        return 0\n    elif s != '':\n        s = s.split()\n        total += 1\n        return total + count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return 0\n    elif s != '':\n        s = s.split()\n        total += 1\n        return total + count_letters(s)","n_lines":7,"__index_level_0__":112,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if s == '':\n            return 0\n        elif s != '':\n    \n            s = s.lower()\n    \n            return len(s)"}
{"submission_id":7602,"func_code":"def count_letters(s):\n    if s == '':\n        return 0\n    else:\n        return 1 + count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return 0\n    else:\n        return 1 + count_letters(s)","n_lines":5,"__index_level_0__":114,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    letters=0\n    for letter in s:\n        letters=letters+len(letter.lower())\n    return letters"}
{"submission_id":10221,"func_code":"def count_letters(s):\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count += 1\n    if length == 0:\n        return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return 0\n    length = count_letters(s[:-1])\n    count += 1\n    if length == 0:\n        return count","n_lines":7,"__index_level_0__":115,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if s == '':\n            return 0\n        length = count_letters(s[:-1])\n    \n        return length + 1"}
{"submission_id":9478,"func_code":"def count_letters(s):\n    if s == '':\n        return 0\n    count = count_letters(s[:-1])\n    return len(s) + count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return 0\n    count = count_letters(s[:-1])\n    return len(s) + count","n_lines":5,"__index_level_0__":116,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if s == '':\n            return 0\n    \n        return len(s)"}
{"submission_id":25331,"func_code":"def count_letters(a):\n    if a == '':\n        return 0\n    return count_letters(s[1:]) + 1","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"f4380e0a-3bfd-44c6-b455-fe1018a45321","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(a):\n    if a == '':\n        return 0\n    return count_letters(s[1:]) + 1","n_lines":4,"__index_level_0__":117,"repair":"def count_letters(a):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if a == '':\n    \n            return 0\n    \n        return len(a)"}
{"submission_id":10188,"func_code":"def count_letters(word):\n    if word == '':\n        return 0\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(word):\n    if word == '':\n        return 0\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","n_lines":8,"__index_level_0__":118,"repair":"def count_letters(word):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if word == '':\n            return 0\n        try:\n    \n            letters = [letter for letter in word]\n            \n            return len(letters)\n        except:\n            return i"}
{"submission_id":7967,"func_code":"def count_letters(s):\n    if s == '':\n        return count\n    else:\n        count += 1\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return count\n    else:\n        count += 1\n    return count_letters(s[1:])","n_lines":6,"__index_level_0__":119,"repair":"def count_letters(s):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    letters=0\n    for letter in s:\n        letters+=1\n    return letters"}
{"submission_id":28291,"func_code":"def count_letters(s):\n    if s == '':\n        return count\n    count = 0\n    count += 1\n    return count_letters(s[1:])\n    return count","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if s == '':\n        return count\n    count = 0\n    count += 1\n    return count_letters(s[1:])\n    return count","n_lines":7,"__index_level_0__":120,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if s == '':\n                return 0\n        count = sum([1 for c in s])\n        return count"}
{"submission_id":27153,"func_code":"def count_letters(s):\n    if not s:\n        return count_letters.count\n    s = s[:-1]\n    count_letters.count += 1\n    return count_letters(s)","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), AugAssign(target=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if not s:\n        return count_letters.count\n    s = s[:-1]\n    count_letters.count += 1\n    return count_letters(s)","n_lines":6,"__index_level_0__":121,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if not s:\n                return 0\n        s=s.lower()\n        return len(s)"}
{"submission_id":14722,"func_code":"def count_letters(s):\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    return count_letters(s[1:])","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    return count_letters(s[1:])","n_lines":6,"__index_level_0__":123,"repair":"def count_letters(s):\n        \"\"\"Return the number of lettres in a string.\"\"\"\n        if not s:\n            return 0\n    \n        chars = list(s)\n        chars.sort()\n        return len(chars)"}
{"submission_id":33439,"func_code":"def count_letters(s):\n    if not s:\n        return 0\n    return 1 + s[1:]","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"733076ff-a42d-4d8b-82c9-5fbbffc0c400","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def count_letters(s):\n    if not s:\n        return 0\n    return 1 + s[1:]","n_lines":4,"__index_level_0__":124,"repair":""}
{"submission_id":19376,"func_code":"def count_letters(word):\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","assignment_id":"count_letters","func_name":"count_letters","description":"Return the number of lettres in a string.","test":"assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","representative":"def count_letters(word):\n    try:\n        i = i + 1\n        return count_letters(word[1:])\n    except:\n        return i","n_lines":6,"__index_level_0__":125,"repair":"def count_letters(word):\n    \"\"\"Return the number of lettres in a string.\"\"\"\n    count = 0\n    for letter in word:\n        count += 1\n    return count"}
{"submission_id":22994,"func_code":"def factorial(n=0):\n    return product(list(range(n))) * n","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=BinOp(left=Call(func=Name(id='product', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n=0):\n    return product(list(range(n))) * n","n_lines":2,"__index_level_0__":126,"repair":""}
{"submission_id":38249,"func_code":"def factorial(n=0):\n    return math.factorial(n)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n=0):\n    return math.factorial(n)","n_lines":2,"__index_level_0__":127,"repair":""}
{"submission_id":6758,"func_code":"def factorial(n):\n    product = 1\n    for x in range(0, n + 1):\n        product *= x\n    return product","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"71d3efb1-0433-44ad-83f0-224949653177","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    product = 1\n    for x in range(0, n + 1):\n        product *= x\n    return product","n_lines":5,"__index_level_0__":129,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product"}
{"submission_id":14249,"func_code":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1) + factorial(n - 2)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1) + factorial(n - 2)","n_lines":4,"__index_level_0__":130,"repair":""}
{"submission_id":18498,"func_code":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return factorial(n - 1) + factorial(n - 2)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return factorial(n - 1) + factorial(n - 2)","n_lines":4,"__index_level_0__":131,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans"}
{"submission_id":30946,"func_code":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","n_lines":4,"__index_level_0__":132,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    else:\n        return n*factorial(n-1)"}
{"submission_id":41259,"func_code":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"50d273d2-c9d2-425d-a22d-cc7338b6bc3e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":133,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor=1\n    while n>0:\n        factor*=n\n        n-=1\n    return factor"}
{"submission_id":41757,"func_code":"def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":134,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    while n > 0:\n        ans *= n\n        n -= 1\n    return ans"}
{"submission_id":24073,"func_code":"def factorial(n):\n    if int(n) == 0:\n        return 0\n    return int(n) * factorial(int(n) - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) == 0:\n        return 0\n    return int(n) * factorial(int(n) - 1)","n_lines":4,"__index_level_0__":135,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    else:\n        return n*factorial(n - 1)"}
{"submission_id":41484,"func_code":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return int(n) * factorial(int(n) + 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return int(n) * factorial(int(n) + 1)","n_lines":4,"__index_level_0__":137,"repair":""}
{"submission_id":35256,"func_code":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return int(n) * factorial(int(n) - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return int(n) * factorial(int(n) - 1)","n_lines":4,"__index_level_0__":138,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans"}
{"submission_id":42167,"func_code":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) == 1:\n        return 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":139,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"submission_id":19691,"func_code":"def factorial(n):\n    if int(n) >= 1:\n        return 1\n    return int(n) * factorial(int(n) + 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) >= 1:\n        return 1\n    return int(n) * factorial(int(n) + 1)","n_lines":4,"__index_level_0__":140,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    total = 1\n    for i in range(1,n+1):\n        total *= i\n    return total"}
{"submission_id":830,"func_code":"def factorial(n):\n    if int(n) >= 1:\n        return 1\n    return int(n) * factorial(int(n) - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if int(n) >= 1:\n        return 1\n    return int(n) * factorial(int(n) - 1)","n_lines":4,"__index_level_0__":141,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n == 0:\n        return 1\n    else:\n        if n <= 1:\n            return 1\n        return int(n) * factorial(int(n) - 1)"}
{"submission_id":14240,"func_code":"def factorial(n):\n    if n == 0:\n        return n + 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"8d21baf9-a7ac-4132-92e0-a1002f0c04a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return n + 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":142,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans"}
{"submission_id":7031,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return n * factorial(n - 1)","n_lines":5,"__index_level_0__":145,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n==0:\n        return 1\n    else:\n        if n<2:\n            return 1\n        else:\n            return n * factorial(n - 1)"}
{"submission_id":37304,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    fact_of_n = n - 1\n    return n * fact_of_n","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    fact_of_n = n - 1\n    return n * fact_of_n","n_lines":5,"__index_level_0__":146,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"submission_id":41428,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n + n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"9e8689c2-5967-4244-adc0-65049ce12be4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n + n * factorial(n - 1)","n_lines":4,"__index_level_0__":150,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    while n > 0:\n        ans *= n\n        n -= 1\n    return ans"}
{"submission_id":36509,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n + factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n + factorial(n - 1)","n_lines":4,"__index_level_0__":151,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    while n > 1:\n        factor *= n\n        n -= 1\n    return factor"}
{"submission_id":23493,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n + 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n + 1)","n_lines":4,"__index_level_0__":152,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"submission_id":1566,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":153,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    for i in range(1, n+1):\n        factor *= i\n    return factor"}
{"submission_id":20199,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorial(n)","n_lines":4,"__index_level_0__":154,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    while n > 0:\n        ans *= n\n        n -= 1\n    return ans"}
{"submission_id":33607,"func_code":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorila(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorila', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 0\n    return n * factorila(n - 1)","n_lines":4,"__index_level_0__":155,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    while n>0:\n        factor *= n\n        n -= 1\n    return factor"}
{"submission_id":36294,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)","n_lines":5,"__index_level_0__":161,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor=1\n    for i in range(2, n+1):\n        factor*=i\n    return factor"}
{"submission_id":15356,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","n_lines":5,"__index_level_0__":162,"repair":"def factorial(n):\n        \"\"\"Compute the factorial of the given number.\"\"\"\n        if n == 0:\n            return 1\n    \n        if n > 1:\n            return n * factorial(n-1)\n    \n        else:\n            return 1"}
{"submission_id":20511,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = n - 1\n    return n * fact_of_n","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = n - 1\n    return n * fact_of_n","n_lines":5,"__index_level_0__":163,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<1:\n        return 1\n    return n*factorial(n - 1)"}
{"submission_id":11173,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = factorial(n - 1)\n    return n * (n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = factorial(n - 1)\n    return n * (n - 1)","n_lines":5,"__index_level_0__":164,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    temp = 1\n    for i in range(1,n+1):\n        temp *= i\n    return temp"}
{"submission_id":40864,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = factorial(n - 1)\n    return n * fact_of_n(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    fact_of_n = factorial(n - 1)\n    return n * fact_of_n(n - 1)","n_lines":5,"__index_level_0__":165,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    for i in range(1, n+1):\n        factor *= i\n    return factor"}
{"submission_id":18999,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    facotrial_n_minus_1 = factorial(n - 1)\n    return n * facotrial_n_minus_1","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"d05025fd-0a14-4010-acb6-dea38896a651","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    facotrial_n_minus_1 = factorial(n - 1)\n    return n * facotrial_n_minus_1","n_lines":5,"__index_level_0__":166,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n==0:\n        return 1\n    else:\n        if n<0:\n            return 1\n        facotrial_n_minus_1 = factorial(n - 1)\n        return n * facotrial_n_minus_1"}
{"submission_id":3414,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","n_lines":4,"__index_level_0__":171,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    while n>0:\n        factor *= n\n        n -= 1\n    return factor"}
{"submission_id":41562,"func_code":"def factorial(number):\n    if number == 0:\n        return 1\n    return factorial(number - 1) * number","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"f0e181d7-e245-4188-8b78-18a1eeb6a1bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(number):\n    if number == 0:\n        return 1\n    return factorial(number - 1) * number","n_lines":4,"__index_level_0__":172,"repair":"def factorial(number):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    for i in range(1, number+1):\n        factor *= i\n    return factor"}
{"submission_id":39593,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"0f25ed97-3bfd-4793-bb56-26c57236aeda","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":173,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    return 1 if n<=0 else n*factorial(n - 1)"}
{"submission_id":25887,"func_code":"def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorila(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorila', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorila(n - 1)","n_lines":4,"__index_level_0__":174,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    temp = 1\n    for i in range(1,n+1):\n        temp *= i\n    return temp"}
{"submission_id":39247,"func_code":"def factorial(n):\n    if n == 0:\n        return n\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"8d21baf9-a7ac-4132-92e0-a1002f0c04a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 0:\n        return n\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":175,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans"}
{"submission_id":31018,"func_code":"def factorial(n):\n    if n == 1:\n        return 0\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 0\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":176,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact"}
{"submission_id":12325,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)","n_lines":5,"__index_level_0__":182,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    else:\n        if n==1:\n            return 1\n        else:\n            return n * factorial(n - 1)"}
{"submission_id":17919,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    factorial_of_n = factorial(n - 1)\n    return n * factorial_of_n","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    factorial_of_n = factorial(n - 1)\n    return n * factorial_of_n","n_lines":5,"__index_level_0__":183,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    temp = 1\n    for i in range(1, n+1):\n        temp *= i\n    return temp"}
{"submission_id":27854,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    return factorial(n - 1) * factorial(n - 2)","n_lines":4,"__index_level_0__":185,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans"}
{"submission_id":37094,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    return n + factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"a8d7ba55-2066-48ff-a791-991413f703dc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    return n + factorial(n - 1)","n_lines":4,"__index_level_0__":186,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    ans = 1\n    while n > 0:\n        ans *= n\n        n -= 1\n    return ans"}
{"submission_id":24681,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    return n + factorial(n)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"a8d7ba55-2066-48ff-a791-991413f703dc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    return n + factorial(n)","n_lines":4,"__index_level_0__":187,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<1:\n        return 1\n    else:\n        return n*factorial(n-1)"}
{"submission_id":19358,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n + 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n + 1)","n_lines":4,"__index_level_0__":188,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    \n    return n*factorial(n-1)"}
{"submission_id":16676,"func_code":"def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":189,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    for i in range(1, n + 1):\n        factor *= i\n    return factor"}
{"submission_id":32528,"func_code":"def factorial(n):\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n - 1)","n_lines":5,"__index_level_0__":190,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n==0:\n        return 1\n    else:\n        if n<=1:\n            return 1\n        else:\n            return n * factorial(n - 1)"}
{"submission_id":32458,"func_code":"def factorial(n):\n    if n == 1:\n        return n\n    return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n == 1:\n        return n\n    return n * factorial(n - 1)","n_lines":4,"__index_level_0__":191,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    factor = 1\n    while n > 1:\n        factor *= n\n        n -= 1\n    return factor"}
{"submission_id":1760,"func_code":"def factorial(x):\n    if x >= 1:\n        return 1\n    return x * factorial(x - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def factorial(x):\n    if x >= 1:\n        return 1\n    return x * factorial(x - 1)","n_lines":4,"__index_level_0__":192,"repair":"def factorial(x):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    total = 1\n    for i in range(1, x + 1):\n        total *= i\n    return total"}
{"submission_id":18834,"func_code":"def factorial(n):\n    if n <= 1:\n        return n\n    else:\n        return n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    if n <= 1:\n        return n\n    else:\n        return n * factorial(n - 1)","n_lines":5,"__index_level_0__":193,"repair":"def factorial(n):\n        \"\"\"Compute the factorial of the given number.\"\"\"\n        if n <= 1:\n    \n            return 1\n        else:\n            return n * factorial(n - 1)"}
{"submission_id":16542,"func_code":"def factorial(n):\n    return product(list(range(n))) * n","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='product', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    return product(list(range(n))) * n","n_lines":2,"__index_level_0__":194,"repair":""}
{"submission_id":37121,"func_code":"def factorial(n):\n    return n if n < 2 else n * factorial(n - 1)","assignment_id":"factorial","func_name":"factorial","description":"Compute the factorial of the given number.","test":"assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000","correct":false,"user":"c7fa847c-561b-4652-9a01-05f954e6c8df","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=Name(id='x_0', ctx=Load()), orelse=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))))], decorator_list=[])], type_ignores=[])","representative":"def factorial(n):\n    return n if n < 2 else n * factorial(n - 1)","n_lines":2,"__index_level_0__":195,"repair":"def factorial(n):\n    \"\"\"Compute the factorial of the given number.\"\"\"\n    \n    if n<=1:\n        return 1\n    \n    return n * factorial(n-1)"}
{"submission_id":13874,"func_code":"def fibonacci(n):\n    n = n - 1 + n - 2\n    print(n)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    n = n - 1 + n - 2\n    print(n)","n_lines":3,"__index_level_0__":198,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":35017,"func_code":"def fibonacci(n):\n    first = 0\n    second = 0\n    while 0 < n:\n        last = first\n        first = second\n        second = last + second\n        n = n - 1\n    return first","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    first = 0\n    second = 0\n    while 0 < n:\n        last = first\n        first = second\n        second = last + second\n        n = n - 1\n    return first","n_lines":9,"__index_level_0__":203,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    first = 0\n    second = 1\n    while n > 0:\n        while 0 < n:\n            last = first\n            first = second\n            second = last + second\n            n = n - 1\n        return first"}
{"submission_id":19504,"func_code":"def fibonacci(n):\n    a = 0\n    b = 0\n    while n > 0:\n        prev_a = a\n        a = b\n        b = prev_a + b\n        n -= 1\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 0\n    while n > 0:\n        prev_a = a\n        a = b\n        b = prev_a + b\n        n -= 1\n    return a","n_lines":9,"__index_level_0__":204,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        prev_a = a\n        a = b\n        b = prev_a + b\n        n -= 1\n    return a"}
{"submission_id":20337,"func_code":"def fibonacci(n):\n    previous = 0\n    current = 1\n    i = 0\n    while i < n:\n        temp = current\n        current += previous\n        previous = temp\n        i = i + 1\n    return current","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    previous = 0\n    current = 1\n    i = 0\n    while i < n:\n        temp = current\n        current += previous\n        previous = temp\n        i = i + 1\n    return current","n_lines":10,"__index_level_0__":206,"repair":""}
{"submission_id":21984,"func_code":"def fibonacci(n):\n    Fval = 0\n    Sval = 1\n    i = 0\n    while i <= n:\n        if n <= 1:\n            return n\n        else:\n            Next = Fval + Sval\n            Fval = Sval\n            Sval = Next\n        i = i + 1\n    return Next","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load()))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    Fval = 0\n    Sval = 1\n    i = 0\n    while i <= n:\n        if n <= 1:\n            return n\n        else:\n            Next = Fval + Sval\n            Fval = Sval\n            Sval = Next\n        i = i + 1\n    return Next","n_lines":13,"__index_level_0__":208,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        Fval = 0\n        Sval = 1\n        i = 0\n        while i <= n:\n    \n            if i == n:\n                return Fval\n            else:\n                Next = Fval + Sval\n                Fval = Sval\n                Sval = Next\n            i = i + 1\n        return Next"}
{"submission_id":31272,"func_code":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < len(i):\n        j = k\n        k = k + j\n        if n in k:\n            return i\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < len(i):\n        j = k\n        k = k + j\n        if n in k:\n            return i\n        i = i + 1","n_lines":10,"__index_level_0__":209,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n = n - 1\n    return a"}
{"submission_id":22962,"func_code":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        if int(n) in k:\n            return i\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        if int(n) in k:\n            return i\n        i = i + 1","n_lines":10,"__index_level_0__":210,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":37087,"func_code":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        if n in k:\n            return i\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        if n in k:\n            return i\n        i = i + 1","n_lines":10,"__index_level_0__":211,"repair":""}
{"submission_id":25269,"func_code":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        return k\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        return k\n        i = i + 1","n_lines":9,"__index_level_0__":212,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 1, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a"}
{"submission_id":33637,"func_code":"def fibonacci(n):\n    firN = 0\n    secN = 1\n    while n > 0:\n        prev_N = firN\n        firN = secN\n        sec_N = prev_N + secN\n        n -= 1\n    return firN","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    firN = 0\n    secN = 1\n    while n > 0:\n        prev_N = firN\n        firN = secN\n        sec_N = prev_N + secN\n        n -= 1\n    return firN","n_lines":9,"__index_level_0__":213,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    firN = 0\n    secN = 1\n    while n > 0:\n        prev_N = firN\n        firN = secN\n        secN = prev_N + secN\n        n -= 1\n    return firN"}
{"submission_id":41481,"func_code":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b > 0:\n        prev_a = a\n        a = b\n        b = prev_a + b\n        n -= 1\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b > 0:\n        prev_a = a\n        a = b\n        b = prev_a + b\n        n -= 1\n    return a","n_lines":9,"__index_level_0__":214,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = 0\n        b = 1\n    \n        while n > 0:\n            prev_a = a\n            a = b\n            b = prev_a + b\n            n -= 1\n        return a"}
{"submission_id":20276,"func_code":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b < n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b < n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","n_lines":8,"__index_level_0__":215,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = 0\n        b = 1\n    \n        for _ in range(n):\n            prev_a = a\n            a = b\n            b = prev_a + b\n        return a"}
{"submission_id":4245,"func_code":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b < n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return b","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b < n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return b","n_lines":8,"__index_level_0__":216,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":15417,"func_code":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","n_lines":8,"__index_level_0__":217,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = 0\n        b = 1\n    \n        for _ in range(n):\n            prev_a = a\n            a = b\n            b = prev_a + b\n        return a"}
{"submission_id":26288,"func_code":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return b","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 0\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return b","n_lines":8,"__index_level_0__":218,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = 0\n        b = 1\n    \n        for _ in range(n):\n                a = a + b\n                b = a - b\n        return a"}
{"submission_id":3965,"func_code":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        if n in fib:\n            return fib[i]\n            i = i + 1\n        else:\n            i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        if n in fib:\n            return fib[i]\n            i = i + 1\n        else:\n            i = i + 1","n_lines":9,"__index_level_0__":221,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    fib = [0, 1]\n    i = 2\n    while i <= n:\n        fib.append(fib[i-1] + fib[i-2])\n        i = i+1\n    return fib[n]"}
{"submission_id":23396,"func_code":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        if n in fib:\n            return fib[i]\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        if n in fib:\n            return fib[i]\n        i = i + 1","n_lines":7,"__index_level_0__":222,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]"}
{"submission_id":15314,"func_code":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        return fib[n]\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    while i < 10:\n        return fib[n]\n        i = i + 1","n_lines":6,"__index_level_0__":223,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    fib = [0, 1]\n    i = 2\n    while i <= n:\n        fib.append(fib[i-1] + fib[i-2])\n        i = i+1\n    return fib[n]"}
{"submission_id":26374,"func_code":"def fibonacci(n):\n    i = 0\n    while i < 10:\n        if n in fibonacci:\n            print(n[i])\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='fibonacci', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    while i < 10:\n        if n in fibonacci:\n            print(n[i])\n        i = i + 1","n_lines":6,"__index_level_0__":233,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":21551,"func_code":"def fibonacci(n):\n    a = 1\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = 1\n    b = 1\n    while b <= n:\n        prev_a = a\n        a = b\n        b = prev_a + b\n    return a","n_lines":8,"__index_level_0__":234,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = 1\n        b = 1\n    \n        while n > 1:\n            n = n - 1\n            prev_a = a\n            a = b\n            b = prev_a + b\n        return a"}
{"submission_id":9025,"func_code":"def fibonacci(n):\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    i = 10\n    while i < 20:\n        new = int(fib[i - 1]) + int(fib[i - 2])\n        fib.append(new)\n        i += 1\n    j = 1\n    while j < len(fib):\n        if j == n:\n            return fib[j]\n        j += 1\n    if n == 0:\n        return 0","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=10)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=20)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    i = 10\n    while i < 20:\n        new = int(fib[i - 1]) + int(fib[i - 2])\n        fib.append(new)\n        i += 1\n    j = 1\n    while j < len(fib):\n        if j == n:\n            return fib[j]\n        j += 1\n    if n == 0:\n        return 0","n_lines":14,"__index_level_0__":236,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n        i = 10\n    \n        while i <= n:\n            new = int(fib[i - 1]) + int(fib[i - 2])\n            fib.append(new)\n            i += 1\n        j = 1\n        while j < len(fib):\n            if j == n:\n                return fib[j]\n            j += 1\n        if n == 0:\n            return 0"}
{"submission_id":27395,"func_code":"def fibonacci(n):\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    i = 10\n    while i < 20:\n        new = int(fib[i - 1]) + int(fib[i - 2])\n        fib.append(new)\n        i += 1\n    j = 1\n    while j < len(fib):\n        if j == n:\n            return fib[j]\n        j += 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=10)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=20)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    i = 10\n    while i < 20:\n        new = int(fib[i - 1]) + int(fib[i - 2])\n        fib.append(new)\n        i += 1\n    j = 1\n    while j < len(fib):\n        if j == n:\n            return fib[j]\n        j += 1","n_lines":12,"__index_level_0__":237,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n        i = 10\n    \n        while i <= n:\n            new = int(fib[i - 1]) + int(fib[i - 2])\n            fib.append(new)\n            i += 1\n        j = 1\n        while j < len(fib):\n            if j == n:\n                return fib[j]\n            j += 1"}
{"submission_id":41290,"func_code":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    print(a[n - 1] + a[n - 2])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    print(a[n - 1] + a[n - 2])","n_lines":3,"__index_level_0__":238,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":27278,"func_code":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    if n < 1:\n        print(a[n])\n    elif n > 1:\n        print(a[n - 1] + a[n - 2])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    if n < 1:\n        print(a[n])\n    elif n > 1:\n        print(a[n - 1] + a[n - 2])","n_lines":6,"__index_level_0__":239,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":31426,"func_code":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    if n <= 1:\n        print(a[n])\n    elif n > 1:\n        print(a[n - 1] + a[n - 2])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    if n <= 1:\n        print(a[n])\n    elif n > 1:\n        print(a[n - 1] + a[n - 2])","n_lines":6,"__index_level_0__":240,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":21247,"func_code":"def fibonacci(n):\n    a = [0, 1]\n    total = 0\n    i = 1\n    while i < n:\n        total = int(a[i]) + int(a[i + 1])\n        a.append(total)\n        i = i + 1\n    return a[n]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = [0, 1]\n    total = 0\n    i = 1\n    while i < n:\n        total = int(a[i]) + int(a[i + 1])\n        a.append(total)\n        i = i + 1\n    return a[n]","n_lines":9,"__index_level_0__":241,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        a = [0, 1]\n        total = 0\n    \n        i = 0\n        while i < n:\n            total = int(a[i]) + int(a[i + 1])\n            a.append(total)\n            i = i + 1\n        return a[n]"}
{"submission_id":18505,"func_code":"def fibonacci(n):\n    list = [0, 1]\n    i = 0\n    while n >= len(list):\n        new_num = list[i] + list[i + 1]\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0, 1]\n    i = 0\n    while n >= len(list):\n        new_num = list[i] + list[i + 1]\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","n_lines":8,"__index_level_0__":242,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0, 1]\n        i = 0\n        while n >= len(list):\n            new_num = list[i] + list[i + 1]\n            list.append(new_num)\n            i = i + 1\n    \n        return list[n]"}
{"submission_id":41872,"func_code":"def fibonacci(n):\n    values = [0, 1]\n    i = 2\n    while i <= n:\n        terms.append(values[i - 1] + values[i - 2])\n        i = i + 1\n    return values[n]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='terms', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    values = [0, 1]\n    i = 2\n    while i <= n:\n        terms.append(values[i - 1] + values[i - 2])\n        i = i + 1\n    return values[n]","n_lines":7,"__index_level_0__":243,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        values = [0, 1]\n        i = 2\n        while i <= n:\n    \n            values.append(values[i-1] + values[i-2])\n            i = i + 1\n        return values[n]"}
{"submission_id":37700,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":249,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 1, 1\n    while n > 1:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":9818,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n            list.append(new_num)\n        i = 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n            list.append(new_num)\n        i = 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":250,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n        while n >= len(list):\n            if len(list) > 1:\n                new_num = list[i] + list[i - 1]\n            else:\n                new_num = list[i] + 1\n    \n            list.append(new_num)\n            i = i + 1\n        return list[-1]"}
{"submission_id":7983,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            n2 = list[i] + list[i - 1]\n        else:\n            n2 = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"e5f35cd7-8337-4a68-bda3-4164a982feae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_num', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            n2 = list[i] + list[i - 1]\n        else:\n            n2 = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[-1]","n_lines":11,"__index_level_0__":251,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n        while n >= len(list):\n            if len(list) > 1:\n                n2 = list[i] + list[i - 1]\n            else:\n                n2 = list[i] + 1\n    \n            list.append(n2)\n            i = i + 1\n        return list[-1]"}
{"submission_id":32799,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[i] + 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[i] + 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":252,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n        while n >= len(list):\n            if len(list) > 1:\n                nums = list[i] + list[i - 1]\n            else:\n                nums = list[i] + 1\n            list.append(nums)\n    \n            i = i + 1\n        return list[-1]"}
{"submission_id":17259,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","n_lines":11,"__index_level_0__":253,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n        while n >= len(list):\n            if len(list) > 1:\n                new_num = list[i] + list[i - 1]\n            else:\n                new_num = list[i] + 1\n            list.append(new_num)\n            i = i + 1\n    \n        return list[n]"}
{"submission_id":29735,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i - 1\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i - 1\n    return list[-1]","n_lines":11,"__index_level_0__":254,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n        while n >= len(list):\n            if len(list) > 1:\n                new_num = list[i] + list[i - 1]\n            else:\n                new_num = list[i] + 1\n    \n            list.append(new_num)\n            i = i + 1\n        return list[-1]"}
{"submission_id":33116,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='new_num', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]","n_lines":6,"__index_level_0__":255,"repair":""}
{"submission_id":26380,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[+1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=UAdd(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[+1]","n_lines":11,"__index_level_0__":256,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":23847,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    return list[-1]","n_lines":11,"__index_level_0__":257,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    list=[0, 1]\n    for i in range(2,n+1):\n        list.append(list[i-1]+list[i-2])\n    return list[-1]"}
{"submission_id":27891,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i - 1\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num + list[i] + list[i - 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i - 1\n    return list[-1]","n_lines":11,"__index_level_0__":258,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 1, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a"}
{"submission_id":30018,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n >= len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":259,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    list=[0, 1]\n    for i in range(n-1):\n        list.append(list[-1] + list[-2])\n    return list[n]"}
{"submission_id":37079,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n < len(list):\n        if len(list) > 1:\n            new = list[i] + list[i - 1]\n        else:\n            new = list[i] + 1\n        list.append(new)\n        i = i + 1\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"fd20892b-e35f-43bc-b82d-e6db9320b8ae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while n < len(list):\n        if len(list) > 1:\n            new = list[i] + list[i - 1]\n        else:\n            new = list[i] + 1\n        list.append(new)\n        i = i + 1\n    return list[-1]","n_lines":11,"__index_level_0__":260,"repair":"def fibonacci(n):\n        \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n        list = [0]\n        i = 0\n    \n        while i < n:\n            if len(list) > 1:\n                new = list[i] + list[i - 1]\n            else:\n                new = list[i] + 1\n            list.append(new)\n            i = i + 1\n        return list[-1]"}
{"submission_id":29582,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if line(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i - 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='line', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if line(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i - 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":261,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    i = 2\n    list = [0, 1]\n    while i <= n:\n        list.append(list[-1] + list[-2])\n        i += 1\n    return list[-1]"}
{"submission_id":28147,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i = 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":262,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":2369,"func_code":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i - 1 - i\n    return list[-1]","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = [0]\n    i = 0\n    while i < len(list):\n        if list(str) > 1:\n            nums = list[i] + list[i - 1]\n        else:\n            nums = list[1] - 1\n        list.append(nums)\n        i - 1 - i\n    return list[-1]","n_lines":11,"__index_level_0__":263,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    list = [0, 1]\n    for i in range(2, n + 1):\n        list.append(list[-1] + list[-2])\n    return list[-1]"}
{"submission_id":15006,"func_code":"def fibonacci(n):\n    list = []\n    i = 0\n    while n >= len(list):\n        new_num = list[i] + list[i + 1]\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = []\n    i = 0\n    while n >= len(list):\n        new_num = list[i] + list[i + 1]\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","n_lines":8,"__index_level_0__":265,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":32571,"func_code":"def fibonacci(n):\n    list = []\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i + 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    list = []\n    i = 0\n    while n >= len(list):\n        if len(list) > 1:\n            new_num = list[i] + list[i + 1]\n        else:\n            new_num = list[i] + 1\n        list.append(new_num)\n        i = i + 1\n    print(list[-1])","n_lines":11,"__index_level_0__":266,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    list=[0, 1]\n    for i in range(n-1):\n        list.append(list[-1] + list[-2]) \n    return list[n]"}
{"submission_id":22083,"func_code":"def fibonacci(n):\n    i = -1\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        i = i + 1\n    return k","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = -1\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        i = i + 1\n    return k","n_lines":9,"__index_level_0__":268,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":8992,"func_code":"def fibonacci(n):\n    i = -1\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        return k\n        i = i + 1","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = -1\n    j = 1\n    k = 1\n    while i < n:\n        j = k\n        k = k + j\n        return k\n        i = i + 1","n_lines":9,"__index_level_0__":269,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":30702,"func_code":"def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a","n_lines":5,"__index_level_0__":270,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 1, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a"}
{"submission_id":16518,"func_code":"def fibonacci(n):\n    a, b = 0, 1\n    while b < 10:\n        a, b = b, a + b\n        return b","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a, b = 0, 1\n    while b < 10:\n        a, b = b, a + b\n        return b","n_lines":5,"__index_level_0__":272,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":14301,"func_code":"def fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n        return b","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n        return b","n_lines":5,"__index_level_0__":273,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":8431,"func_code":"def fibonacci(n):\n    print(n - 1 + n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=2))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    print(n - 1 + n - 2)","n_lines":2,"__index_level_0__":274,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":5484,"func_code":"def fibonacci(n):\n    print(n - 1 + (n - 2))","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    print(n - 1 + (n - 2))","n_lines":2,"__index_level_0__":275,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":27774,"func_code":"def fibonacci(n):\n    print(n[n - 1] + n[n - 2])","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    print(n[n - 1] + n[n - 2])","n_lines":2,"__index_level_0__":276,"repair":""}
{"submission_id":40924,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return F(n - 1) + F(n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='F', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='F', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return F(n - 1) + F(n - 2)","n_lines":7,"__index_level_0__":324,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":29114,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":326,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":9868,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"12d00542-0a26-4a35-a142-ccd508484c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":7,"__index_level_0__":327,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":16415,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 0\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"762404df-24ca-44ff-9c98-3f841fa7faab","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 0\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":5,"__index_level_0__":328,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":29402,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":329,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 1, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a"}
{"submission_id":22447,"func_code":"def fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)","n_lines":7,"__index_level_0__":340,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a"}
{"submission_id":28232,"func_code":"def fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"7d0d82bd-2bdb-48da-a37f-ffa6ee59d960","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":341,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n = n - 1\n    return a"}
{"submission_id":31283,"func_code":"def fibonacci(n):\n    if n > 1:\n        return fibonacci(n - 2) + fiboacci(n - 1)\n    return n","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fiboacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n > 1:\n        return fibonacci(n - 2) + fiboacci(n - 1)\n    return n","n_lines":4,"__index_level_0__":344,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":18478,"func_code":"def fibonacci(n):\n    if n < 2:\n        return n\n    return febonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"7ee35977-e007-4398-99c0-ea42a300ff3c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='febonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return n\n    return febonacci(n - 2) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":348,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":28833,"func_code":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)","n_lines":4,"__index_level_0__":349,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":7095,"func_code":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 2) + fib(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 2) + fib(n - 1)","n_lines":4,"__index_level_0__":350,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":4019,"func_code":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"7ee35977-e007-4398-99c0-ea42a300ff3c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":351,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":5606,"func_code":"def fibonacci(x):\n    if x <= 1:\n        return x\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"b842b3b5-71ff-4f80-9bd4-d5973c3f5123","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(x):\n    if x <= 1:\n        return x\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)","n_lines":5,"__index_level_0__":357,"repair":"def fibonacci(x):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(x):\n        a, b = b, a+b\n    return a"}
{"submission_id":25821,"func_code":"def fibonacci(n):\n    return n","assignment_id":"fibonacci_iter","func_name":"fibonacci","description":"Iteratively compute the value of the fibonacci series at position n.","test":"assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    return n","n_lines":2,"__index_level_0__":360,"repair":"def fibonacci(n):\n    \"\"\"Iteratively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":10481,"func_code":"def fibonacci(n, older=0, old=1):\n    if n == 0:\n        return old\n    return fibonacci(n - 1, old, older + old)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n, older=0, old=1):\n    if n == 0:\n        return old\n    return fibonacci(n - 1, old, older + old)","n_lines":4,"__index_level_0__":196,"repair":""}
{"submission_id":33383,"func_code":"def fibonacci(i, n=1):\n    if i == 1 or i == 0:\n        return 1\n    return fibonacci(i - 1) + fibonacci(i - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"e9910cff-d2a2-4310-a748-9ad97a5a964c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(i, n=1):\n    if i == 1 or i == 0:\n        return 1\n    return fibonacci(i - 1) + fibonacci(i - 2)","n_lines":4,"__index_level_0__":197,"repair":"def fibonacci(i, n=1):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if i == 1 or i == 0:\n    \n            return i\n    \n        return fibonacci(i - 1) + fibonacci(i - 2)"}
{"submission_id":24068,"func_code":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\n        1597]\n    while i < 10:\n        return fib[n]\n        i = i + 1","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34), Constant(value=55), Constant(value=89), Constant(value=144), Constant(value=233), Constant(value=377), Constant(value=610), Constant(value=987), Constant(value=1597)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 0\n    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\n        1597]\n    while i < 10:\n        return fib[n]\n        i = i + 1","n_lines":7,"__index_level_0__":220,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        i = 0\n    \n        if n <= 1:\n            return n\n        \n        else:\n            temp = fibonacci(n - 1) + fibonacci(n - 2)\n            return temp\n            i = i + 1"}
{"submission_id":11879,"func_code":"def fibonacci(n):\n    time = 0\n    if n <= 1:\n        return n\n    else:\n        return fibonnaci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonnaci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    time = 0\n    if n <= 1:\n        return n\n    else:\n        return fibonnaci(n - 1) + fibonacci(n - 2)","n_lines":6,"__index_level_0__":232,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        time = 0\n    \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            time += fibonacci(n - 1) + fibonacci(n - 2)\n            return time"}
{"submission_id":16384,"func_code":"def fibonacci(n):\n    i = 1\n    l = [0, 1]\n    while i < n + 1:\n        l.append(l[i] + l[i - 1])\n        i += 1\n    return l[-1]","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    i = 1\n    l = [0, 1]\n    while i < n + 1:\n        l.append(l[i] + l[i - 1])\n        i += 1\n    return l[-1]","n_lines":7,"__index_level_0__":235,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        i = 1\n        l = [0, 1]\n        while i < n + 1:\n            l.append(l[i] + l[i - 1])\n            i += 1\n    \n        return l[n]"}
{"submission_id":22316,"func_code":"def fibonacci(n):\n    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, \n        1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, \n        196418, 317811]\n    return a[n]","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34), Constant(value=55), Constant(value=89), Constant(value=144), Constant(value=233), Constant(value=377), Constant(value=610), Constant(value=987), Constant(value=1597), Constant(value=2584), Constant(value=4181), Constant(value=6765), Constant(value=10946), Constant(value=17711), Constant(value=28657), Constant(value=46368), Constant(value=75025), Constant(value=121393), Constant(value=196418), Constant(value=317811)], ctx=Load())), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, \n        1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, \n        196418, 317811]\n    return a[n]","n_lines":5,"__index_level_0__":264,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":36161,"func_code":"def fibonacci(a):\n    x = a\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a + fibonacci(a - x)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(a):\n    x = a\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a + fibonacci(a - x)","n_lines":6,"__index_level_0__":267,"repair":"def fibonacci(a):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return fibonacci(a-1) + fibonacci(a-2)"}
{"submission_id":40573,"func_code":"def fibonacci(n):\n    a, b = 0, 1\n    for num in range(n):\n        a, b = b, a + b\n        return a","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    a, b = 0, 1\n    for num in range(n):\n        a, b = b, a + b\n        return a","n_lines":5,"__index_level_0__":271,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":25386,"func_code":"def fibonacci(l):\n    if fibonacci(0) == 1 and fibonacci(1) == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"09e5a143-ae3a-4611-8cfa-45d52e07b2c6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(l):\n    if fibonacci(0) == 1 and fibonacci(1) == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":277,"repair":"def fibonacci(l):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if l==0:\n        return 0\n    elif l==1:\n        return 1\n    else:\n        return fibonacci(l-1)+fibonacci(l-2)"}
{"submission_id":35121,"func_code":"def fibonacci(n):\n    if n == 0 and n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 and n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":278,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n<2:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":19080,"func_code":"def fibonacci(l):\n    if fibonacci(0) == 1 or fibonacci(1) == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"09e5a143-ae3a-4611-8cfa-45d52e07b2c6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(l):\n    if fibonacci(0) == 1 or fibonacci(1) == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":279,"repair":"def fibonacci(l):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if l == 0:\n        return 0\n    else:\n        n = l\n        if n == 1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":13133,"func_code":"def fibonacci(nth):\n    if n == 1 or n == 0:\n        return 1\n    return n - 1 + power(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if n == 1 or n == 0:\n        return 1\n    return n - 1 + power(n - 2)","n_lines":4,"__index_level_0__":280,"repair":"def fibonacci(nth):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if nth == 0:\n        return 0\n    elif nth == 1:\n        return 1\n    else:\n        return fibonacci(nth-1) + fibonacci(nth-2)"}
{"submission_id":35097,"func_code":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n        x = a\n    else:\n        return a + fibonacci(a - x)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n        x = a\n    else:\n        return a + fibonacci(a - x)","n_lines":6,"__index_level_0__":281,"repair":"def fibonacci(a):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if a==0:\n        return 0\n    elif a==1:\n        return 1\n    else:\n        return fibonacci(a-1) + fibonacci(a-2)"}
{"submission_id":16507,"func_code":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n        x = a\n    else:\n        return x + fibonacci(a - x)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n        x = a\n    else:\n        return x + fibonacci(a - x)","n_lines":6,"__index_level_0__":282,"repair":"def fibonacci(a):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return fibonacci(a - 1) + fibonacci(a - 2)"}
{"submission_id":6236,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":283,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":39404,"func_code":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a + fibonacci(a - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(a):\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a + fibonacci(a - 1)","n_lines":5,"__index_level_0__":284,"repair":""}
{"submission_id":18863,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    n -= 1\n    x = fibonacci(n) + fibonacci(n - 1)\n    return x","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"97b1fa02-4c4e-425b-a371-6b1b38862a02","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    n -= 1\n    x = fibonacci(n) + fibonacci(n - 1)\n    return x","n_lines":6,"__index_level_0__":285,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        n -= 1\n        x = fibonacci(n) + fibonacci(n - 1)\n        return x"}
{"submission_id":9232,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":286,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":17494,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":287,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n>0:\n        a, b = b, a+b\n        n-=1\n    return a"}
{"submission_id":3005,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * fibonacci(n - 1) + fibonnaci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonnaci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * fibonacci(n - 1) + fibonnaci(n - 2)","n_lines":4,"__index_level_0__":288,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":19715,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n - 1 + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n - 1 + fibonacci(n - 1)","n_lines":4,"__index_level_0__":289,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":12584,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":290,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":12239,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"6fb1b046-1d89-4162-8437-722d44e22f50","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":291,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        if n<2:\n            return 1\n        return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":27349,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci(n) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":292,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":13131,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + (fibonacci(n - 1) + fibonacci(n - 2))","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + (fibonacci(n - 1) + fibonacci(n - 2))","n_lines":4,"__index_level_0__":293,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":40292,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n + fibonacci(n - 1)","n_lines":4,"__index_level_0__":294,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n>0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":6815,"func_code":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * (fibonacci(n - 1) + fibonacci(n - 2))","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * (fibonacci(n - 1) + fibonacci(n - 2))","n_lines":4,"__index_level_0__":295,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":16094,"func_code":"def fibonacci(n):\n    if n == 0 or 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"70e78257-bdc0-4e89-b7cb-a49beaca5b77","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0 or 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":296,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n<0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":8053,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 2) + 1","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 2) + 1","n_lines":5,"__index_level_0__":297,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":5711,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 1)","n_lines":5,"__index_level_0__":298,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":27558,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n - 1 + fibonacci(n - 2)","n_lines":5,"__index_level_0__":299,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":33333,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":300,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n<0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":7346,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci((n - 2) * 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci((n - 2) * 2)","n_lines":5,"__index_level_0__":301,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":40466,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 1)","n_lines":5,"__index_level_0__":302,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"submission_id":38530,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 2)","n_lines":5,"__index_level_0__":303,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":41807,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 3)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=3))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n + fibonacci(n - 3)","n_lines":5,"__index_level_0__":304,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":6733,"func_code":"def fibonacci(l):\n    if l == 1 or l == 0:\n        return 1\n    l -= 1\n    return fibonacci(l) + fibonacci(l - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dd3b5b53-00cc-42e8-9f77-c46f84f7c7b3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1)), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(l):\n    if l == 1 or l == 0:\n        return 1\n    l -= 1\n    return fibonacci(l) + fibonacci(l - 1)","n_lines":5,"__index_level_0__":305,"repair":"def fibonacci(l):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if l<2:\n        return l\n    else:\n        l -= 1\n        return fibonacci(l) + fibonacci(l - 1)"}
{"submission_id":19499,"func_code":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth + 1 + fibonacci(nth - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth + 1 + fibonacci(nth - 1)","n_lines":4,"__index_level_0__":306,"repair":"def fibonacci(nth):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if nth == 0:\n        return 0\n    elif nth == 1:\n        return 1\n    else:\n        return fibonacci(nth-1) + fibonacci(nth-2)"}
{"submission_id":40572,"func_code":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + fibonacci(nth - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + fibonacci(nth - 1)","n_lines":4,"__index_level_0__":307,"repair":""}
{"submission_id":25100,"func_code":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + fibonacci(nth - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + fibonacci(nth - 2)","n_lines":4,"__index_level_0__":308,"repair":"def fibonacci(nth):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if nth == 0:\n        return 0\n    elif nth == 1:\n        return 1\n    else:\n        return fibonacci(nth-1) + fibonacci(nth-2)"}
{"submission_id":22988,"func_code":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + power(nth - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth - 1 + power(nth - 2)","n_lines":4,"__index_level_0__":309,"repair":""}
{"submission_id":9082,"func_code":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 0:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":310,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n == 1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":31365,"func_code":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth + fibonacci(nth - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(nth):\n    if nth == 1 or nth == 0:\n        return 1\n    return nth + fibonacci(nth - 1)","n_lines":4,"__index_level_0__":311,"repair":"def fibonacci(nth):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(1, nth+1):\n        a, b = b, a+b\n    return a"}
{"submission_id":40964,"func_code":"def fibonacci(l):\n    if l == 1 or l == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"09e5a143-ae3a-4611-8cfa-45d52e07b2c6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(l):\n    if l == 1 or l == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":312,"repair":"def fibonacci(l):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if l == 0:\n        return 0\n    elif l == 1:\n        return 1\n    else:\n        return fibonacci(l - 1) + fibonacci(l - 2)"}
{"submission_id":37019,"func_code":"def fibonacci(l):\n    if l == 1 or l == 1:\n        return 1\n    return fibonacci(l - 1) + fibonacci(l - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"09e5a143-ae3a-4611-8cfa-45d52e07b2c6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(l):\n    if l == 1 or l == 1:\n        return 1\n    return fibonacci(l - 1) + fibonacci(l - 2)","n_lines":4,"__index_level_0__":313,"repair":"def fibonacci(l):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while l>0:\n        a, b = b, a+b\n        l-=1\n    return a"}
{"submission_id":8525,"func_code":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":314,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n <= 2:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":3881,"func_code":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":315,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":26226,"func_code":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1 or n == 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":316,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":14519,"func_code":"def fibonacci(n):\n    if any([n == 0, n == 1]):\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"35d18426-1565-4cbc-afa0-82ff8cbc8cbd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[List(elts=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if any([n == 0, n == 1]):\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":317,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":19697,"func_code":"def fibonacci(n):\n    if n == len(a) - 1:\n        return a[n]\n    elif n != len(a) - 1:\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == len(a) - 1:\n        return a[n]\n    elif n != len(a) - 1:\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","n_lines":7,"__index_level_0__":318,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":38825,"func_code":"def fibonacci(n):\n    if n == len(a):\n        return a[n]\n    elif n != len(a) - 1:\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == len(a):\n        return a[n]\n    elif n != len(a) - 1:\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","n_lines":7,"__index_level_0__":319,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"submission_id":26930,"func_code":"def fibonacci(n):\n    if n == len(a):\n        return a[n]\n    elif n != len(a):\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == len(a):\n        return a[n]\n    elif n != len(a):\n        a.append(int(a[len(a) - 1] + a[len(a) - 2]))\n    else:\n        return fibonacci(n)","n_lines":7,"__index_level_0__":320,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":25418,"func_code":"def fibonacci(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":325,"repair":"def fibonacci(x):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        n = x\n        if n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":4562,"func_code":"def fibonacci(x):\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(x):\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)","n_lines":7,"__index_level_0__":330,"repair":"def fibonacci(x):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)"}
{"submission_id":1118,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"0d8d49aa-e213-4ab4-bcc1-440a0397585c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":6,"__index_level_0__":331,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if n == 0:\n    \n            return 0\n        elif n == 1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":34061,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"553c9a10-8e3d-401b-8100-2094287197ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":6,"__index_level_0__":332,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if n == 0:\n    \n            return 0\n        elif n == 1:\n            return 1\n        return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":9746,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"05bf8435-64be-48cb-be81-139956827989","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":6,"__index_level_0__":333,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n <= 1:\n        return n\n    else:\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":24214,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n < 3:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a7eb3c1-23d7-4547-a3af-8d940245a9a3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n < 3:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":6,"__index_level_0__":334,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n <= 0:\n        return 0\n    else:\n        if n == 2:\n            return 1\n        elif n < 3:\n            return n\n        return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":31680,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"0f25ed97-3bfd-4793-bb56-26c57236aeda","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":335,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":7734,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":336,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":6421,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"3e0829d0-8e72-4878-8d83-441773f88f67","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":6,"__index_level_0__":337,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n <= 1:\n        return n\n    else:\n        if n == 1:\n            return 1\n        return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":36975,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":6,"__index_level_0__":338,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":32072,"func_code":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n <= 2:\n        return n\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"d030c365-0c70-41fc-bf99-b5270c6b8c31","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 0:\n        return 1\n    if n <= 2:\n        return n\n    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":7,"__index_level_0__":339,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        if n==2:\n            return 1\n        if n <= 2:\n            return n\n        else:\n            return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":28996,"func_code":"def fibonacci(n):\n    if n == 1:\n        return 1\n    else:\n        return n + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1:\n        return 1\n    else:\n        return n + fibonacci(n - 1)","n_lines":5,"__index_level_0__":342,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":8170,"func_code":"def fibonacci(n):\n    if n == 1:\n        return 1\n    return n * fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"caddc359-e5b0-41d8-94ab-df712d5ea9ce","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n == 1:\n        return 1\n    return n * fibonacci(n - 1)","n_lines":4,"__index_level_0__":343,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if n == 1:\n            return 1\n    \n        if n == 0:\n            return 0\n        \n        return fibonacci(n-1) + fibonacci(n-2)"}
{"submission_id":39741,"func_code":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)","n_lines":4,"__index_level_0__":345,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if n < 2:\n    \n            return n\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":36376,"func_code":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":346,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"submission_id":1404,"func_code":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 2:\n        return 1\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":347,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n <= 1:\n        return n\n    else:\n        if n==2:\n            return 1\n        return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":24577,"func_code":"def fibonacci(n):\n    if n < 3:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"4a7eb3c1-23d7-4547-a3af-8d940245a9a3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n < 3:\n        return n\n    return fibonacci(n - 2) + fibonacci(n - 1)","n_lines":4,"__index_level_0__":352,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n<2:\n        return n\n    else:\n        if n==1:\n            return n\n        return fibonacci(n - 2) + fibonacci(n - 1)"}
{"submission_id":39982,"func_code":"def fibonacci(n):\n    if n <= 1:\n        return 0\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n <= 1:\n        return 0\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":353,"repair":"def fibonacci(n):\n        \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n        if n <= 1:\n    \n            return n\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":18405,"func_code":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":354,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":22748,"func_code":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    return n + fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    return n + fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":355,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":6031,"func_code":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"f21b9b8a-bb0a-4eef-ad07-667fd7acbc1b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n <= 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":4,"__index_level_0__":356,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a"}
{"submission_id":30525,"func_code":"def fibonacci(n):\n    if n <= 2:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"d030c365-0c70-41fc-bf99-b5270c6b8c31","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    if n <= 2:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":5,"__index_level_0__":358,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    \n    if n<0:\n        return 0\n    else:\n        if n==1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)"}
{"submission_id":20327,"func_code":"def fibonacci(n):\n    return 1 if n < 2 else fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"fibonacci_recur","func_name":"fibonacci","description":"Recursively compute the value of the fibonacci series at position n.","test":"assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657","correct":false,"user":"c7fa847c-561b-4652-9a01-05f954e6c8df","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=Constant(value=1), orelse=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","representative":"def fibonacci(n):\n    return 1 if n < 2 else fibonacci(n - 1) + fibonacci(n - 2)","n_lines":2,"__index_level_0__":359,"repair":"def fibonacci(n):\n    \"\"\"Recursively compute the value of the fibonacci series at position n.\"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n -= 1\n    return a"}
{"submission_id":13316,"func_code":"def index(str, letter, pos):\n    for letter in str:\n        if str[pos] == letter:\n            print('1')\n        else:\n            print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    for letter in str:\n        if str[pos] == letter:\n            print('1')\n        else:\n            print('-1')","n_lines":6,"__index_level_0__":371,"repair":""}
{"submission_id":22730,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"b842b3b5-71ff-4f80-9bd4-d5973c3f5123","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":392,"repair":""}
{"submission_id":36955,"func_code":"def index(str, letter, pos):\n    if str[pos] == letter:\n        print('1')\n    else:\n        print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if str[pos] == letter:\n        print('1')\n    else:\n        print('-1')","n_lines":5,"__index_level_0__":397,"repair":""}
{"submission_id":30581,"func_code":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        a.append(string[i])\n        if string[i] == letter:\n            return i\n        i = i + 1\n    if letter not in a:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9c13ddb1-6d39-4008-85d0-50d504649bb6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        a.append(string[i])\n        if string[i] == letter:\n            return i\n        i = i + 1\n    if letter not in a:\n        return '-1'","n_lines":10,"__index_level_0__":401,"repair":"def index(string, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        a = []\n        while i < len(string):\n            a.append(string[i])\n            if string[i] == letter:\n                return i\n            i = i + 1\n        if letter not in a:\n    \n            return -1"}
{"submission_id":36836,"func_code":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        a.append(string[i])","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"ea7c3666-b2a8-45fc-9644-69fa2415de49","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        a.append(string[i])","n_lines":5,"__index_level_0__":402,"repair":"def index(string, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = string.find(letter)\n    if i < 0:\n        return -1\n    else:\n        return i"}
{"submission_id":7241,"func_code":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        if string == letter:\n            return i\n        i = i + 1\n    if letter not in a:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"fd20892b-e35f-43bc-b82d-e6db9320b8ae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    i = 0\n    a = []\n    while i < len(string):\n        if string == letter:\n            return i\n        i = i + 1\n    if letter not in a:\n        return '-1'","n_lines":9,"__index_level_0__":403,"repair":"def index(string, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(string):\n            if string[i] == letter:\n                return i\n            i += 1\n        \n        return -1"}
{"submission_id":8911,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        print(i + 1)\n    else:\n        print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        print(i + 1)\n    else:\n        print('-1')","n_lines":8,"__index_level_0__":412,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n            if str[i]==letter:\n                return i\n            i += 1\n    \n        if i>=len(str):\n            return -1\n        else:\n            print('-1')"}
{"submission_id":30205,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        print(i)\n    else:\n        print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        print(i)\n    else:\n        print('-1')","n_lines":8,"__index_level_0__":413,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str) and str[i] != letter:\n            i = i + 1\n    \n        if i == len(str): \n            return -1\n    \n        return i"}
{"submission_id":20229,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        return i\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str) and str[i] != letter:\n        i = i + 1\n    if i < len(str):\n        return i\n    else:\n        return '-1'","n_lines":8,"__index_level_0__":414,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    i=0\n    while i<len(str):\n        if str[i] == letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":33832,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str) - 1:\n        i = i + 1\n    if i + 1 == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str) - 1:\n        i = i + 1\n    if i + 1 == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":415,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n            if str[i] == letter:\n                return i\n            i += 1\n    \n        if i == len(str):\n            return -1\n        else:\n            return i"}
{"submission_id":11325,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str) - 1:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str) - 1:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":416,"repair":""}
{"submission_id":12709,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str):\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] != letter and i < len(str):\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":417,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n                if str[i] == letter:\n                        return i\n                i+=1\n        return -1"}
{"submission_id":30909,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return '-1'","n_lines":7,"__index_level_0__":418,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i] == letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":15707,"func_code":"def index(word, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def index(word, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return -1","n_lines":7,"__index_level_0__":419,"repair":"def index(word, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(word):\n            if word[i] == letter:\n                return i\n            i = i + 1\n        return -1"}
{"submission_id":11330,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position = position + 1\n            return position\n        else:\n            return str + '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"4490d043-a9e0-48aa-a62c-ddcc67ed7fba","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value='-1')))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position = position + 1\n            return position\n        else:\n            return str + '-1'","n_lines":9,"__index_level_0__":420,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n            if letter == str[i]:\n                return i\n            i = i + 1\n        return -1"}
{"submission_id":24201,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position = position + 1\n            return position\n        else:\n            return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"4490d043-a9e0-48aa-a62c-ddcc67ed7fba","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position = position + 1\n            return position\n        else:\n            return '-1'","n_lines":9,"__index_level_0__":421,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    position = 0\n    for c in str:\n        if c == letter:\n            return position\n        else:\n            position = position + 1\n    return -1"}
{"submission_id":39950,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position += 1\n            return position\n        else:\n            return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        position = 0\n        if letter in str:\n            position += 1\n            return position\n        else:\n            return '-1'","n_lines":9,"__index_level_0__":422,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n    \n            if str[i] == letter:\n                return i\n            else:\n                i += 1\n        return -1"}
{"submission_id":6056,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in int(str[i]):\n            return i\n        else:\n            return '-1'\n        i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in int(str[i]):\n            return i\n        else:\n            return '-1'\n        i = i + 1","n_lines":8,"__index_level_0__":423,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    count = 0\n    for c in str:\n        if c == letter:\n            return count\n        count += 1\n    return -1"}
{"submission_id":10716,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n            i = i + 1\n        else:\n            return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n            i = i + 1\n        else:\n            return '-1'","n_lines":8,"__index_level_0__":424,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if letter in str[i]:\n                return i\n                i = i + 1\n    \n        return -1"}
{"submission_id":12172,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        else:\n            return '-1'\n        i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        else:\n            return '-1'\n        i = i + 1","n_lines":8,"__index_level_0__":425,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if letter in str[i]:\n                return i\n    \n        return -1"}
{"submission_id":23532,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        i = i + 1\n    else:\n        return '-1'\n    i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        i = i + 1\n    else:\n        return '-1'\n    i = i + 1","n_lines":9,"__index_level_0__":426,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i+=1\n    return -1"}
{"submission_id":24261,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        i = i + 1\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return i\n        i = i + 1\n    else:\n        return '-1'","n_lines":8,"__index_level_0__":427,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if letter in str[i]:\n                return i\n    \n        return -1"}
{"submission_id":2026,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        else:\n            return '-1'\n        i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        else:\n            return '-1'\n        i = i + 1","n_lines":8,"__index_level_0__":428,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i]==letter:\n            return i\n        else:\n            i+=1\n    return -1"}
{"submission_id":18494,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        else:\n            return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        else:\n            return '-1'","n_lines":7,"__index_level_0__":429,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i]==letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":19526,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        i = i + 1\n    else:\n        return '-1'\n    i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"d2330156-60dd-4aca-a925-9aa27e3edb48","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str[i]:\n            return str[i]\n        i = i + 1\n    else:\n        return '-1'\n    i = i + 1","n_lines":9,"__index_level_0__":430,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    for i in range(len(str)):\n        if str[i] == letter:\n            return i\n    return -1"}
{"submission_id":195,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            print(i)\n        else:\n            i += 1\n    print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            print(i)\n        else:\n            i += 1\n    print('-1')","n_lines":8,"__index_level_0__":431,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return -1"}
{"submission_id":9642,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return\n        i += 1\n    return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"bc728955-e4e8-48d1-9acb-b83b3fd023ba","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return()], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return\n        i += 1\n    return '-1'","n_lines":7,"__index_level_0__":432,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n                if str[i] == letter:\n                        return i\n                i += 1\n        return -1"}
{"submission_id":4189,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    print(len(str))\n    print(i)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    print(len(str))\n    print(i)","n_lines":9,"__index_level_0__":433,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i]==letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":35937,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    print(len(str))","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    print(len(str))","n_lines":8,"__index_level_0__":434,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n    \n        return -1"}
{"submission_id":37898,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str) - 1:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str) - 1:\n        return '-1'","n_lines":9,"__index_level_0__":435,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n            else:\n                i = i + 1\n    \n        return -1"}
{"submission_id":21575,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str) - 1:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str) - 1:\n        return -1","n_lines":9,"__index_level_0__":436,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n    \n            i = i + 1\n        return -1"}
{"submission_id":31869,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str):\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str):\n        return '-1'","n_lines":9,"__index_level_0__":437,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n            else:\n                i = i + 1\n        if i == len(str):\n    \n            return -1"}
{"submission_id":39346,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i = i + 1\n    return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"b842b3b5-71ff-4f80-9bd4-d5973c3f5123","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i = i + 1\n    return '-1'","n_lines":7,"__index_level_0__":439,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n    \n        return -1"}
{"submission_id":33803,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    print('-1')","n_lines":7,"__index_level_0__":441,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n            if str[i] == letter:\n                return i\n            i += 1\n        return -1"}
{"submission_id":3545,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"7d0d82bd-2bdb-48da-a37f-ffa6ee59d960","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return '-1'","n_lines":7,"__index_level_0__":442,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i += 1\n    return -1"}
{"submission_id":33483,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter[i] == str:\n            print('1')\n        else:\n            print('-1')\n        i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if letter[i] == str:\n            print('1')\n        else:\n            print('-1')\n        i = i + 1","n_lines":8,"__index_level_0__":443,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n    \n        while i < len(str):\n                if str[i] == letter:\n                        return i\n                else:\n                        i += 1\n        return -1"}
{"submission_id":13585,"func_code":"def index(str, letter):\n    i = 0\n    while str[i - 1] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i - 1] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":444,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i] == letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":6712,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] == letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] == letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":445,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i]==letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":25863,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":8,"__index_level_0__":446,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":1904,"func_code":"def index(str, letter):\n    i = 0\n    while str[i] != letter:\n        return i\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while str[i] != letter:\n        return i\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":9,"__index_level_0__":447,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while True:\n        i = str.find(letter, i)\n        if i == len(str):\n            return '-1'\n        else:\n            return i"}
{"submission_id":8857,"func_code":"def index(str, letter):\n    pos_letter = 1\n    i = 0\n    while i < len(str):\n        if letter in str:\n            pos_letter = i + 1\n            i = i + 1\n            return pos_letter\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    pos_letter = 1\n    i = 0\n    while i < len(str):\n        if letter in str:\n            pos_letter = i + 1\n            i = i + 1\n            return pos_letter\n    else:\n        return '-1'","n_lines":10,"__index_level_0__":448,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":35317,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    if letter in str:\n        letter_pos = i + 1\n        return letter_pos\n    else:\n        print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    if letter in str:\n        letter_pos = i + 1\n        return letter_pos\n    else:\n        print('-1')","n_lines":8,"__index_level_0__":450,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = -1\n    for char in str:\n        if char == letter:\n            pos = pos+1\n            break\n    return pos"}
{"submission_id":28381,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        else:\n            return '-1'\n        i = i + 1\n    return letter_pos","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        else:\n            return '-1'\n        i = i + 1\n    return letter_pos","n_lines":10,"__index_level_0__":451,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    letter_pos = -1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i\n            break\n        i = i + 1\n    return letter_pos"}
{"submission_id":3610,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n        return letter_pos","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n        return letter_pos","n_lines":8,"__index_level_0__":452,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter in str:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":14318,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return pos_letter","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='pos_letter', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return pos_letter","n_lines":8,"__index_level_0__":453,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return -1"}
{"submission_id":700,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    print('-1')","n_lines":9,"__index_level_0__":454,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":7550,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    if letter not in str:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    if letter not in str:\n        return '-1'","n_lines":10,"__index_level_0__":455,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while True:\n        letter_pos = str.find(letter, i)\n        if letter_pos == -1:\n            i = i + 1\n        return letter_pos\n        if letter not in str:\n            return '-1'"}
{"submission_id":42316,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos\n    return '-1'","n_lines":9,"__index_level_0__":456,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":1287,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        i = i + 1\n    return letter_pos","n_lines":8,"__index_level_0__":457,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter in str[i:]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":34308,"func_code":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        return letter_pos\n    i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = str[0]\n    letter_pos = 1\n    while i < len(str):\n        if letter in str:\n            letter_pos = i + 1\n        return letter_pos\n    i = i + 1","n_lines":8,"__index_level_0__":458,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    for c in str:\n        if c == letter:\n            return i\n        i += 1\n    return -1"}
{"submission_id":2915,"func_code":"def index(string, letter):\n    position = -1\n    i = 0\n    while i < len(string):\n        if string[i] == letter:\n            position = i\n        i = i + 1\n    print(position)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = -1\n    i = 0\n    while i < len(string):\n        if string[i] == letter:\n            position = i\n        i = i + 1\n    print(position)","n_lines":8,"__index_level_0__":459,"repair":"def index(string, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        position = -1\n        i = 0\n    \n        while i < len(string):\n                if string[i] == letter:\n                        position = i\n                        break\n                i += 1\n        return position"}
{"submission_id":7842,"func_code":"def index(str, letter):\n    for letter in str:\n        if letter[i] == str:\n            print('1')\n        else:\n            print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    for letter in str:\n        if letter[i] == str:\n            print('1')\n        else:\n            print('-1')","n_lines":6,"__index_level_0__":461,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    for c in str:\n        if c==letter:\n            return i\n        i=i+1\n    return -1"}
{"submission_id":22184,"func_code":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(string):\n            if letter == str[i]:\n                return i\n            i = i + 1\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(string):\n            if letter == str[i]:\n                return i\n            i = i + 1\n    else:\n        return '-1'","n_lines":9,"__index_level_0__":465,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":7974,"func_code":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                print(i)\n            i = i + 1\n    else:\n        print('-1')","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e5f35cd7-8337-4a68-bda3-4164a982feae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                print(i)\n            i = i + 1\n    else:\n        print('-1')","n_lines":9,"__index_level_0__":466,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":10612,"func_code":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                print(i)\n            i = i + 1\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                print(i)\n            i = i + 1\n    else:\n        return '-1'","n_lines":9,"__index_level_0__":467,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":37150,"func_code":"def index(string, letter):\n    if letter in string:\n        i = 0\n        while i < len(string):\n            if letter == string[i]:\n                return i\n            i += 1\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"5c105474-42d8-4a95-a311-034a93c693c8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    if letter in string:\n        i = 0\n        while i < len(string):\n            if letter == string[i]:\n                return i\n            i += 1\n    else:\n        return '-1'","n_lines":9,"__index_level_0__":469,"repair":"def index(string, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(string):\n        if letter == string[i]:\n            return i\n        i += 1\n    return -1"}
{"submission_id":18254,"func_code":"def index(str, letter):\n    if letter in str:\n        print(1)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"762404df-24ca-44ff-9c98-3f841fa7faab","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        print(1)","n_lines":3,"__index_level_0__":470,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = -1\n    for i,c in enumerate(str):\n        if c==letter:\n            pos = i\n            break\n    return pos"}
{"submission_id":9198,"func_code":"def index(str, letter):\n    if letter in str:\n        print(str[0])\n    else:\n        print(str[-1])","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        print(str[0])\n    else:\n        print(str[-1])","n_lines":5,"__index_level_0__":471,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    for c in str:\n        if c == letter:\n            return i\n        i += 1\n    return -1"}
{"submission_id":24763,"func_code":"def index(str, letter):\n    if letter in str:\n        print(letter[0])\n    else:\n        print(letter[-1])","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        print(letter[0])\n    else:\n        print(letter[-1])","n_lines":5,"__index_level_0__":472,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = 0\n    for char in str:\n        if char == letter:\n            return pos\n        pos+=1\n    return -1"}
{"submission_id":12654,"func_code":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '+1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"03324848-d1b1-4b00-9ab7-93d76a61a9c0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='+1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '+1'","n_lines":5,"__index_level_0__":474,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n            return str.find(letter)\n    \n        return -1"}
{"submission_id":19615,"func_code":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"03324848-d1b1-4b00-9ab7-93d76a61a9c0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":475,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = -1\n    for i in range(len(str)):\n        if str[i] == letter:\n            pos = i\n            break\n    return pos"}
{"submission_id":19135,"func_code":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"03324848-d1b1-4b00-9ab7-93d76a61a9c0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    else:\n        return '1'","n_lines":5,"__index_level_0__":476,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n            return str.find(letter)\n    \n        else:\n            return -1"}
{"submission_id":13770,"func_code":"def index(str, letter):\n    if letter in str:\n        return int(letter[i])\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return int(letter[i])\n    else:\n        return -1","n_lines":5,"__index_level_0__":477,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n    \n            return str.find(letter)\n        else:\n            return -1"}
{"submission_id":30375,"func_code":"def index(str, letter):\n    if letter in str:\n        return len(str[letter])\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return len(str[letter])\n    else:\n        return -1","n_lines":5,"__index_level_0__":478,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n    \n            return str.find(letter)\n        else:\n            return -1"}
{"submission_id":5428,"func_code":"def index(str, letter):\n    if letter in str:\n        return pos(letter)\n    else:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='pos', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return pos(letter)\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":479,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = -1\n    for index, char in enumerate(str):\n        if char == letter:\n            pos = index\n            break\n    return pos"}
{"submission_id":16698,"func_code":"def index(str, letter):\n    if letter in str:\n        return 1\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"415d4431-1b98-4241-a978-02dc16bf556e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return 1\n    else:\n        return -1","n_lines":5,"__index_level_0__":480,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n    \n            pos = str.find(letter)\n            return pos\n        else:\n            return -1"}
{"submission_id":23220,"func_code":"def index(str, letter):\n    if letter in str:\n        return str\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str\n    else:\n        return -1","n_lines":5,"__index_level_0__":481,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    count = 0\n    for c in str:\n        if c==letter:\n            return count\n        count = count+1\n    return -1"}
{"submission_id":12339,"func_code":"def index(str, letter):\n    if letter in str:\n        return letter\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return letter\n    else:\n        return -1","n_lines":5,"__index_level_0__":482,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = str.find(letter)\n    if i == -1:\n        return -1\n    else:\n        return i"}
{"submission_id":10192,"func_code":"def index(str, letter):\n    if letter in str:\n        return str[int(letter)]\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str[int(letter)]\n    else:\n        return -1","n_lines":5,"__index_level_0__":483,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    for c in str:\n        if c==letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":25621,"func_code":"def index(str, letter):\n    if letter in str:\n        return str[0]\n    else:\n        return str[-1]","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str[0]\n    else:\n        return str[-1]","n_lines":5,"__index_level_0__":484,"repair":""}
{"submission_id":10672,"func_code":"def index(str, letter):\n    if letter in str:\n        return str[letter]\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str[letter]\n    else:\n        return -1","n_lines":5,"__index_level_0__":485,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n    \n            for pos, char in enumerate(str):\n                if char == letter:\n                    return pos\n        else:\n            return -1"}
{"submission_id":40278,"func_code":"def index(str, letter):\n    if letter in str:\n        return letter[i]\n    else:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return letter[i]\n    else:\n        return -1","n_lines":5,"__index_level_0__":486,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter in str:\n    \n            pos = str.find(letter)\n            \n            if pos!=-1:\n                return pos\n        else:\n            return -1"}
{"submission_id":29781,"func_code":"def index(sting, letter):\n    if letter not in string:\n        print('-1')\n    if letter in string:\n        a = list(string)\n        print(a.index(letter))","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='string', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='string', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(sting, letter):\n    if letter not in string:\n        print('-1')\n    if letter in string:\n        a = list(string)\n        print(a.index(letter))","n_lines":6,"__index_level_0__":489,"repair":"def index(sting, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    string = list(sting)\n    for char in string:\n        if letter == char:\n            return string.index(char)\n    return -1"}
{"submission_id":422,"func_code":"def index(string, letter):\n    if letter not in string:\n        print('-1')\n    if letter in string:\n        a = list(string)\n        print(a.index(letter))","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    if letter not in string:\n        print('-1')\n    if letter in string:\n        a = list(string)\n        print(a.index(letter))","n_lines":6,"__index_level_0__":490,"repair":"def index(string, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = string.find(letter)\n    if pos == -1:\n        return -1\n    return pos"}
{"submission_id":24322,"func_code":"def index(str, letter):\n    if letter not in str:\n        print(-1)\n    else:\n        i = 0\n        while str[i] != letter:\n            i = i + 1\n        print(i)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        print(-1)\n    else:\n        i = 0\n        while str[i] != letter:\n            i = i + 1\n        print(i)","n_lines":8,"__index_level_0__":491,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i = i + 1\n    return -1"}
{"submission_id":19276,"func_code":"def index(str, letter):\n    if letter not in str:\n        return '-1'\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i += 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return '-1'\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i += 1","n_lines":8,"__index_level_0__":492,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if letter == str[i]:\n            return i\n        i += 1\n    return -1"}
{"submission_id":5345,"func_code":"def index(string, letter):\n    if letter not in string:\n        return '-1'\n    if letter in string:\n        a = list(string)\n        return a.index(letter)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    if letter not in string:\n        return '-1'\n    if letter in string:\n        a = list(string)\n        return a.index(letter)","n_lines":6,"__index_level_0__":493,"repair":"def index(string, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = 0\n    for char in string:\n        if char == letter:\n            return pos\n        pos += 1\n    return -1"}
{"submission_id":8612,"func_code":"def index(str, letter):\n    if letter not in str:\n        return '-1'","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return '-1'","n_lines":3,"__index_level_0__":494,"repair":""}
{"submission_id":40914,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return ord(letter) - 100","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=BinOp(left=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=100)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return ord(letter) - 100","n_lines":5,"__index_level_0__":497,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if str == \"\":\n        return -1\n    else:\n        if str[0]==letter:\n            return 0\n        else:\n            return ord(letter) - 100"}
{"submission_id":6398,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return letter.index()","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return letter.index()","n_lines":5,"__index_level_0__":498,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter not in str:\n            return -1\n    \n        for i in range(len(str)):\n            if str[i] == letter:\n                return i"}
{"submission_id":27044,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return ord(letter)","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return ord(letter)","n_lines":5,"__index_level_0__":499,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter not in str:\n            return -1\n    \n        for i,c in enumerate(str):\n            if c==letter:\n                return i\n            return ord(letter)"}
{"submission_id":42419,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return str","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return str","n_lines":5,"__index_level_0__":500,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter not in str:\n            return -1\n    \n        return str.find(letter)"}
{"submission_id":15622,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return letter","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return letter","n_lines":5,"__index_level_0__":501,"repair":"def index(str, letter):\n        \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if letter not in str:\n            return -1\n    \n        pos = str.find(letter)\n        return pos"}
{"submission_id":21000,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return rdict[letter]","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Subscript(value=Name(id='rdict', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return rdict[letter]","n_lines":5,"__index_level_0__":502,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    for i,c in enumerate(str):\n        if c == letter:\n            return i\n    return -1"}
{"submission_id":30723,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return str[letter]","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        return str[letter]","n_lines":5,"__index_level_0__":503,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    for i,char in enumerate(str):\n        if char == letter:\n            return i\n    return -1"}
{"submission_id":28487,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1","n_lines":3,"__index_level_0__":504,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = -1\n    for i in range(len(str)):\n        if str[i] == letter:\n            pos = i\n            break\n    return pos"}
{"submission_id":32599,"func_code":"def index(str, letter):\n    return len(str)\n    i = 0\n    while str[i] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    return len(str)\n    i = 0\n    while str[i] != letter:\n        i = i + 1\n    if i == len(str):\n        return '-1'\n    else:\n        return i","n_lines":9,"__index_level_0__":506,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while True:\n        i = str.find(letter, i)\n        if i == len(str):\n            return '-1'\n        else:\n            return i"}
{"submission_id":18045,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        index = letter.index('str')\n        if str[i] == letter:\n            return index\n        else:\n            return '-1'\n        i = i + 1","assignment_id":"index_iter","func_name":"index","description":"Iteratively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='x_3', ctx=Load()), args=[Constant(value='x_0')], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        index = letter.index('str')\n        if str[i] == letter:\n            return index\n        else:\n            return '-1'\n        i = i + 1","n_lines":9,"__index_level_0__":508,"repair":"def index(str, letter):\n    \"\"\"Iteratively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i=0\n    while i<len(str):\n        if str[i]==letter:\n            return i\n        i+=1\n    return -1"}
{"submission_id":7266,"func_code":"def index(string, letter, place=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return place\n    else:\n        place = place + 1\n        return index(string[1:], letter, place=place)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"5c105474-42d8-4a95-a311-034a93c693c8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[keyword(arg='x_2', value=Name(id='x_2', ctx=Load()))]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, place=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return place\n    else:\n        place = place + 1\n        return index(string[1:], letter, place=place)","n_lines":8,"__index_level_0__":361,"repair":"def index(string, letter, place=0):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if string == '':\n    \n            return -1\n        elif string[0] == letter:\n            return place\n        else:\n            place = place + 1\n            return index(string[1:], letter, place=place)"}
{"submission_id":15254,"func_code":"def index(string, letter, position=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, position=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","n_lines":8,"__index_level_0__":362,"repair":"def index(string, letter, position=0):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    position += string.find(letter)\n    if position == -1:\n        return -1\n    else:\n        return position"}
{"submission_id":41164,"func_code":"def index(string, letter, pos=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return pos\n    else:\n        pos += 1\n        return index(string[1:], letter, pos=pos)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b307bc6a-3e47-4e87-960f-7f47db5cc8d8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[keyword(arg='x_2', value=Name(id='x_2', ctx=Load()))]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, pos=0):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return pos\n    else:\n        pos += 1\n        return index(string[1:], letter, pos=pos)","n_lines":8,"__index_level_0__":363,"repair":"def index(string, letter, pos=0):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if string == '':\n    \n            return -1\n        elif string[0] == letter:\n            return pos\n        else:\n            pos += 1\n            return index(string[1:], letter, pos=pos)"}
{"submission_id":1906,"func_code":"def index(str, letter, default=0):\n    while default == 0:\n        if letter not in str:\n            return -1\n        else:\n            count = 0\n            while str[count] != letter:\n                count += 1\n    return count","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, default=0):\n    while default == 0:\n        if letter not in str:\n            return -1\n        else:\n            count = 0\n            while str[count] != letter:\n                count += 1\n    return count","n_lines":9,"__index_level_0__":364,"repair":"def index(str, letter, default=0):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        while default == 0:\n            if letter not in str:\n                return -1\n            else:\n                count = 0\n                while str[count] != letter:\n                    count += 1\n    \n                return count"}
{"submission_id":588,"func_code":"def index(str, letter1, letter2):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='letter', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter1, letter2):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        i += 1\n    return '-1'","n_lines":7,"__index_level_0__":366,"repair":"def index(str, letter1, letter2):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    if letter2 == letter1:\n        return i\n    while i < len(str):\n        if str[i] == letter1:\n            return i\n        elif str[i] == letter2:\n            return i\n        i += 1\n    return -1"}
{"submission_id":31219,"func_code":"def index(str, letter, num):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str):\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, num):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            i = i + 1\n    if i == len(str):\n        return '-1'","n_lines":9,"__index_level_0__":367,"repair":"def index(str, letter, num):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        i = 0\n        while i < len(str):\n            if str[i] == letter:\n                return i\n            else:\n                i = i + 1\n        if i == len(str):\n    \n            return -1"}
{"submission_id":25612,"func_code":"def index(str, letter1, letter2):\n    i = 0\n    while i < len(str):\n        if str[i] == letter1:\n            return i\n        i += 1\n    return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"54e3b0c4-223a-427c-9155-d6954330319d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter1, letter2):\n    i = 0\n    while i < len(str):\n        if str[i] == letter1:\n            return i\n        i += 1\n    return '-1'","n_lines":7,"__index_level_0__":370,"repair":"def index(str, letter1, letter2):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    i = 0\n    while i < len(str):\n        if str[i] == letter2:\n            return i\n        if str[i] == letter1:\n            return i\n        i += 1\n    return -1"}
{"submission_id":17942,"func_code":"def index(str, letter, pos):\n    if len(str) - 1 == pos:\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if len(str) - 1 == pos:\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":372,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if pos == len(str):\n        return -1\n    else:\n        if str[pos] == letter:\n            return pos\n        else:\n            return index(str, letter, pos + 1)"}
{"submission_id":16047,"func_code":"def index(str, letter, pos):\n    if len(str) == 0:\n        return -1\n    elif str[pos] == letter:\n        print(pos)\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if len(str) == 0:\n        return -1\n    elif str[pos] == letter:\n        print(pos)\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":373,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if pos == len(str):\n        return -1\n    else:\n        if str[pos] == letter:\n            return pos\n        elif str[pos] == letter:\n            print(pos)\n        else:\n            return index(str, letter, pos + 1)"}
{"submission_id":16014,"func_code":"def index(str, letter, pos):\n    if len(str) == 0:\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if len(str) == 0:\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":374,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, pos)\n    if pos == -1:\n        return -1\n    return pos"}
{"submission_id":39616,"func_code":"def index(string, letter, position):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter, position)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, position):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter, position)","n_lines":8,"__index_level_0__":375,"repair":"def index(string, letter, position):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = string.find(letter, position)\n    if pos == -1:\n        return -1\n    else:\n        return pos"}
{"submission_id":19890,"func_code":"def index(string, letter, position):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, position):\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","n_lines":8,"__index_level_0__":376,"repair":"def index(string, letter, position):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = string.find(letter, position)\n    if pos == -1:\n        return -1\n    return pos"}
{"submission_id":16607,"func_code":"def index(string, letter, rv):\n    if string == []:\n        return -1\n    elif string[0] == letter:\n        return rv\n    else:\n        rv = rv + 1\n        return index(sring[1:], letter, rv)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='sring', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, rv):\n    if string == []:\n        return -1\n    elif string[0] == letter:\n        return rv\n    else:\n        rv = rv + 1\n        return index(sring[1:], letter, rv)","n_lines":8,"__index_level_0__":377,"repair":"def index(string, letter, rv):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    sring = string.lower()\n    if sring == \"\":\n        return -1\n    if sring[0] == letter:\n        return rv\n    else:\n        rv = rv + 1\n        return index(sring[1:], letter, rv)"}
{"submission_id":24962,"func_code":"def index(string, letter, rv):\n    if string == []:\n        return -1\n    elif string[0] == letter:\n        return rv\n    else:\n        rv = rv + 1\n        return index(string[1:], letter, rv)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter, rv):\n    if string == []:\n        return -1\n    elif string[0] == letter:\n        return rv\n    else:\n        rv = rv + 1\n        return index(string[1:], letter, rv)","n_lines":8,"__index_level_0__":378,"repair":"def index(string, letter, rv):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if len(string) == 0:\n        return -1\n    else:\n        if string[0] == letter:\n            return rv\n        else:\n            rv = rv + 1\n            return index(string[1:], letter, rv)"}
{"submission_id":7797,"func_code":"def index(str, letter, case):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, case):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":379,"repair":"def index(str, letter, case):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, case)\n    if pos == -1:\n        return -1\n    else:\n        return pos"}
{"submission_id":6537,"func_code":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n        print(i)\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n        print(i)\n    else:\n        return '-1'","n_lines":6,"__index_level_0__":380,"repair":"def index(str, letter, i):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, i)\n    if pos == -1:\n        return -1\n    return pos"}
{"submission_id":21879,"func_code":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":381,"repair":"def index(str, letter, i):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, i)\n    if pos==-1:\n        return -1\n    else:\n        return pos"}
{"submission_id":35688,"func_code":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return '1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return '1'","n_lines":5,"__index_level_0__":382,"repair":""}
{"submission_id":3643,"func_code":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return -1","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, i):\n    if letter in str[i]:\n        return i\n    else:\n        return -1","n_lines":5,"__index_level_0__":383,"repair":"def index(str, letter, i):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if i == len(str):\n        return -1\n    \n    if letter == str[i]:\n        return i\n    \n    return index(str, letter, i+1)"}
{"submission_id":5081,"func_code":"def index(str, letter, position):\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return pos\n    else:\n        return index(str, letter, position + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='pos', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, position):\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return pos\n    else:\n        return index(str, letter, position + 1)","n_lines":7,"__index_level_0__":384,"repair":"def index(str, letter, position):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, position)\n    if pos==-1:\n        return -1\n    else:\n        if position==0:\n            return pos\n        else:\n            return index(str, letter, position + 1)"}
{"submission_id":18803,"func_code":"def index(str, letter, position):\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return position\n    else:\n        return index(str, letter, position + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, position):\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return position\n    else:\n        return index(str, letter, position + 1)","n_lines":7,"__index_level_0__":385,"repair":"def index(str, letter, position):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if position >= len(str):\n        return -1\n    else:\n        if letter == str[position]:\n            return position\n        else:\n            return index(str, letter, position + 1)"}
{"submission_id":301,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return 'False'\n    elif str[pos] == letter:\n        return 'True'\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return 'False'\n    elif str[pos] == letter:\n        return 'True'\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":386,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, pos)\n    if pos == -1:\n        return -1\n    else:\n        return pos"}
{"submission_id":23760,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return 1 + index(str[1:], letter, pos)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return 1 + index(str[1:], letter, pos)","n_lines":7,"__index_level_0__":387,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    index = -1\n    for i in range(len(str)):\n        if str[i] == letter:\n            index = i\n            if pos > index:\n                return index\n    return index"}
{"submission_id":506,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":388,"repair":"def index(str, letter, pos):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if pos == len(str):\n            return -1\n    \n        if letter == str[pos]:\n            return pos\n            return 0\n        else:\n            return index(str, letter, pos + 1)"}
{"submission_id":28893,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return index(str[1:], letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 0\n    else:\n        return index(str[1:], letter, pos + 1)","n_lines":7,"__index_level_0__":389,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, pos)\n    if pos == -1:\n        return -1\n    return pos"}
{"submission_id":31816,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 1\n    else:\n        return index(str[1:], letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return 1\n    else:\n        return index(str[1:], letter, pos + 1)","n_lines":7,"__index_level_0__":390,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, pos)\n    if pos<0:\n        return -1\n    else:\n        if letter == str[pos]:\n            return pos\n        else:\n            return index(str[1:], letter, pos + 1)"}
{"submission_id":4886,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":7,"__index_level_0__":391,"repair":"def index(str, letter, pos):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if pos == len(str):\n            return -1\n    \n        if str[pos] == letter:\n            return pos\n    \n        return index(str, letter, pos+1)"}
{"submission_id":25259,"func_code":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str[1:], letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str[1:], letter, pos + 1)","n_lines":7,"__index_level_0__":393,"repair":"def index(str, letter, pos):\n        \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n        if pos == len(str):\n            return -1\n        elif str[pos] == letter:\n            return pos\n        else:\n    \n            return index(str, letter, pos+1)"}
{"submission_id":8118,"func_code":"def index(str, letter, pos):\n    if pos in len(str):\n        return -1\n    elif str[pos] in letter:\n        return pos\n    elif recursive in str:\n        return 1\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='recursive', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if pos in len(str):\n        return -1\n    elif str[pos] in letter:\n        return pos\n    elif recursive in str:\n        return 1\n    else:\n        return index(str, letter, pos + 1)","n_lines":9,"__index_level_0__":394,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    pos = str.find(letter, pos)\n    if pos<0:\n        return -1\n    else:\n        return pos"}
{"submission_id":13851,"func_code":"def index(str, recursive, letter):\n    if letter in str:\n        return 1\n    elif letter in str:\n        return -1\n    elif recursive in str:\n        return 1\n    else:\n        return -1","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, recursive, letter):\n    if letter in str:\n        return 1\n    elif letter in str:\n        return -1\n    elif recursive in str:\n        return 1\n    else:\n        return -1","n_lines":9,"__index_level_0__":395,"repair":""}
{"submission_id":3540,"func_code":"def index(str, recursive, letter):\n    if letter in str:\n        return 1\n    else:\n        return -1","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, recursive, letter):\n    if letter in str:\n        return 1\n    else:\n        return -1","n_lines":5,"__index_level_0__":396,"repair":""}
{"submission_id":37566,"func_code":"def index(str, letter, pos):\n    if str[pos] == letter:\n        return str[pos]\n    elif str[pos] != letter:\n        return '-1'\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    if str[pos] == letter:\n        return str[pos]\n    elif str[pos] != letter:\n        return '-1'\n    else:\n        return index(str, letter, pos + 1)","n_lines":7,"__index_level_0__":398,"repair":""}
{"submission_id":27182,"func_code":"def index(str, letter, pos):\n    import fibonacci\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_3')]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='x_3', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='x_3', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter, pos):\n    import fibonacci\n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)","n_lines":8,"__index_level_0__":399,"repair":"def index(str, letter, pos):\n    \"\"\"Recursively search for the position of letter in str, return -1 if it is not there.\"\"\"\n    \n    if pos == len(str):\n        return -1\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str,letter,pos+1)"}
{"submission_id":40106,"func_code":"def index(string, letter):\n    position = 0\n    if string == ' ':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = 0\n    if string == ' ':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","n_lines":9,"__index_level_0__":404,"repair":""}
{"submission_id":17860,"func_code":"def index(string, letter):\n    position = 0\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = 0\n    if string == '':\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","n_lines":9,"__index_level_0__":405,"repair":""}
{"submission_id":22000,"func_code":"def index(string, letter):\n    position = 0\n    if string == []:\n        print('-1')\n    elif string[0] == letter:\n        print(position)\n    else:\n        position += 1\n        index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = 0\n    if string == []:\n        print('-1')\n    elif string[0] == letter:\n        print(position)\n    else:\n        position += 1\n        index(string[1:], letter)","n_lines":9,"__index_level_0__":406,"repair":""}
{"submission_id":2600,"func_code":"def index(string, letter):\n    position = 0\n    if string == []:\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = 0\n    if string == []:\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        index(string[1:], letter)","n_lines":9,"__index_level_0__":407,"repair":""}
{"submission_id":24412,"func_code":"def index(string, letter):\n    position = 0\n    if string == []:\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = 0\n    if string == []:\n        return '-1'\n    elif string[0] == letter:\n        return position\n    else:\n        position += 1\n        return index(string[1:], letter)","n_lines":9,"__index_level_0__":408,"repair":""}
{"submission_id":9158,"func_code":"def index(str, letter):\n    pos = 0\n    if pos == len(str):\n        return '-1'\n    elif str[pos] == letter:\n        return True\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    pos = 0\n    if pos == len(str):\n        return '-1'\n    elif str[pos] == letter:\n        return True\n    else:\n        return index(str, letter, pos + 1)","n_lines":8,"__index_level_0__":409,"repair":""}
{"submission_id":12230,"func_code":"def index(str, letter):\n    position = 0\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return pos\n    else:\n        return index(str, letter, position + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='pos', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    position = 0\n    if position == len(str):\n        return '-1'\n    elif str[position] == letter:\n        return pos\n    else:\n        return index(str, letter, position + 1)","n_lines":8,"__index_level_0__":410,"repair":""}
{"submission_id":15563,"func_code":"def index(str, letter):\n    pos = 0\n    if pos == len(str):\n        return '-1'\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    pos = 0\n    if pos == len(str):\n        return '-1'\n    elif str[pos] == letter:\n        return pos\n    else:\n        return index(str, letter, pos + 1)","n_lines":8,"__index_level_0__":411,"repair":""}
{"submission_id":37841,"func_code":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return i\n        else:\n            return '-1'","n_lines":7,"__index_level_0__":438,"repair":""}
{"submission_id":39048,"func_code":"def index(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return -1","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def index(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return i\n        i = i + 1\n    return -1","n_lines":7,"__index_level_0__":440,"repair":""}
{"submission_id":1794,"func_code":"def index(string, letter):\n    a = []\n    while i < len(string):\n        a.append(string[i])\n        if string[i] == letter:\n            return i\n    if letter not in a:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    a = []\n    while i < len(string):\n        a.append(string[i])\n        if string[i] == letter:\n            return i\n    if letter not in a:\n        return '-1'","n_lines":8,"__index_level_0__":449,"repair":""}
{"submission_id":35702,"func_code":"def index(string, letter):\n    position = -1\n    i = 0\n    while i < len(string):\n        if string[i] == letter:\n            position = i\n        i = i + 1\n    return position","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(string, letter):\n    position = -1\n    i = 0\n    while i < len(string):\n        if string[i] == letter:\n            position = i\n        i = i + 1\n    return position","n_lines":8,"__index_level_0__":460,"repair":""}
{"submission_id":24029,"func_code":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        print(int(len(str)))\n    else:\n        return index(str[:len(str)], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        print(int(len(str)))\n    else:\n        return index(str[:len(str)], letter)","n_lines":7,"__index_level_0__":462,"repair":""}
{"submission_id":32710,"func_code":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        return int(len(str))\n    else:\n        return index(str[:len(str)], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        return int(len(str))\n    else:\n        return index(str[:len(str)], letter)","n_lines":7,"__index_level_0__":463,"repair":""}
{"submission_id":13801,"func_code":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        return len(str)\n    else:\n        return index(str[:len(str)], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if len(str) == 0:\n        return -1\n    elif str[len(str)] == letter:\n        return len(str)\n    else:\n        return index(str[:len(str)], letter)","n_lines":7,"__index_level_0__":464,"repair":""}
{"submission_id":10013,"func_code":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                return i\n            i = i + 1\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        i = 0\n        while i < len(str):\n            if letter == str[i]:\n                return i\n            i = i + 1\n    else:\n        return '-1'","n_lines":9,"__index_level_0__":468,"repair":""}
{"submission_id":15457,"func_code":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    elif letter not in str:\n        return '-1'\n    else:\n        return index(str[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str:\n        return str.find(letter)\n    elif letter not in str:\n        return '-1'\n    else:\n        return index(str[1:], letter)","n_lines":7,"__index_level_0__":473,"repair":""}
{"submission_id":21198,"func_code":"def index(str, letter):\n    if letter in str[i]:\n        return [i]\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=List(elts=[Name(id='i', ctx=Load())], ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str[i]:\n        return [i]\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":487,"repair":""}
{"submission_id":39324,"func_code":"def index(str, letter):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":488,"repair":""}
{"submission_id":23502,"func_code":"def index(word, letter):\n    if letter not in word:\n        return -1\n    else:\n        i = 0\n        while word[i] != letter:\n            i = i + 1\n        return i","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def index(word, letter):\n    if letter not in word:\n        return -1\n    else:\n        i = 0\n        while word[i] != letter:\n            i = i + 1\n        return i","n_lines":8,"__index_level_0__":495,"repair":""}
{"submission_id":38396,"func_code":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        count = 0\n        while str[count] != letter:\n            count += 1\n    return count","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if letter not in str:\n        return -1\n    else:\n        count = 0\n        while str[count] != letter:\n            count += 1\n    return count","n_lines":8,"__index_level_0__":496,"repair":""}
{"submission_id":42195,"func_code":"def index(str, letter):\n    if str[0] == letter:\n        return 0\n    else:\n        return 1 + index(str[1:], letter)","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def index(str, letter):\n    if str[0] == letter:\n        return 0\n    else:\n        return 1 + index(str[1:], letter)","n_lines":5,"__index_level_0__":505,"repair":""}
{"submission_id":13226,"func_code":"def index(str):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","assignment_id":"index_recur","func_name":"index","description":"Recursively search for the position of letter in str, return -1 if it is not there.","test":"assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","representative":"def index(str):\n    if letter in str[i]:\n        return i\n    else:\n        return '-1'","n_lines":5,"__index_level_0__":507,"repair":""}
{"submission_id":23985,"func_code":"def intersection():\n    c = []\n    while i < len(a):\n        if a[i] in b:\n            c.append(a[i])\n        i = i + 1\n    return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='b', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection():\n    c = []\n    while i < len(a):\n        if a[i] in b:\n            c.append(a[i])\n        i = i + 1\n    return c","n_lines":7,"__index_level_0__":510,"repair":""}
{"submission_id":17947,"func_code":"def intersection(a, b, d):\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b, d):\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","n_lines":7,"__index_level_0__":512,"repair":""}
{"submission_id":42286,"func_code":"def intersection(a, b):\n    d = c - b\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='c', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = c - b\n    return d","n_lines":3,"__index_level_0__":513,"repair":""}
{"submission_id":41723,"func_code":"def intersection(a, b):\n    d = a + b\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = a + b\n    return d","n_lines":3,"__index_level_0__":514,"repair":"def intersection(a, b):\n    \"\"\"Return the intersection between two lists.\"\"\"\n    \n    common = []\n    for i in range(len(a)):\n        if a[i] not in b or b[i] not in common:\n            common.append(a[i])\n    return common"}
{"submission_id":32207,"func_code":"def intersection(a, b):\n    d = a - b\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = a - b\n    return d","n_lines":3,"__index_level_0__":515,"repair":""}
{"submission_id":8598,"func_code":"def intersection(a, b):\n    d = a and b\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"99d129a4-97af-42ac-a543-23b9157331f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = a and b\n    return d","n_lines":3,"__index_level_0__":516,"repair":""}
{"submission_id":30296,"func_code":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if int(a[i]) in b:\n            s.append(a[i])\n        i = i + 1\n    return s","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if int(a[i]) in b:\n            s.append(a[i])\n        i = i + 1\n    return s","n_lines":8,"__index_level_0__":517,"repair":""}
{"submission_id":35883,"func_code":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    n = 0\n    x = []\n    while n < len(s):\n        if s[n] not in s:\n            x.append(s[n])\n        n = n + 1\n    return x","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    n = 0\n    x = []\n    while n < len(s):\n        if s[n] not in s:\n            x.append(s[n])\n        n = n + 1\n    return x","n_lines":14,"__index_level_0__":518,"repair":""}
{"submission_id":41543,"func_code":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    n = 0","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    n = 0","n_lines":8,"__index_level_0__":521,"repair":""}
{"submission_id":15699,"func_code":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    return set(s)","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    return set(s)","n_lines":8,"__index_level_0__":522,"repair":""}
{"submission_id":13397,"func_code":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    return s","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    s = []\n    while i < len(a) and i < len(b):\n        if a[i] in b:\n            s.append(a[i])\n        i = i + 1\n    return s","n_lines":8,"__index_level_0__":524,"repair":""}
{"submission_id":11212,"func_code":"def intersection(a, b):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] in c:\n            d.append(b[p])\n        p = p + 1\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='c', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] in c:\n            d.append(b[p])\n        p = p + 1\n    return d","n_lines":11,"__index_level_0__":525,"repair":""}
{"submission_id":40568,"func_code":"def intersection(a, b):\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","n_lines":7,"__index_level_0__":526,"repair":""}
{"submission_id":20042,"func_code":"def intersection(a, b):\n    int_seen = {}\n    leng = len(a)\n    k = 0\n    while k < leng:\n        if a[k] in b:\n            int_seen[a[k]] = True\n    k = k + 1\n    return int_seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    int_seen = {}\n    leng = len(a)\n    k = 0\n    while k < leng:\n        if a[k] in b:\n            int_seen[a[k]] = True\n    k = k + 1\n    return int_seen","n_lines":9,"__index_level_0__":527,"repair":""}
{"submission_id":40710,"func_code":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < leb(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='leb', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < leb(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","n_lines":8,"__index_level_0__":528,"repair":""}
{"submission_id":23135,"func_code":"def intersection(a, b):\n    set = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in set:\n            set[a[i]] = True\n        i = i + 1\n        return set","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e5f35cd7-8337-4a68-bda3-4164a982feae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    set = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in set:\n            set[a[i]] = True\n        i = i + 1\n        return set","n_lines":8,"__index_level_0__":529,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        set = {}\n    \n        for i,j in zip(a,b):\n            set.setdefault(i,[]).append(j)\n    \n        return list(set.keys())"}
{"submission_id":15848,"func_code":"def intersection(a, b):\n    int = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in int:\n            int[a[i]] = True\n        i = i + 1\n    print(int)","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    int = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in int:\n            int[a[i]] = True\n        i = i + 1\n    print(int)","n_lines":8,"__index_level_0__":530,"repair":""}
{"submission_id":21622,"func_code":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return c","n_lines":8,"__index_level_0__":531,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            if a[i] in b and not a[i] in seen:\n                seen[a[i]] = True\n            i = i + 1\n    \n        return list(seen.keys())"}
{"submission_id":26770,"func_code":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e5f35cd7-8337-4a68-bda3-4164a982feae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","n_lines":8,"__index_level_0__":532,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            if a[i] in b and not a[i] in seen:\n                seen[a[i]] = True\n            i = i + 1\n    \n        return list(seen.keys())"}
{"submission_id":28165,"func_code":"def intersection(a, b):\n    int_seen = {}\n    k = 0\n    while k < len(a):\n        if a[k] in b:\n            int_seen[a[k]] = True\n        k = k + 1\n    return int_seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    int_seen = {}\n    k = 0\n    while k < len(a):\n        if a[k] in b:\n            int_seen[a[k]] = True\n        k = k + 1\n    return int_seen","n_lines":8,"__index_level_0__":533,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        int_seen = {}\n        k = 0\n        while k < len(a):\n            if a[k] in b:\n                int_seen[a[k]] = True\n            k = k + 1\n    \n        return list(int_seen.keys())"}
{"submission_id":14285,"func_code":"def intersection(a, b):\n    int_seen = {}\n    k = 0\n    while k < len(a):\n        if a[k] in b:\n            int_seen[a[k]] = True\n    k = k + 1\n    return int_seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    int_seen = {}\n    k = 0\n    while k < len(a):\n        if a[k] in b:\n            int_seen[a[k]] = True\n    k = k + 1\n    return int_seen","n_lines":8,"__index_level_0__":534,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        int_seen = {}\n    \n        for i in a:\n            if i in int_seen:\n                continue\n            else:\n                int_seen[i] = 1\n        for i in b:\n            if i not in int_seen:\n                continue\n            else:\n                int_seen[i] = 1\n        \n        return list(int_seen.keys())"}
{"submission_id":8056,"func_code":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(b):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    i = 0\n    while i < len(b):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","n_lines":8,"__index_level_0__":535,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(b):\n            if a[i] in b and not a[i] in seen:\n                seen[a[i]] = True\n            i = i + 1\n    \n        return list(seen.keys())"}
{"submission_id":38648,"func_code":"def intersection(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(b):\n        if b[i] in a:\n            seen[b[i]] = True\n        i = i + 1\n    return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(b):\n        if b[i] in a:\n            seen[b[i]] = True\n        i = i + 1\n    return c","n_lines":13,"__index_level_0__":544,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = {}\n        c = []\n        i = 0\n        while i < len(a):\n    \n            if a[i] not in seen:\n                c.append(a[i])\n                seen[a[i]] = True\n            i = i + 1\n        \n        i = 0\n        while i < len(b):\n            if b[i] in a:\n                seen[b[i]] = True\n            i = i + 1\n        return c"}
{"submission_id":39225,"func_code":"def intersection(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(b):\n        if b[i] in seen:\n            c.append(b[i])\n        i = i + 1\n    return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(b):\n        if b[i] in seen:\n            c.append(b[i])\n        i = i + 1\n    return c","n_lines":13,"__index_level_0__":545,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = {}\n        c = []\n        i = 0\n    \n        while i < len(a):\n            if a[i] not in seen:\n                seen[a[i]] = 1\n                c.append(a[i])\n                i = i + 1\n            else:\n                i = i + 1\n        return c"}
{"submission_id":39500,"func_code":"def intersection(a, b):\n    seen = {}","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = {}","n_lines":2,"__index_level_0__":546,"repair":""}
{"submission_id":13711,"func_code":"def intersection(a, b):\n    c = []\n    c = a + b\n    seen = {}\n    i = 0\n    while i < len(c):\n        if lines(c) in seen:\n            sys.stdout.write(lines[c])\n        i = i + 1","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='lines', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    c = []\n    c = a + b\n    seen = {}\n    i = 0\n    while i < len(c):\n        if lines(c) in seen:\n            sys.stdout.write(lines[c])\n        i = i + 1","n_lines":9,"__index_level_0__":547,"repair":"def intersection(a, b):\n    \"\"\"Return the intersection between two lists.\"\"\"\n    seen = {}\n    for i in a:\n        if i in seen:\n            continue\n        seen[i] = 1\n    for j in b:\n        if j not in seen:\n            continue\n        seen[j] = 1\n    return list(seen.keys())"}
{"submission_id":16877,"func_code":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and a[i] not in d:\n            d.append(a[i])\n            i = i + 1\n            return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and a[i] not in d:\n            d.append(a[i])\n            i = i + 1\n            return d","n_lines":8,"__index_level_0__":548,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        d = []\n        i = 0\n    \n        while i < len(a) and i < len(b):\n            if a[i] in b and a[i] not in d:\n                d.append(a[i])\n                i = i + 1\n            else:\n                i = i + 1 \n        return d"}
{"submission_id":373,"func_code":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and a[i] not in d:\n            d.append(a[i])\n            i = i + 1\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and a[i] not in d:\n            d.append(a[i])\n            i = i + 1\n    return d","n_lines":8,"__index_level_0__":549,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        d = []\n        i = 0\n        while i < len(a):\n            if a[i] in b and a[i] not in d:\n                d.append(a[i])\n    \n            i += 1\n        return d"}
{"submission_id":31386,"func_code":"def intersection(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        if a[i] in b and not a[i] in seen:\n            seen[a[i]] = True\n        i = i + 1\n    return seen","n_lines":8,"__index_level_0__":550,"repair":"def intersection(a, b):\n        \"\"\"Return the intersection between two lists.\"\"\"\n        seen = []\n        i = 0\n        while i < len(a):\n    \n            if a[i] not in seen:\n                seen.append(a[i])\n            i = i + 1\n        return seen"}
{"submission_id":32012,"func_code":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    d = []\n    i = 0\n    while i < len(a):\n        if a[i] in b:\n            d.append(a[i])\n        i = i + 1\n    return d","n_lines":8,"__index_level_0__":551,"repair":""}
{"submission_id":41628,"func_code":"def intersection(a, b):\n    c = []\n    for i in a:\n        if i in b and not i in c:\n            c.append(i)\n        return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    c = []\n    for i in a:\n        if i in b and not i in c:\n            c.append(i)\n        return c","n_lines":6,"__index_level_0__":552,"repair":"def intersection(a, b):\n    \"\"\"Return the intersection between two lists.\"\"\"\n    \n    if len(a) != len(b):\n        return None\n    \n    c = []\n    \n    if a:\n        for i in a:\n            if i not in c:\n                c.append(i)\n                \n    return c"}
{"submission_id":20749,"func_code":"def intersection(a, b):\n    c = []\n    for item in a:\n        if item in b:\n            c.append(item)\n    return set(c)","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    c = []\n    for item in a:\n        if item in b:\n            c.append(item)\n    return set(c)","n_lines":6,"__index_level_0__":553,"repair":""}
{"submission_id":41251,"func_code":"def intersection(a, b):\n    c = []\n    while i < len(a):\n        if a[i] in b:\n            c.append(a[i])\n        i = i + 1\n    return c","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    c = []\n    while i < len(a):\n        if a[i] in b:\n            c.append(a[i])\n        i = i + 1\n    return c","n_lines":7,"__index_level_0__":554,"repair":""}
{"submission_id":30679,"func_code":"def intersection(a, b):\n    return a or b","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"99d129a4-97af-42ac-a543-23b9157331f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    return a or b","n_lines":2,"__index_level_0__":555,"repair":""}
{"submission_id":23302,"func_code":"def intersection(a, b):\n    return list(set(a) & set(b))","assignment_id":"intersection","func_name":"intersection","description":"Return the intersection between two lists.","test":"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]","correct":false,"user":"7c4a70b0-f238-44c3-98e9-fba759a5438b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def intersection(a, b):\n    return list(set(a) & set(b))","n_lines":2,"__index_level_0__":556,"repair":""}
{"submission_id":34678,"func_code":"def maximum(l, i=0):\n    j = i\n    while j < len(l) and l[j] > l[-1]:\n        j += 1\n    if j < len(l):\n        tmp = l[i]\n        l[i] = l[j]\n        l[j] = tmp\n    if j > len(l):\n        return l[-1]\n    return minimum(l, i + 1)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l, i=0):\n    j = i\n    while j < len(l) and l[j] > l[-1]:\n        j += 1\n    if j < len(l):\n        tmp = l[i]\n        l[i] = l[j]\n        l[j] = tmp\n    if j > len(l):\n        return l[-1]\n    return minimum(l, i + 1)","n_lines":11,"__index_level_0__":557,"repair":"def maximum(l, i=0):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    return l[i] if i else max(l)"}
{"submission_id":30206,"func_code":"def maximum(n=[]):\n    return max(maximum(n))","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(n=[]):\n    return max(maximum(n))","n_lines":2,"__index_level_0__":558,"repair":"def maximum(n=[]):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    maximum = max(n)\n    return maximum"}
{"submission_id":23641,"func_code":"def maximum(l):\n    l = sorted(l)\n    if l[len(l) - 1] > l[len(l) - 2]:\n        return l[len(l) - 1]\n    return maximum(l)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    l = sorted(l)\n    if l[len(l) - 1] > l[len(l) - 2]:\n        return l[len(l) - 1]\n    return maximum(l)","n_lines":5,"__index_level_0__":559,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        l = sorted(l)\n    \n        if len(l) == 0:\n            return 0\n        else:\n            return l[len(l)-1]"}
{"submission_id":14087,"func_code":"def maximum(l):\n    l = sorted(l)\n    if l[len(l) - 1] > l[len(l) - 2]:\n        return l[0]\n    return maximum(l)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    l = sorted(l)\n    if l[len(l) - 1] > l[len(l) - 2]:\n        return l[0]\n    return maximum(l)","n_lines":5,"__index_level_0__":560,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        l = sorted(l)\n    \n        if len(l)==0:\n            return 0\n        \n        return l[-1]"}
{"submission_id":34381,"func_code":"def maximum(l):\n    m = 0\n    for line in l:\n        if line > m:\n            m = line\n    return m","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    m = 0\n    for line in l:\n        if line > m:\n            m = line\n    return m","n_lines":6,"__index_level_0__":561,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[-1]"}
{"submission_id":29175,"func_code":"def maximum(l):\n    max = 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l).pop(l[1])\n    else:\n        return maximum(l).pop(l[0])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    max = 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l).pop(l[1])\n    else:\n        return maximum(l).pop(l[0])","n_lines":8,"__index_level_0__":562,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        max = 0\n        if len(l) == 1:\n            return l[0]\n        elif l[0] > l[1]:\n    \n            max = l[0]\n            for num in l[1:]:\n                if num > max:\n                    max = num\n            return max\n        else:\n            return maximum(l).pop(l[0])"}
{"submission_id":37410,"func_code":"def maximum(l):\n    max = 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum.pop(l[1])\n    else:\n        return maximum.pop(l[0])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='maximum', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='maximum', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    max = 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum.pop(l[1])\n    else:\n        return maximum.pop(l[0])","n_lines":8,"__index_level_0__":563,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    l.sort()\n    return l[-1]"}
{"submission_id":10017,"func_code":"def maximum(l):\n    sorted(l)\n    return l(len(l) - 1)\n    return maximum(l)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    sorted(l)\n    return l(len(l) - 1)\n    return maximum(l)","n_lines":4,"__index_level_0__":564,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l = list(l)\n    return max(l)"}
{"submission_id":16689,"func_code":"def maximum(l):\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l.pop(l[1]))\n    else:\n        return maximum(l.pop(l[0]))","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l.pop(l[1]))\n    else:\n        return maximum(l.pop(l[0]))","n_lines":9,"__index_level_0__":565,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(l) == 0:\n            return 0\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) > 1:\n            return max(l)\n        else:\n            return maximum(l.pop(l[0]))"}
{"submission_id":38995,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return list(a[0])\n    return maximum(a.remove(min(a)))","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return list(a[0])\n    return maximum(a.remove(min(a)))","n_lines":4,"__index_level_0__":566,"repair":"def maximum(a):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    maximum = max(a)\n    return maximum"}
{"submission_id":14611,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        l = maximum(a[1:])\n    if a[0] < l:\n        return a[0]\n    else:\n        return l","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        l = maximum(a[1:])\n    if a[0] < l:\n        return a[0]\n    else:\n        return l","n_lines":9,"__index_level_0__":567,"repair":"def maximum(a):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l = max(a)\n    return l"}
{"submission_id":24086,"func_code":"def maximum(n):\n    if len(n) == 1:\n        return n[0]\n    else:\n        min_ret = minimum(n[1:])\n        return n[0] if n[0] > min_ret else min_ret","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(n):\n    if len(n) == 1:\n        return n[0]\n    else:\n        min_ret = minimum(n[1:])\n        return n[0] if n[0] > min_ret else min_ret","n_lines":6,"__index_level_0__":568,"repair":"def maximum(n):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(n) == 1:\n            return n[0]\n    \n        maximum = max(n)\n        return maximum"}
{"submission_id":2095,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        m1 = minimum(l[:len(l) \/\/ 2])\n        m2 = minimum(l[len(l) \/\/ 2:])\n        if m1 > m2:\n            return m1\n        else:\n            return m2","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        m1 = minimum(l[:len(l) \/\/ 2])\n        m2 = minimum(l[len(l) \/\/ 2:])\n        if m1 > m2:\n            return m1\n        else:\n            return m2","n_lines":10,"__index_level_0__":569,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) == 0:\n            return 0\n        \n        m = l[0]\n        for e in l:\n            if e > m:\n                m = e\n        return m"}
{"submission_id":24348,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        large = a[0]\n        if a[i] > a[0]:\n            a.remove(a[0])\n        else:\n            a.remove(a[1])\n    return maximum(a)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"0d8d49aa-e213-4ab4-bcc1-440a0397585c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        large = a[0]\n        if a[i] > a[0]:\n            a.remove(a[0])\n        else:\n            a.remove(a[1])\n    return maximum(a)","n_lines":10,"__index_level_0__":570,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n        else:\n            large = a[0]\n    \n            for i in a[1:]:\n                if i > large:\n                    large = i\n            return large"}
{"submission_id":14655,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l).pop(l[1])\n    else:\n        return maximum(l).pop(l[0])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l).pop(l[1])\n    else:\n        return maximum(l).pop(l[0])","n_lines":7,"__index_level_0__":571,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) > 1:\n            return max(l)\n        else:\n            return maximum(l).pop(l[0])"}
{"submission_id":21903,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l.pop(l[1]))\n    else:\n        return maximum(l.pop(l[0]))","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    elif l[0] > l[1]:\n        return maximum(l.pop(l[1]))\n    else:\n        return maximum(l.pop(l[0]))","n_lines":7,"__index_level_0__":572,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) == 0:\n            return -1\n        \n        return max(l)"}
{"submission_id":7722,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    biggest = minimum(a[1:])\n    if a[0] > biggest:\n        return a[0]\n    else:\n        return biggest","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"f4380e0a-3bfd-44c6-b455-fe1018a45321","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    biggest = minimum(a[1:])\n    if a[0] > biggest:\n        return a[0]\n    else:\n        return biggest","n_lines":8,"__index_level_0__":573,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        if len(a)==0:\n            return a[0]\n        biggest = max(a)\n        if biggest < a[0]:\n            return a[0]\n        else:\n            return biggest"}
{"submission_id":37461,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] < l[i + 1]:\n        i += 1\n        l = l[i:]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"57b690d2-56f4-4fcf-abf7-8719f8802aae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] < l[i + 1]:\n        i += 1\n        l = l[i:]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","n_lines":10,"__index_level_0__":574,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    ans = l[0]\n    for i in l:\n        if ans < i:\n            ans = i\n    return ans"}
{"submission_id":19956,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    head = a[0]\n    tail = a[1:]\n    mintail = minimum(tail)\n    if head < mintail:\n        smallest = mintail\n    else:\n        smallest = head\n    return smallest","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    head = a[0]\n    tail = a[1:]\n    mintail = minimum(tail)\n    if head < mintail:\n        smallest = mintail\n    else:\n        smallest = head\n    return smallest","n_lines":11,"__index_level_0__":575,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n        head = a[0]\n        tail = a[1:]\n    \n        mintail = max(tail)\n        \n        if head < mintail:\n            smallest = mintail\n        else:\n            smallest = head\n        return smallest"}
{"submission_id":11876,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    f, m = l[0], maximum(l)\n    if f > m:\n        return f\n    else:\n        return m","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    f, m = l[0], maximum(l)\n    if f > m:\n        return f\n    else:\n        return m","n_lines":8,"__index_level_0__":576,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l = sorted(l)\n    if l:\n        return l[-1]\n    else:\n        return 0"}
{"submission_id":41531,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > maximun(a[1:]):\n        return a[0]\n    else:\n        return maximum(a[1:])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='maximun', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > maximun(a[1:]):\n        return a[0]\n    else:\n        return maximum(a[1:])","n_lines":7,"__index_level_0__":577,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        if len(a)>1:\n            return max(a)\n        else:\n            return maximum(a[1:])"}
{"submission_id":944,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > minimum(a[1:]):\n        return a[0]\n    else:\n        return minimum(a[1:])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > minimum(a[1:]):\n        return a[0]\n    else:\n        return minimum(a[1:])","n_lines":7,"__index_level_0__":578,"repair":"def maximum(a):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(a)==0:\n        return 0\n\n    elif len(a)==1:\n        return a[0]\n    else:\n        return max(a[0],maximum(a[1:]))"}
{"submission_id":28816,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > a[1]:\n        a.append(a[0])\n    return minimum(a[1:])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > a[1]:\n        a.append(a[0])\n    return minimum(a[1:])","n_lines":6,"__index_level_0__":579,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        if len(a) == 0:\n            return 0\n    \n        return max(a)"}
{"submission_id":35526,"func_code":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] >= maximum(l[1:]):\n        return l[0]\n    else:\n        return maximum(l[n + 1:])","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"198db91d-9bcb-463c-838e-d8957f078a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] >= maximum(l[1:]):\n        return l[0]\n    else:\n        return maximum(l[n + 1:])","n_lines":7,"__index_level_0__":580,"repair":"def maximum(l):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        n = 0\n        for i in range(len(l)):\n            if l[i] > l[n]:\n                n = i\n        return l[n]"}
{"submission_id":12634,"func_code":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    return maximum(a.remove(min(a)))","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def maximum(a):\n    if len(a) == 1:\n        return a[0]\n    return maximum(a.remove(min(a)))","n_lines":4,"__index_level_0__":581,"repair":"def maximum(a):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        return max(max(a), max(a))"}
{"submission_id":41243,"func_code":"def maximum(l):\n    return sorted(l)[len() - 1]","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    return sorted(l)[len() - 1]","n_lines":2,"__index_level_0__":582,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[-1]"}
{"submission_id":23462,"func_code":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = []\n    l3 = l1 + l2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = []\n    l3 = l1 + l2\n    return l3","n_lines":5,"__index_level_0__":583,"repair":""}
{"submission_id":20407,"func_code":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = []\n    l4 = l1[::2]\n    l5 = l2[::2]\n    l3 = l1 + l2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = []\n    l4 = l1[::2]\n    l5 = l2[::2]\n    l3 = l1 + l2\n    return l3","n_lines":7,"__index_level_0__":584,"repair":""}
{"submission_id":22132,"func_code":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = l1[::2]\n    return l2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l1 = []\n    l2 = l1[::2]\n    return l2","n_lines":4,"__index_level_0__":585,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    res=[]\n    i=0\n    for elem in l1:\n        if i%2==0:\n            res.append(elem)\n        i+=1\n    for elem in l2:\n        if i%2==0:\n            res.append(elem)\n        i+=1\n    return res"}
{"submission_id":22208,"func_code":"def merge_lists(l1, l2):\n    l1 = []\n    l3 = l1[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l1 = []\n    l3 = l1[::2]\n    return l3","n_lines":4,"__index_level_0__":586,"repair":""}
{"submission_id":21982,"func_code":"def merge_lists(l1, l2):\n    l3 = l1 + l2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"0f1cbd69-016d-4739-b232-fed37e5676ad","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1 + l2\n    return l3","n_lines":3,"__index_level_0__":587,"repair":""}
{"submission_id":41542,"func_code":"def merge_lists(l1, l2):\n    l3 = l1 + l2\n    return l3[2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=2), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1 + l2\n    return l3[2]","n_lines":3,"__index_level_0__":588,"repair":""}
{"submission_id":14244,"func_code":"def merge_lists(l1, l2):\n    l3 = l1 + l2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1 + l2","n_lines":2,"__index_level_0__":589,"repair":""}
{"submission_id":11587,"func_code":"def merge_lists(l1, l2):\n    l3 = l1 + l2[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1 + l2[::2]\n    return l3","n_lines":3,"__index_level_0__":590,"repair":""}
{"submission_id":721,"func_code":"def merge_lists(l1, l2):\n    l3 = l1[0:2] + l2[0:2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1[0:2] + l2[0:2]\n    return l3","n_lines":3,"__index_level_0__":591,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    res=l1+l2\n    return res[::2]"}
{"submission_id":41654,"func_code":"def merge_lists(l1, l2):\n    l3 = l1[0:2] + l2[0:2]\n    return l3[0:2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1[0:2] + l2[0:2]\n    return l3[0:2]","n_lines":3,"__index_level_0__":592,"repair":""}
{"submission_id":24524,"func_code":"def merge_lists(l1, l2):\n    l3 = l1[::2] + l2[::2]\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1[::2] + l2[::2]\n    return l3[::2]","n_lines":3,"__index_level_0__":593,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = l1[::2] + l2[::2]\n    \n        return l3"}
{"submission_id":9939,"func_code":"def merge_lists(l1, l2):\n    l3 = l2[::2] + l1[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l2[::2] + l1[::2]\n    return l3","n_lines":3,"__index_level_0__":594,"repair":""}
{"submission_id":4672,"func_code":"def merge_lists(l1, l2):\n    l3 = [].split(',')\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=List(elts=[], ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = [].split(',')\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","n_lines":11,"__index_level_0__":595,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    \n    if len(l1) < len(l2):\n        l1, l2 = l2, l1\n    \n    if len(l1) > len(l2):\n        l1, l2 = l1, l2\n    \n    l3 = []\n    \n    if len(l1) < len(l2):\n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 1\n    else:\n        i = 0\n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 1\n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 1\n        return l3[::2]"}
{"submission_id":23034,"func_code":"def merge_lists(l1, l2):\n    l3 = l1.append(l2)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = l1.append(l2)","n_lines":2,"__index_level_0__":596,"repair":""}
{"submission_id":29558,"func_code":"def merge_lists(l1, l2):\n    l3 = list(set(l1 + l2))\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"29ee2b4b-4fb7-46c9-986d-b715bcee0fbe","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = list(set(l1 + l2))\n    return l3","n_lines":3,"__index_level_0__":597,"repair":""}
{"submission_id":10470,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l1[i] + 1 + (l2[i] + 1)\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), op=Add(), right=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l1[i] + 1 + (l2[i] + 1)\n    return l3","n_lines":4,"__index_level_0__":598,"repair":""}
{"submission_id":39423,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l1[i + 1] + l2[i + 1]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l1[i + 1] + l2[i + 1]\n    return l3","n_lines":4,"__index_level_0__":599,"repair":""}
{"submission_id":15361,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l2[::2] + l1[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = l2[::2] + l1[::2]\n    return l3","n_lines":4,"__index_level_0__":600,"repair":""}
{"submission_id":37224,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[i] in l2:\n            l3.append(l2[i])\n            i = i + 2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[i] in l2:\n            l3.append(l2[i])\n            i = i + 2\n    return l3","n_lines":12,"__index_level_0__":601,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        j = 0\n        l3 = []\n        while i < len(l1) and j < len(l2):\n            if l1[i] in l1:\n                l3.append(l1[i])\n                i = i + 2\n            elif l2[i] in l2:\n                l3.append(l2[i])\n                i = i + 2\n    \n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 2\n    \n        while j < len(l2):\n            l3.append(l2[j])\n            j = j + 2\n        return l3"}
{"submission_id":30929,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[j] in l2:\n            l3.append(l2[j])\n            j = j + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[j] in l2:\n            l3.append(l2[j])\n            j = j + 1\n    return l3","n_lines":12,"__index_level_0__":602,"repair":""}
{"submission_id":30403,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[j] in l2:\n            l3.append(l2[j])\n            j = j + 2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[j] in l2:\n            l3.append(l2[j])\n            j = j + 2\n    return l3","n_lines":12,"__index_level_0__":603,"repair":""}
{"submission_id":42466,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1) or i < len(l2):\n        l3.append(l1[k])\n        l3.append(l2[k])\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1) or i < len(l2):\n        l3.append(l1[k])\n        l3.append(l2[k])\n        k = k + 2","n_lines":8,"__index_level_0__":604,"repair":""}
{"submission_id":27521,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        i = i + 1\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        i = i + 1\n        k = k + 2","n_lines":8,"__index_level_0__":605,"repair":""}
{"submission_id":26784,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        k = k + 2\n    i = 0\n    k = 0\n    while i < len(l2):\n        l3.append(l2[k])\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        k = k + 2\n    i = 0\n    k = 0\n    while i < len(l2):\n        l3.append(l2[k])\n        k = k + 2","n_lines":12,"__index_level_0__":606,"repair":""}
{"submission_id":14678,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        k = k + 2","n_lines":7,"__index_level_0__":607,"repair":""}
{"submission_id":17212,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2","n_lines":9,"__index_level_0__":608,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        k = 0\n        l3 = []\n    \n        while i < len(l1):\n            if i%2==0:\n                l3.append(l1[i])\n            i+=1\n    \n        while k < len(l2):\n            if k%2==0:\n                l3.append(l2[k])\n            k+=1\n    \n        return l3"}
{"submission_id":38205,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        k = k + 2","n_lines":8,"__index_level_0__":609,"repair":""}
{"submission_id":281,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        if len(l1) > 2:\n            k = k + 2\n    i = 0\n    k = 0\n    while i < len(l2):\n        l3.append(l2[k])\n        if len(l2) > 2:\n            k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[k])\n        if len(l1) > 2:\n            k = k + 2\n    i = 0\n    k = 0\n    while i < len(l2):\n        l3.append(l2[k])\n        if len(l2) > 2:\n            k = k + 2","n_lines":14,"__index_level_0__":610,"repair":""}
{"submission_id":12943,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while k < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while k < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2\n    return l3","n_lines":10,"__index_level_0__":611,"repair":""}
{"submission_id":25748,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while k < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    k = 0\n    l3 = []\n    while k < len(l1):\n        l3.append(l1[k])\n        print(i, k)\n        i = i + 1\n        k = k + 2","n_lines":9,"__index_level_0__":612,"repair":""}
{"submission_id":3954,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2\n    print(l3)","n_lines":8,"__index_level_0__":613,"repair":""}
{"submission_id":16826,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2","n_lines":7,"__index_level_0__":614,"repair":""}
{"submission_id":38329,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])","n_lines":6,"__index_level_0__":615,"repair":""}
{"submission_id":42260,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1, l2[i])\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1, l2[i])\n        i = i + 2\n    print(l3)","n_lines":7,"__index_level_0__":616,"repair":""}
{"submission_id":27654,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i], l2[i])\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i], l2[i])\n        i = i + 2\n    print(l3)","n_lines":7,"__index_level_0__":617,"repair":""}
{"submission_id":25262,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    mergedlist = []\n    while i < len(l1):\n        mergedlist.append(l1[i])\n        i = i + 2\n    j = 0\n    while i < len(l2):\n        mergedlist.append(l2[j])\n        j = j + 2\n    return mergedlist","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    mergedlist = []\n    while i < len(l1):\n        mergedlist.append(l1[i])\n        i = i + 2\n    j = 0\n    while i < len(l2):\n        mergedlist.append(l2[j])\n        j = j + 2\n    return mergedlist","n_lines":11,"__index_level_0__":618,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        mergedlist = []\n    \n        while i < len(l1):\n            mergedlist.append(l1[i])\n            i = i + 2\n        \n        i = 0\n        while i < len(l2):\n            mergedlist.append(l2[i])\n            i = i + 2\n        return mergedlist"}
{"submission_id":7931,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    print(l3)","n_lines":7,"__index_level_0__":619,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        l3 = []\n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 2\n    \n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 2\n        return l3"}
{"submission_id":31750,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[i])\n        j += 2\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"0ea9000e-74e5-4eea-8653-1bfeeae4aab1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[i])\n        j += 2\n        return l3","n_lines":11,"__index_level_0__":620,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        l3 = []\n        while i < len(l1):\n            l3.append(l1[i])\n            i += 2\n        j = 0\n    \n        while j < len(l2):\n            l3.append(l2[j])\n            j += 2\n        return l3"}
{"submission_id":8741,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[i])\n        j += 2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[i])\n        j += 2\n    return l3","n_lines":11,"__index_level_0__":621,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        l3 = []\n        while i < len(l1):\n            l3.append(l1[i])\n            i += 2\n        j = 0\n        while j < len(l2):\n    \n            l3.append(l2[j])\n            j += 2\n        return l3"}
{"submission_id":29307,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j += 2\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i += 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j += 2\n        return l3","n_lines":11,"__index_level_0__":622,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        l3 = []\n        while i < len(l1):\n            l3.append(l1[i])\n            i += 2\n        j = 0\n    \n        while j < len(l2):\n            l3.append(l2[j])\n            j += 2\n        return l3"}
{"submission_id":15282,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        l3.append(l2[iS])\n        i = i + 2\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='iS', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        l3.append(l2[iS])\n        i = i + 2\n    return l3","n_lines":8,"__index_level_0__":623,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n    \n        l3 = [l1[i] for i in range(0, len(l1), 2)]\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 2\n        return l3"}
{"submission_id":3202,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append[l1, l2]\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), slice=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append[l1, l2]\n        i = i + 2\n    print(l3)","n_lines":7,"__index_level_0__":624,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    ans = l1 + l2\n    return ans[::2]"}
{"submission_id":1267,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append[l1[i], l2[i]]\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append[l1[i], l2[i]]\n        i = i + 2\n    print(l3)","n_lines":7,"__index_level_0__":625,"repair":""}
{"submission_id":15985,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[i] in l2:\n            l3.append(l2[i])\n            i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        if l1[i] in l1:\n            l3.append(l1[i])\n            i = i + 2\n        elif l2[i] in l2:\n            l3.append(l2[i])\n            i = i + 2\n    print(l3)","n_lines":11,"__index_level_0__":626,"repair":""}
{"submission_id":38493,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        if l1[i] in l1:\n            l3.append(l1[i])\n        i = i + 2\n    print(l3)","n_lines":8,"__index_level_0__":627,"repair":""}
{"submission_id":2087,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1.append[i]\n    i = i + 2\n    j = 0\n    merging2 = l2.append[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1.append[i]\n    i = i + 2\n    j = 0\n    merging2 = l2.append[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","n_lines":9,"__index_level_0__":628,"repair":""}
{"submission_id":38465,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return merging1","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return merging1","n_lines":9,"__index_level_0__":629,"repair":""}
{"submission_id":31757,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[i]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","n_lines":9,"__index_level_0__":630,"repair":""}
{"submission_id":39856,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[j]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    merging1 = l1[i]\n    i = i + 2\n    j = 0\n    merging2 = l2[j]\n    j = j + 2\n    mergedlist = merging1 + merging2\n    return mergedlist","n_lines":9,"__index_level_0__":631,"repair":""}
{"submission_id":20433,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1) and i < len(l2):\n        l3 = l1[i] + l2[i]\n        i += 2\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1) and i < len(l2):\n        l3 = l1[i] + l2[i]\n        i += 2\n        return l3","n_lines":6,"__index_level_0__":632,"repair":""}
{"submission_id":29004,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = str(l1_1) + str(l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = str(l1_1) + str(l2_1)\n        return l3","n_lines":11,"__index_level_0__":633,"repair":""}
{"submission_id":22549,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1) and l3.append(l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1) and l3.append(l2_1)\n        return l3","n_lines":12,"__index_level_0__":634,"repair":""}
{"submission_id":26286,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1, l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1, l2_1)\n        return l3","n_lines":12,"__index_level_0__":635,"repair":""}
{"submission_id":34214,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":12,"__index_level_0__":636,"repair":""}
{"submission_id":3699,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), l3.append(6), l3.append(l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=6)], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), l3.append(6), l3.append(l2_1)\n        return l3","n_lines":12,"__index_level_0__":637,"repair":""}
{"submission_id":39607,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), l3.append(l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), l3.append(l2_1)\n        return l3","n_lines":12,"__index_level_0__":638,"repair":""}
{"submission_id":7260,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), '6', l3.append(l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Constant(value='6'), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1), '6', l3.append(l2_1)\n        return l3","n_lines":12,"__index_level_0__":639,"repair":""}
{"submission_id":5705,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3.append(l1_1, l2_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='l3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3.append(l1_1, l2_1)\n        return l3","n_lines":11,"__index_level_0__":640,"repair":""}
{"submission_id":37291,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='l3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n        return l3","n_lines":10,"__index_level_0__":641,"repair":""}
{"submission_id":3553,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 1\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 1\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":13,"__index_level_0__":642,"repair":""}
{"submission_id":6096,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":13,"__index_level_0__":643,"repair":""}
{"submission_id":33827,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n    i = i + 2\n    j = 0\n    while j < len(l2):\n        l4.append(l2[j])\n    j = j + 2\n    print(l3 + l4)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='l4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='l3', ctx=Load()), op=Add(), right=Name(id='l4', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n    i = i + 2\n    j = 0\n    while j < len(l2):\n        l4.append(l2[j])\n    j = j + 2\n    print(l3 + l4)","n_lines":10,"__index_level_0__":644,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    while j < len(l2):\n        l3.append(l2[j])\n        j = j + 2\n    return l3"}
{"submission_id":26051,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1.append(l1[i])\n    i = i + 2\n    j = 0\n    while j < len(l2):\n        l2.append(l2[j])\n    j = j + 2\n    print(l1 + l2)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i < len(l1):\n        l1.append(l1[i])\n    i = i + 2\n    j = 0\n    while j < len(l2):\n        l2.append(l2[j])\n    j = j + 2\n    print(l1 + l2)","n_lines":10,"__index_level_0__":645,"repair":""}
{"submission_id":28644,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 1 and i != 0:\n            n.remove(n[i])\n        i = i + 1\n    return n","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 1 and i != 0:\n            n.remove(n[i])\n        i = i + 1\n    return n","n_lines":11,"__index_level_0__":646,"repair":""}
{"submission_id":18037,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n\n    return m","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n\n    return m","n_lines":12,"__index_level_0__":647,"repair":""}
{"submission_id":4737,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n","n_lines":11,"__index_level_0__":648,"repair":""}
{"submission_id":15182,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return m","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return m","n_lines":11,"__index_level_0__":649,"repair":""}
{"submission_id":20689,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        m.remove(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n\n    return m","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        m.remove(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return n\n    return m","n_lines":13,"__index_level_0__":650,"repair":""}
{"submission_id":3259,"func_code":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        m.remove(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return m","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(n, m):\n    i = 0\n    while i < len(m):\n        n.append(m[i])\n        m.remove(m[i])\n        i = i + 1\n    i = 0\n    while i < len(n):\n        if i % 2 == 0 or i == 0:\n            m.append(n[i])\n        i = i + 1\n    return m","n_lines":12,"__index_level_0__":651,"repair":"def merge_lists(n, m):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        i = 0\n        while i < len(m):\n            n.append(m[i])\n            m.remove(m[i])\n    \n        m = []\n        i = 0\n        while i < len(n):\n            if i % 2 == 0 or i == 0:\n                m.append(n[i])\n            i = i + 1\n        return m"}
{"submission_id":3356,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[i]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":13,"__index_level_0__":652,"repair":""}
{"submission_id":41783,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":13,"__index_level_0__":653,"repair":""}
{"submission_id":20968,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:2]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:2]\n        print(l1_1)\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":13,"__index_level_0__":654,"repair":""}
{"submission_id":11438,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:3]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=3)), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0:3]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":12,"__index_level_0__":655,"repair":""}
{"submission_id":27622,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0, 3]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=3)], ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0, 3]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":12,"__index_level_0__":656,"repair":""}
{"submission_id":20134,"func_code":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0], l1[2]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 0\n    while i <= len(l1):\n        l1_1 = l1[0], l1[2]\n        i += 2\n        j = 0\n        while j < len(l2):\n            l2_1 = l2[j]\n            j += 2\n            l3 = []\n            l3.append(l1_1)\n        return l3","n_lines":12,"__index_level_0__":657,"repair":""}
{"submission_id":34230,"func_code":"def merge_lists(l1, l2):\n    i = 1\n    while i < len(l1):\n        del l1[i]\n    i = i + 1\n    i = 1\n    while i < len(l2):\n        del l2[i]\n    i = i + 1\n    print(l1 + l2)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 1\n    while i < len(l1):\n        del l1[i]\n    i = i + 1\n    i = 1\n    while i < len(l2):\n        del l2[i]\n    i = i + 1\n    print(l1 + l2)","n_lines":10,"__index_level_0__":658,"repair":""}
{"submission_id":13420,"func_code":"def merge_lists(l1, l2):\n    i = 1\n    while i < len(l1):\n        del l1[i]\n    i = i + 1\n    j = 1\n    while i < len(l2):\n        del l2[j]\n    j = j + 1\n    return l1 + l2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    i = 1\n    while i < len(l1):\n        del l1[i]\n    i = i + 1\n    j = 1\n    while i < len(l2):\n        del l2[j]\n    j = j + 1\n    return l1 + l2","n_lines":10,"__index_level_0__":659,"repair":""}
{"submission_id":33764,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    my_list = l3.split(',')\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return my_list","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    my_list = l3.split(',')\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return my_list","n_lines":12,"__index_level_0__":660,"repair":"def merge_lists(l1, l2):\n    \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n    \n    # use list slicing to return every other element of l1 followed by every other element of l2\n    return l1[::2] + l2[::2]"}
{"submission_id":18220,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3 = l3.split(',')\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3 = l3.split(',')\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","n_lines":12,"__index_level_0__":661,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n    \n            l3.append(l1[i])\n            i = i + 1\n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 1\n        return l3[::2]"}
{"submission_id":33381,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].split(',')","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].split(',')","n_lines":11,"__index_level_0__":662,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n    \n        while i < len(l1):\n            if i % 2 == 0:\n                l3.append(l1[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(l2):\n            if i % 2 == 0:\n                l3.append(l2[i])\n            i = i + 1\n    \n        return l3"}
{"submission_id":9419,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split(',')\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split(',')\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2]","n_lines":11,"__index_level_0__":663,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n    \n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 1\n        return l3[::2]"}
{"submission_id":11690,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split()\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split()\n        i = i + 1\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i]).split()\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split()\n        i = i + 1\n    return l3[::2]","n_lines":11,"__index_level_0__":664,"repair":""}
{"submission_id":35639,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i][::2]).split(',')\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i][::2]).split(',')\n        i = i + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i][::2]).split(',')\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i][::2]).split(',')\n        i = i + 1\n    return l3","n_lines":11,"__index_level_0__":665,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n    \n        while i < len(l1):\n            if i % 2 == 0:\n                l3.append(l1[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(l2):\n            if i % 2 == 0:\n                l3.append(l2[i])\n            i = i + 1\n    \n        return l3"}
{"submission_id":5938,"func_code":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merge_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merge_list.append(l2[i])\n        i += 2\n    print(merge_list)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='merge_list', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merge_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merge_list.append(l2[i])\n        i += 2\n    print(merge_list)","n_lines":11,"__index_level_0__":666,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        merged_list = []\n        i = 0\n    \n        while i < len(l1):\n            merged_list.append(l1[i])\n            i += 2\n    \n        i = 0\n        while i < len(l2):\n            merged_list.append(l2[i])\n            i += 2\n    \n        return merged_list"}
{"submission_id":17128,"func_code":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merge_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merge_list.append(l2[i])\n        i += 2\n    return merge_list","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='merge_list', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merge_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merge_list.append(l2[i])\n        i += 2\n    return merge_list","n_lines":11,"__index_level_0__":667,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        merged_list = []\n        i = 0\n        while i < len(l1):\n    \n            if i % 2 == 0:\n                merged_list.append(l1[i])\n            i += 1\n        i = 0\n        while i < len(l2):\n            merged_list.append(l2[i])\n            i += 2\n        return merged_list"}
{"submission_id":6418,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[2])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[2])\n        i = i + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[2])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[2])\n        i = i + 1\n    return l3","n_lines":11,"__index_level_0__":668,"repair":""}
{"submission_id":9260,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split\n        i = i + 1\n    return l3[::2].split(',')","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split\n        i = i + 1\n    return l3[::2].split(',')","n_lines":11,"__index_level_0__":669,"repair":""}
{"submission_id":35819,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split(',')\n        i = i + 1\n    return l3[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i]).split(',')\n        i = i + 1\n    return l3[::2]","n_lines":11,"__index_level_0__":670,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 1\n        i = 0\n        while i < len(l2):\n    \n            l3.append(l2[i])\n            i = i + 1\n        return l3[::2]"}
{"submission_id":15570,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].rstrip()","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].rstrip()","n_lines":11,"__index_level_0__":671,"repair":""}
{"submission_id":36813,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].split(',')","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3[::2].split(',')","n_lines":11,"__index_level_0__":672,"repair":""}
{"submission_id":35141,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])\n        i = i + 1\n    return l3","n_lines":11,"__index_level_0__":673,"repair":""}
{"submission_id":4861,"func_code":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    print(merged_list)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    print(merged_list)","n_lines":11,"__index_level_0__":674,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        merged_list = []\n        i = 0\n        while i < len(l1):\n            merged_list.append(l1[i])\n            i = i + 2\n        i = 0\n        while i < len(l2):\n            merged_list.append(l2[i])\n            i += 2\n    \n        return merged_list"}
{"submission_id":22216,"func_code":"def merge_lists(l1, l2):\n    a = []\n    i = 0\n    while i < len(l1):\n        a.append(l1[i])\n        i = i + 2\n    j = 0\n    while i < len(l2):\n        a.append(l2[i])\n        j = j + 2\n    return a","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    a = []\n    i = 0\n    while i < len(l1):\n        a.append(l1[i])\n        i = i + 2\n    j = 0\n    while i < len(l2):\n        a.append(l2[i])\n        j = j + 2\n    return a","n_lines":11,"__index_level_0__":675,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        a = []\n        i = 0\n        while i < len(l1):\n            a.append(l1[i])\n            i = i + 2\n        j = 0\n    \n        while j < len(l2):\n            a.append(l2[j])\n            j = j + 2\n        return a"}
{"submission_id":15649,"func_code":"def merge_lists(l1, l2):\n    a = []\n    i = 0\n    while i < len(l1):\n        a.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        a.append(l2[i])\n        j = j + 2\n    return a","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    a = []\n    i = 0\n    while i < len(l1):\n        a.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        a.append(l2[i])\n        j = j + 2\n    return a","n_lines":11,"__index_level_0__":676,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        a = []\n        i = 0\n        while i < len(l1):\n            a.append(l1[i])\n            i = i + 2\n        j = 0\n        while j < len(l2):\n    \n            a.append(l2[j])\n            j = j + 2\n        return a"}
{"submission_id":15126,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j = j + 2\n    return l4","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='l4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j = j + 2\n    return l4","n_lines":11,"__index_level_0__":677,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n    \n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 2\n        j = 0\n        while j < len(l2):\n            l3.append(l2[j])\n            j = j + 2\n        return l3"}
{"submission_id":6091,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j = j + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])\n        i = i + 2\n    j = 0\n    while j < len(l2):\n        l3.append(l2[j])\n        j = j + 2","n_lines":10,"__index_level_0__":678,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n            l3.append(l1[i])\n            i = i + 2\n    \n        i = 0\n        while i < len(l2):\n            l3.append(l2[i])\n            i = i + 2\n    \n        return l3\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        while j < len(l2):\n            l3.append(l2[j])\n            j = j + 2"}
{"submission_id":17428,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])[2]\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])[2]\n        i = i + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])[2]\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])[2]\n        i = i + 1\n    return l3","n_lines":11,"__index_level_0__":679,"repair":""}
{"submission_id":33456,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])[::2]\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])[::2]\n        i = i + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        l3.append(l1[i])[::2]\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        l3.append(l2[i])[::2]\n        i = i + 1\n    return l3","n_lines":11,"__index_level_0__":680,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n    \n        for elem in l1:\n            if i % 2 == 0:\n                l3.append(elem)\n            i += 1\n        for elem in l2:\n            if i % 2 == 0:\n                l3.append(elem)\n            i += 1\n        return l3"}
{"submission_id":17496,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 0:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 0:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","n_lines":13,"__index_level_0__":681,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n            if i % 2 == 0:\n                l3.append(l1[i])\n            i = i + 1\n    \n        j = 0\n        while j < len(l2):\n            if j % 2 == 0:\n                l3.append(l2[j])\n            j = j + 1\n        return l3"}
{"submission_id":22983,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 1:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 1:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","n_lines":13,"__index_level_0__":682,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n            if i % 2 == 0:\n                l3.append(l1[i])\n            i = i + 1\n        j = 0\n    \n        while j < len(l2):\n            if j % 2 == 0:\n                l3.append(l2[j])\n            j = j + 1\n        return l3"}
{"submission_id":19687,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if j % 2 == 0:\n            l3.append(l2[i])\n        j = j + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if j % 2 == 0:\n            l3.append(l2[i])\n        j = j + 1\n    return l3","n_lines":13,"__index_level_0__":683,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n        i = 0\n        while i < len(l1):\n            if i % 2 == 0:\n                l3.append(l1[i])\n            i = i + 1\n        j = 0\n        while j < len(l2):\n            if j % 2 == 0:\n    \n                l3.append(l2[j])\n            j = j + 1\n        return l3"}
{"submission_id":1411,"func_code":"def merge_lists(l1, l2):\n    list3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            list3.append(l1[i])\n        i = i + 1\n    k = 0\n    while k < len(l2):\n        if k % 2 == 0:\n            list3.append(l2[k])\n        k = k + 1","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    list3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            list3.append(l1[i])\n        i = i + 1\n    k = 0\n    while k < len(l2):\n        if k % 2 == 0:\n            list3.append(l2[k])\n        k = k + 1","n_lines":12,"__index_level_0__":684,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        list3 = []\n        i = 0\n        while i < len(l1):\n            if i % 2 == 0:\n                list3.append(l1[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(l2):\n            if i % 2 == 0:\n                list3.append(l2[i])\n            i = i + 1\n        return list3"}
{"submission_id":12985,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n    j = 0\n    while j < len(l2):\n        if j % 2 == 0:\n            l3.append(l2[i])\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 0:\n            l3.append(l1[i])\n    j = 0\n    while j < len(l2):\n        if j % 2 == 0:\n            l3.append(l2[i])\n    return l3","n_lines":11,"__index_level_0__":685,"repair":""}
{"submission_id":35535,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 1:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 1:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        if i % 2 == 1:\n            l3.append(l1[i])\n        i = i + 1\n    j = 0\n    while j < len(l2):\n        if i % 2 == 1:\n            l3.append(l2[j])\n        j = j + 1\n    return l3","n_lines":13,"__index_level_0__":686,"repair":""}
{"submission_id":13328,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1\n    i = i + 1\n    while i < len(l2):\n        return l2\n    i = i + 1","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1\n    i = i + 1\n    while i < len(l2):\n        return l2\n    i = i + 1","n_lines":9,"__index_level_0__":687,"repair":""}
{"submission_id":38389,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1","n_lines":5,"__index_level_0__":688,"repair":""}
{"submission_id":32492,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1[i]\n    i = i + 1\n    while i < len(l2):\n        return l2[i]\n    i = i + 1","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"169d7a9e-d0dd-4e8b-937d-fcd76c099acc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    i = 0\n    while i < len(l1):\n        return l1[i]\n    i = i + 1\n    while i < len(l2):\n        return l2[i]\n    i = i + 1","n_lines":9,"__index_level_0__":689,"repair":""}
{"submission_id":684,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for token in range(1, len(l1), 2):\n        print(l1[token])\n    for i in range(1, len(l2), 2):\n        print(l2[i])","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for token in range(1, len(l1), 2):\n        print(l1[token])\n    for i in range(1, len(l2), 2):\n        print(l2[i])","n_lines":6,"__index_level_0__":690,"repair":""}
{"submission_id":12370,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for i in l1:\n        l3 = l3 + [i[::l2]]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Slice(step=Name(id='x_1', ctx=Load())), ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for i in l1:\n        l3 = l3 + [i[::l2]]\n    return l3","n_lines":5,"__index_level_0__":691,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n    \n        for i in range(len(l1)):\n            if i % 2 == 0:\n                l3.append(l1[i])\n    \n        for i in range(len(l2)):\n            if i % 2 == 0:\n                l3.append(l2[i])\n    \n        return l3"}
{"submission_id":16710,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 and i % 2 == 0:\n                l3.append(l1[i])\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 and i % 2 == 0:\n                l3.append(l1[i])\n                return l3","n_lines":8,"__index_level_0__":692,"repair":""}
{"submission_id":20039,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l1.append(l3)\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l1.append(l3)\n                return l3","n_lines":8,"__index_level_0__":693,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        l3 = []\n    \n        for i in range(0, len(l1), 2):\n                l3.append(l1[i])\n    \n        for i in range(0, len(l2), 2):\n                l3.append(l2[i])\n    \n        return l3"}
{"submission_id":22164,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1)\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1)\n                return l3","n_lines":8,"__index_level_0__":694,"repair":""}
{"submission_id":11949,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1[i])\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1[i])\n                return l3","n_lines":8,"__index_level_0__":695,"repair":""}
{"submission_id":32462,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.pop(l1)\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i < len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.pop(l1)\n                return l3","n_lines":8,"__index_level_0__":696,"repair":""}
{"submission_id":14438,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i <= len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1[i])\n                return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        i = 0\n        while i <= len(l1):\n            if i == 0 or i % 2 == 0:\n                l3.append(l1[i])\n                return l3","n_lines":8,"__index_level_0__":697,"repair":""}
{"submission_id":4926,"func_code":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        l3.append(l1)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []\n    for lines in l1:\n        l3.append(l1)\n        return l3","n_lines":5,"__index_level_0__":698,"repair":""}
{"submission_id":18196,"func_code":"def merge_lists(l1, l2):\n    l3 = []","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 = []","n_lines":2,"__index_level_0__":699,"repair":""}
{"submission_id":22516,"func_code":"def merge_lists(l1, l2):\n    l3 == l1[0::2] + l2[0::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='l3', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), step=Constant(value=2)), ctx=Load()))])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 == l1[0::2] + l2[0::2]\n    return l3","n_lines":3,"__index_level_0__":700,"repair":""}
{"submission_id":13048,"func_code":"def merge_lists(l1, l2):\n    l3 == l1[::2] + l2[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='l3', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    l3 == l1[::2] + l2[::2]\n    return l3","n_lines":3,"__index_level_0__":701,"repair":""}
{"submission_id":4095,"func_code":"def merge_lists(l1, l2):\n    for num in l1:\n        l3.append(num)\n    for number in l2:\n        l3.append(number)\n    sorted(l)\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    for num in l1:\n        l3.append(num)\n    for number in l2:\n        l3.append(number)\n    sorted(l)\n    return l3","n_lines":7,"__index_level_0__":702,"repair":""}
{"submission_id":18661,"func_code":"def merge_lists(l1, l2):\n    for num in l1:\n        l3.append(num)\n    for number in l2:\n        l3.append(number)\n    sorted(l3)\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='l3', ctx=Load())], keywords=[])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    for num in l1:\n        l3.append(num)\n    for number in l2:\n        l3.append(number)\n    sorted(l3)\n    return l3","n_lines":7,"__index_level_0__":703,"repair":""}
{"submission_id":42062,"func_code":"def merge_lists(l1, l2):\n    for num in l1:\n        l2.append(num)\n        l3 = sorted(l2)\n        return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"f40d6a8a-0620-4bda-8c98-4c952edace05","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    for num in l1:\n        l2.append(num)\n        l3 = sorted(l2)\n        return l3","n_lines":5,"__index_level_0__":704,"repair":""}
{"submission_id":25294,"func_code":"def merge_lists(l1, l2):\n    import sys\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    sys.stdout.write(merged_list)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_2')]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='x_2', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    import sys\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    sys.stdout.write(merged_list)","n_lines":12,"__index_level_0__":705,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        import sys\n        merged_list = []\n        i = 0\n        while i < len(l1):\n            merged_list.append(l1[i])\n            i = i + 2\n        i = 0\n        while i < len(l2):\n            merged_list.append(l2[i])\n            i += 2\n    \n        return merged_list"}
{"submission_id":36692,"func_code":"def merge_lists(l1, l2):\n    import sys\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    print(merged_list)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_2')]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1, l2):\n    import sys\n    merged_list = []\n    i = 0\n    while i < len(l1):\n        merged_list.append(l1[i])\n        i = i + 2\n    i = 0\n    while i < len(l2):\n        merged_list.append(l2[i])\n        i += 2\n    print(merged_list)","n_lines":12,"__index_level_0__":706,"repair":"def merge_lists(l1, l2):\n        \"\"\"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.\"\"\"\n        import sys\n        merged_list = []\n        i = 0\n        while i < len(l1):\n            merged_list.append(l1[i])\n            i = i + 2\n        i = 0\n        while i < len(l2):\n            merged_list.append(l2[i])\n            i += 2\n    \n        return merged_list"}
{"submission_id":16315,"func_code":"def merge_lists(l1l2):\n    l3 = l1[::2] + l2[::2]\n    return l3","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='l1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='l2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    l3 = l1[::2] + l2[::2]\n    return l3","n_lines":3,"__index_level_0__":707,"repair":""}
{"submission_id":33341,"func_code":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(i)\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(i)\n    print(l3)","n_lines":7,"__index_level_0__":708,"repair":""}
{"submission_id":23495,"func_code":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        l3.append(l2[i])\n        i = i + 2\n        j = j + 2\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        l3.append(l2[i])\n        i = i + 2\n        j = j + 2\n    print(l3)","n_lines":10,"__index_level_0__":709,"repair":""}
{"submission_id":2338,"func_code":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        l3.append(l2[i])\n        i = i + 2\n        j = j + 2","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        l3.append(l2[i])\n        i = i + 2\n        j = j + 2","n_lines":9,"__index_level_0__":710,"repair":""}
{"submission_id":6250,"func_code":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n        print(l3)","n_lines":7,"__index_level_0__":711,"repair":""}
{"submission_id":8196,"func_code":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    j = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(l1[i])\n    print(l3)","n_lines":7,"__index_level_0__":712,"repair":""}
{"submission_id":23161,"func_code":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(i)\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        l3.append(i)\n    print(l3)","n_lines":6,"__index_level_0__":713,"repair":""}
{"submission_id":26266,"func_code":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='l1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1) \/ 2:\n        if l1[i] in l1:\n            l3.append(l1[i])","n_lines":6,"__index_level_0__":714,"repair":""}
{"submission_id":1332,"func_code":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(i)\n    print(l3)","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    i = 0\n    l3 = []\n    while i < len(l1):\n        l3.append(i)\n    print(l3)","n_lines":6,"__index_level_0__":715,"repair":""}
{"submission_id":24643,"func_code":"def merge_lists(l1l2):\n    return l1l2[::2]","assignment_id":"merge_lists","func_name":"merge_lists","description":"Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.","test":"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def merge_lists(l1l2):\n    return l1l2[::2]","n_lines":2,"__index_level_0__":716,"repair":""}
{"submission_id":14069,"func_code":"def minimum(A, p, r):\n    q = j = p\n    while j < r:\n        if A[j] <= A[r]:\n            A[q], A[j] = A[j], A[q]\n            q += 1\n        j += 1\n    A[q], A[r] = A[r], A[q]\n    return q","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(A, p, r):\n    q = j = p\n    while j < r:\n        if A[j] <= A[r]:\n            A[q], A[j] = A[j], A[q]\n            q += 1\n        j += 1\n    A[q], A[r] = A[r], A[q]\n    return q","n_lines":9,"__index_level_0__":717,"repair":""}
{"submission_id":23959,"func_code":"def minimum(l, n=0):\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, n=0):\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":6,"__index_level_0__":718,"repair":"def minimum(l, n=0):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    ans = l[0]\n    for i in range(1, len(l)):\n        if l[i] < ans:\n            ans = l[i]\n    return ans"}
{"submission_id":8988,"func_code":"def minimum(l, i=0):\n    j = i\n    while j < len(l) and l[j] > l[-1]:\n        j += 1\n    if j < len(l):\n        tmp = l[i]\n        l[i] = l[j]\n        l[j] = tmp\n    if j > len(l):\n        return l[0]\n    return minimum(l, i + 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"e9910cff-d2a2-4310-a748-9ad97a5a964c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, i=0):\n    j = i\n    while j < len(l) and l[j] > l[-1]:\n        j += 1\n    if j < len(l):\n        tmp = l[i]\n        l[i] = l[j]\n        l[j] = tmp\n    if j > len(l):\n        return l[0]\n    return minimum(l, i + 1)","n_lines":11,"__index_level_0__":719,"repair":"def minimum(l, i=0):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    tmp = l[i]\n    while i < len(l):\n        if l[i] < tmp:\n            tmp = l[i]\n        i = i + 1\n    return tmp"}
{"submission_id":29839,"func_code":"def minimum(l, n=0):\n    if l == None:\n        return l\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, n=0):\n    if l == None:\n        return l\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":8,"__index_level_0__":720,"repair":"def minimum(l, n=0):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if l == None:\n            return l\n    \n        l = list(l)\n        l.sort()\n        min = l[0]\n        if l[0] < min:\n            return l[0]\n        else:\n            return min"}
{"submission_id":575,"func_code":"def minimum(l, n=0):\n    if n == 0:\n        return l[0]\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, n=0):\n    if n == 0:\n        return l[0]\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":8,"__index_level_0__":721,"repair":"def minimum(l, n=0):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(l) < 2:\n        return l[0]\n    else:\n        min = minimum(l[1:], n - 1)\n        if l[0] < min:\n            return l[0]\n        else:\n            return min"}
{"submission_id":6008,"func_code":"def minimum(l, currmin=None):\n    pos = l.pop()\n    if currmin == None or pos < currmin:\n        return minimum(l, pos)\n    return minimum(l, currmin)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"919f743b-c8d6-4955-bb0f-9ca7c9bbe1be","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, currmin=None):\n    pos = l.pop()\n    if currmin == None or pos < currmin:\n        return minimum(l, pos)\n    return minimum(l, currmin)","n_lines":5,"__index_level_0__":722,"repair":"def minimum(l, currmin=None):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    currmin = currmin or l[0]\n    if l:\n        return min(l)\n        return minimum(l, currmin)"}
{"submission_id":18631,"func_code":"def minimum(l, n):\n    if n == 0:\n        return l[0]\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, n):\n    if n == 0:\n        return l[0]\n    min = minimum(l[1:], n - 1)\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":8,"__index_level_0__":723,"repair":""}
{"submission_id":10456,"func_code":"def minimum(l, min):\n    if not l:\n        return []\n    return minimum(l[1:], l[0] if l[0] < val else val)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='val', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='val', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, min):\n    if not l:\n        return []\n    return minimum(l[1:], l[0] if l[0] < val else val)","n_lines":4,"__index_level_0__":724,"repair":""}
{"submission_id":36420,"func_code":"def minimum(l, min):\n    if not l:\n        return []\n    return minimum(l[1:], l[0] if l[0] < min else min)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l, min):\n    if not l:\n        return []\n    return minimum(l[1:], l[0] if l[0] < min else min)","n_lines":4,"__index_level_0__":725,"repair":""}
{"submission_id":4906,"func_code":"def minimum(l=[]):\n    print('1\\n3\\n6\\n4')","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1\\n3\\n6\\n4')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    print('1\\n3\\n6\\n4')","n_lines":2,"__index_level_0__":726,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[0]"}
{"submission_id":32989,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    i = 0\n    j = i + 1\n    while i < len(l):\n        if i < j[i]:\n            j[i] = i\n    return i","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    i = 0\n    j = i + 1\n    while i < len(l):\n        if i < j[i]:\n            j[i] = i\n    return i","n_lines":10,"__index_level_0__":727,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = l[0]\n    for i in l:\n        if i<minimum:\n            minimum = i\n    return minimum"}
{"submission_id":15807,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    i = 0\n    while i < len(l):\n        if i > lowest:\n            lowest = i\n    return lowest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    i = 0\n    while i < len(l):\n        if i > lowest:\n            lowest = i\n    return lowest","n_lines":9,"__index_level_0__":728,"repair":"def minimum(l=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        lowest = l[0]\n        for i in l:\n            if i < lowest:\n                lowest = i\n        return lowest"}
{"submission_id":33982,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in range(1, len(l)):\n        if i > lowest:\n            lowest = i\n    return lowest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in range(1, len(l)):\n        if i > lowest:\n            lowest = i\n    return lowest","n_lines":8,"__index_level_0__":729,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    lowest = l[0]\n    for i in l:\n        if i<lowest:\n            lowest = i\n    return lowest"}
{"submission_id":23965,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i > lowest:\n            lowest = i\n    return lowest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i > lowest:\n            lowest = i\n    return lowest","n_lines":8,"__index_level_0__":730,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(l)==0:\n        return -999\n    \n    minimum = l[0]\n    for i in l:\n        if i<minimum:\n            minimum = i\n    return minimum"}
{"submission_id":40897,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i > lowest:\n            i = lowest\n    return lowest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i > lowest:\n            i = lowest\n    return lowest","n_lines":8,"__index_level_0__":731,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    lowest = float('inf')\n    for num in l:\n        if num < lowest:\n            lowest = num\n    return lowest"}
{"submission_id":21775,"func_code":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i < lowest:\n            i = lowest\n    return lowest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 0:\n        return l\n    lowest = 0\n    for i in l:\n        if i < lowest:\n            i = lowest\n    return lowest","n_lines":8,"__index_level_0__":732,"repair":"def minimum(l=[]):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(l) == 0:\n        return -1\n    \n    minimum = min(l)\n    return minimum"}
{"submission_id":31875,"func_code":"def minimum(list=[]):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    print(max_value)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list=[]):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    print(max_value)","n_lines":5,"__index_level_0__":733,"repair":"def minimum(list=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n    \n        minimum = min(list)\n        return minimum"}
{"submission_id":32522,"func_code":"def minimum(list=[]):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list=[]):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","n_lines":5,"__index_level_0__":734,"repair":"def minimum(list=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n    \n        return min(list)"}
{"submission_id":22775,"func_code":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[:]):\n        return l[0]\n    else:\n        return minimum(l[:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[:]):\n        return l[0]\n    else:\n        return minimum(l[:])","n_lines":7,"__index_level_0__":735,"repair":"def minimum(l=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) > 1:\n            return min(l)\n        else:\n            return minimum(l[:])"}
{"submission_id":17597,"func_code":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[0:]):\n        return l[0]\n    else:\n        return minimum(l[:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[0:]):\n        return l[0]\n    else:\n        return minimum(l[:])","n_lines":7,"__index_level_0__":736,"repair":"def minimum(l=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l) > 1:\n            return min(l)\n        else:\n            return minimum(l[:])"}
{"submission_id":9959,"func_code":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[:])","n_lines":7,"__index_level_0__":737,"repair":"def minimum(l=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        l.sort()\n        if l[0]<l[1]:\n            return l[0]\n        else:\n            return minimum(l[:])"}
{"submission_id":2636,"func_code":"def minimum(list=[]):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list=[]):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","n_lines":5,"__index_level_0__":738,"repair":"def minimum(list=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 2:\n            return list[0]\n    \n        list.sort()\n        return list[0]"}
{"submission_id":5204,"func_code":"def minimum(l=[]):\n    if not l:\n        return []\n    return minimum(min(l[:-1]))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l=[]):\n    if not l:\n        return []\n    return minimum(min(l[:-1]))","n_lines":4,"__index_level_0__":739,"repair":"def minimum(l=[]):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if not l:\n            return []\n    \n        return min(l)"}
{"submission_id":12304,"func_code":"def minimum(l):\n    l = l.sort\n    return l[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load())), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = l.sort\n    return l[0]","n_lines":3,"__index_level_0__":740,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":12251,"func_code":"def minimum(l):\n    l = l.sort()\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = l.sort()\n    return l","n_lines":3,"__index_level_0__":741,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":31463,"func_code":"def minimum(l):\n    l = l.sort()\n    return l[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = l.sort()\n    return l[0]","n_lines":3,"__index_level_0__":742,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[0]"}
{"submission_id":20650,"func_code":"def minimum(l):\n    l = l.sort(key=min())\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Call(func=Name(id='min', ctx=Load()), args=[], keywords=[]))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = l.sort(key=min())\n    return l","n_lines":3,"__index_level_0__":743,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    l.sort()\n    return l[0]"}
{"submission_id":21875,"func_code":"def minimum(l):\n    l = l.sort(key=None)\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Constant(value=None))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = l.sort(key=None)\n    return l","n_lines":3,"__index_level_0__":744,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":40686,"func_code":"def minimum(n):\n    n = n.strip()\n    print(min(n))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    n = n.strip()\n    print(min(n))","n_lines":3,"__index_level_0__":745,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n)"}
{"submission_id":34316,"func_code":"def minimum(l):\n    l = sort(l)\n    return l[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sort', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = sort(l)\n    return l[0]","n_lines":3,"__index_level_0__":746,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    l = sorted(l)\n    return l[0]"}
{"submission_id":14607,"func_code":"def minimum(l):\n    l = sorted(l)\n    if l[0] < l[1]:\n        return l[0]\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    l = sorted(l)\n    if l[0] < l[1]:\n        return l[0]\n    return minimum(l)","n_lines":5,"__index_level_0__":747,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        l = sorted(l)\n    \n        if l:\n            return l[0]\n        return minimum(l)"}
{"submission_id":5556,"func_code":"def minimum(n):\n    m = sorted(n)\n    if n[0] == m[0]:\n        return n[0]\n    return minimum(n)[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"16011fd4-f5e2-4c2c-b014-86692ff746d5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    m = sorted(n)\n    if n[0] == m[0]:\n        return n[0]\n    return minimum(n)[0]","n_lines":5,"__index_level_0__":748,"repair":"def minimum(n):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        m = sorted(n)\n    \n        return m[0]"}
{"submission_id":41708,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","n_lines":8,"__index_level_0__":749,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    minimum = l[0]\n    for i in l:\n        if i<minimum:\n            minimum = i\n    return minimum"}
{"submission_id":25078,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return l[i]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return l[i]","n_lines":8,"__index_level_0__":750,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    mini = l[0]\n    for e in l:\n        if e < mini:\n            mini = e\n    return mini"}
{"submission_id":28641,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if mini > l[i]:\n            mini = int(l[i])\n        i = i + 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l) - 1:\n        if mini > l[i]:\n            mini = int(l[i])\n        i = i + 1\n    return mini","n_lines":8,"__index_level_0__":751,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = l[0]\n    for i in range(len(l)):\n        if l[i]<minimum:\n            minimum=l[i]\n    return minimum"}
{"submission_id":4540,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) < mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) < mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","n_lines":8,"__index_level_0__":752,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    minimum = l[0]\n    for x in l:\n        if x<minimum:\n            minimum = x\n    return minimum"}
{"submission_id":8157,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return mini","n_lines":8,"__index_level_0__":753,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    mini = l[0]\n    for num in l:\n        i = 0\n        while i < len(l):\n            if int(l[i]) <= mini:\n                mini = int(l[i])\n            i = i + 1\n        return mini"}
{"submission_id":221,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return l[i]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if int(l[i]) <= mini:\n            mini = int(l[i])\n        i = i + 1\n    return l[i]","n_lines":8,"__index_level_0__":754,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l = sorted(l)\n    for i in range(len(l)):\n        return l[i]"}
{"submission_id":39749,"func_code":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if l[i] < mini:\n            mini = l[i]\n        i += 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    i = 0\n    while i < len(l):\n        if l[i] < mini:\n            mini = l[i]\n        i += 1\n    return mini","n_lines":8,"__index_level_0__":755,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    mini = l[0]\n    if len(l)==1:\n        return mini\n    else:\n        i = 1\n        while i<len(l):\n            if l[i] < mini:\n                mini = l[i]\n            i += 1\n        return mini"}
{"submission_id":41330,"func_code":"def minimum(l):\n    i = 0\n    if len(l) == 1:\n        return l[0]\n    if l[i] > l[i + 1]:\n        i = i + 1\n        l = l[i]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"50d273d2-c9d2-425d-a22d-cc7338b6bc3e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    i = 0\n    if len(l) == 1:\n        return l[0]\n    if l[i] > l[i + 1]:\n        i = i + 1\n        l = l[i]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","n_lines":10,"__index_level_0__":756,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        i = 0\n        if len(l) == 1:\n            return l[0]\n    \n        while i<len(l):\n            if l[i] < l[i-1]:\n                i=i+1\n            else:\n                return l[i-1]\n    \n        return"}
{"submission_id":36205,"func_code":"def minimum(n):\n    i = 0\n    while i < n:\n        i = i + 1\n    return i","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    i = 0\n    while i < n:\n        i = i + 1\n    return i","n_lines":5,"__index_level_0__":757,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n)"}
{"submission_id":9182,"func_code":"def minimum(l):\n    mini = 0\n    while i < len(l):\n        if l[i] < mini:\n            mini = l[i]\n        i += 1\n    return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    mini = 0\n    while i < len(l):\n        if l[i] < mini:\n            mini = l[i]\n        i += 1\n    return mini","n_lines":7,"__index_level_0__":758,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum=min(l)\n    return minimum"}
{"submission_id":29960,"func_code":"def minimum(l):\n    lowest = 10000000000\n    print(l[0])\n    if l == []:\n        return lowest\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = 10000000000\n    print(l[0])\n    if l == []:\n        return lowest\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","n_lines":8,"__index_level_0__":759,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        lowest = 10000000000\n        print(l[0])\n        if l == []:\n            return lowest\n    \n        for i in l:\n            if i < lowest:\n                lowest = i\n        return lowest"}
{"submission_id":21722,"func_code":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if int(l[0]) < lowest:\n        lowest = int(l[0])\n    return minimum(l[0]).pop","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if int(l[0]) < lowest:\n        lowest = int(l[0])\n    return minimum(l[0]).pop","n_lines":7,"__index_level_0__":760,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        lowest = 10000000000\n        if l == []:\n            return lowest\n    \n        for num in l:\n            if num < lowest:\n                lowest = num\n        return lowest"}
{"submission_id":33212,"func_code":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if int(l[0]) < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if int(l[0]) < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","n_lines":7,"__index_level_0__":761,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    \n    if len(l) == 0:\n        return 0\n    \n    return min(l)"}
{"submission_id":39641,"func_code":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if l < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if l < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","n_lines":7,"__index_level_0__":762,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        lowest = 10000000000\n        if l == []:\n            return lowest\n    \n        for item in l:\n            if item < lowest:\n                lowest = item\n        return lowest"}
{"submission_id":11374,"func_code":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = 10000000000\n    if l == []:\n        return lowest\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l[0]).pop","n_lines":7,"__index_level_0__":763,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        lowest = 10000000000\n    \n        for n in l:\n            if n < lowest:\n                lowest = n\n        return lowest"}
{"submission_id":9509,"func_code":"def minimum(l):\n    min = None\n    if not l:\n        return []\n    return minimum(l[-1] if l[-1] < min else min)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    min = None\n    if not l:\n        return []\n    return minimum(l[-1] if l[-1] < min else min)","n_lines":5,"__index_level_0__":764,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if not l:\n        return None\n    return min(l)"}
{"submission_id":4041,"func_code":"def minimum(l):\n    lowest = l[0]\n    if l == []:\n        return 0\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l).pop(l[0])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    lowest = l[0]\n    if l == []:\n        return 0\n    if l[0] < lowest:\n        lowest = l[0]\n    return minimum(l).pop(l[0])","n_lines":7,"__index_level_0__":765,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        lowest = l[0]\n    \n        for n in l:\n            if n < lowest:\n                lowest = n\n        return lowest"}
{"submission_id":12366,"func_code":"def minimum(n):\n    print(min(n))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    print(min(n))","n_lines":2,"__index_level_0__":766,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n for n in n)"}
{"submission_id":21725,"func_code":"def minimum(l):\n    print('1\\n3\\n6\\n4')","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1\\n3\\n6\\n4')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    print('1\\n3\\n6\\n4')","n_lines":2,"__index_level_0__":767,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":35788,"func_code":"def minimum(n):\n    print(n)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    print(n)","n_lines":2,"__index_level_0__":768,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n)"}
{"submission_id":22521,"func_code":"def minimum(l):\n    sorted(l)\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    sorted(l)\n    return l","n_lines":3,"__index_level_0__":769,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":9016,"func_code":"def minimum(l):\n    sorted(l, key=int)\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='int', ctx=Load()))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    sorted(l, key=int)\n    return l","n_lines":3,"__index_level_0__":770,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[0]"}
{"submission_id":34140,"func_code":"def minimum(l):\n    for line in l:\n        print(line)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    for line in l:\n        print(line)","n_lines":3,"__index_level_0__":771,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":38704,"func_code":"def minimum(n):\n    if len(n) == 0:\n        return ''\n    x = n.sort()\n    return x[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"16011fd4-f5e2-4c2c-b014-86692ff746d5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if len(n) == 0:\n        return ''\n    x = n.sort()\n    return x[0]","n_lines":5,"__index_level_0__":772,"repair":"def minimum(n):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(n) == 0:\n            return ''\n    \n        minimum = min(n)\n        return minimum"}
{"submission_id":16872,"func_code":"def minimum(l):\n    if len(l) == 0:\n        return 0\n    lowest = 100\n    for line in l:\n        if line < lowest:\n            lowest = line\n    return minimum(lowest)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 0:\n        return 0\n    lowest = 100\n    for line in l:\n        if line < lowest:\n            lowest = line\n    return minimum(lowest)","n_lines":8,"__index_level_0__":773,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    lowest = 100\n    for line in l:\n        if line < lowest:\n            lowest = line\n    return lowest"}
{"submission_id":29524,"func_code":"def minimum(l):\n    if len(l) == 0:\n        return l\n    min = minimum(l[1:])\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 0:\n        return l\n    min = minimum(l[1:])\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":8,"__index_level_0__":774,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        minimum = l[0]\n        for num in l:\n            if num < minimum:\n                minimum = num\n        return minimum"}
{"submission_id":33150,"func_code":"def minimum(l):\n    if len(l) == 0:\n        return l[0]\n    min = minimum(l[1:])\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 0:\n        return l[0]\n    min = minimum(l[1:])\n    if l[0] < min:\n        return l[0]\n    else:\n        return min","n_lines":8,"__index_level_0__":775,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 0:\n            return l[0]\n    \n        minimum = l[0]\n        for el in l:\n            if el < minimum:\n                minimum = el\n        return minimum"}
{"submission_id":3535,"func_code":"def minimum(n):\n    if len(n) == 1:\n        print(n[0])\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if len(n) == 1:\n        print(n[0])\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[1:])","n_lines":7,"__index_level_0__":776,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum=n[0]\n    for i in range(1,len(n)):\n        if n[i]<minimum:\n            minimum=n[i]\n    return minimum"}
{"submission_id":39841,"func_code":"def minimum(l):\n    if len(l) == 1:\n        print(l[0])\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        print(l[0])\n    if l[0] < minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[1:])","n_lines":7,"__index_level_0__":777,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n    \n            return l[0]\n        if l[0] < minimum(l[1:]):\n            return l[0]\n        else:\n            return minimum(l[1:])"}
{"submission_id":41583,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l\n    else:\n        return mini(l[0], minimum(l[1:]))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='mini', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l\n    else:\n        return mini(l[0], minimum(l[1:]))","n_lines":5,"__index_level_0__":778,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":32790,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l\n    f, m = l[0], minimum(l[1:])\n    if f < m:\n        return f\n    else:\n        return m","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l\n    f, m = l[0], minimum(l[1:])\n    if f < m:\n        return f\n    else:\n        return m","n_lines":8,"__index_level_0__":779,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(l)==0:\n        return None\n    else:\n        m = l[0]\n        for n in l:\n            if n<m:\n                m = n\n        else:\n            return m"}
{"submission_id":2494,"func_code":"def minimum(n):\n    if len(n) == 1:\n        return n\n    if n[0] > minimum(n[1:]):\n        return n + 1\n    else:\n        return minimum(n - 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if len(n) == 1:\n        return n\n    if n[0] > minimum(n[1:]):\n        return n + 1\n    else:\n        return minimum(n - 1)","n_lines":7,"__index_level_0__":780,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n)"}
{"submission_id":5356,"func_code":"def minimum(n):\n    if len(n) == 1:\n        return n\n    if n[0] > minimum(n[1:]):\n        return n\n    else:\n        return minimum(n - 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if len(n) == 1:\n        return n\n    if n[0] > minimum(n[1:]):\n        return n\n    else:\n        return minimum(n - 1)","n_lines":7,"__index_level_0__":781,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    # Write your code here\n    if n==[]:\n        return 0\n    else:\n        return min(n)"}
{"submission_id":13662,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(a[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(a[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","n_lines":9,"__index_level_0__":782,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l = min(a)\n    for x in a:\n        if a[0] < l:\n            return l[0]\n        else:\n            return l"}
{"submission_id":35677,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(l[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(l[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","n_lines":9,"__index_level_0__":783,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l = min(a)\n    for i in a:\n        if a[0] < l:\n            return l[0]\n        else:\n            return l"}
{"submission_id":15327,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(l[1:])\n    if l[0] < l:\n        return l[0]\n    else:\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    else:\n        l = minimum(l[1:])\n    if l[0] < l:\n        return l[0]\n    else:\n        return l","n_lines":9,"__index_level_0__":784,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    a.sort()\n    return a[0]"}
{"submission_id":42483,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    elif min <= a[len(a)]:\n        min = a[len(a)]\n        a.pop()\n    else:\n        a.pop()\n    return minumum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))])]), Return(value=Call(func=Name(id='minumum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return n[0]\n    elif min <= a[len(a)]:\n        min = a[len(a)]\n        a.pop()\n    else:\n        a.pop()\n    return minumum(a)","n_lines":9,"__index_level_0__":785,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    minimum = a[0]\n    \n    for i in range(len(a)):\n        if a[i] < minimum:\n            minimum = a[i]\n    return minimum"}
{"submission_id":25304,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = min(l[0], miminum(l[1:]))\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='miminum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = min(l[0], miminum(l[1:]))\n        return l","n_lines":6,"__index_level_0__":786,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n    \n            minimum = min(l)\n            return minimum"}
{"submission_id":17780,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = min(l[0], mininum(l[1:]))\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='mininum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        l = min(l[0], mininum(l[1:]))\n        return l","n_lines":6,"__index_level_0__":787,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n    \n            minimum = min(l)\n            return minimum\n            return l"}
{"submission_id":13115,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        m1 = minimum(l[0:len(l) \/ 2])\n        m2 = minimum(l[len(l) \/ 2:])\n        if m1 < m2:\n            return m1\n        else:\n            return m2","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        m1 = minimum(l[0:len(l) \/ 2])\n        m2 = minimum(l[len(l) \/ 2:])\n        if m1 < m2:\n            return m1\n        else:\n            return m2","n_lines":10,"__index_level_0__":788,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        m1 = min(l)\n        m2 = min(l)\n        while m1 < m2:\n            m1 = min(l)\n            m2 = min(l)\n        return m1"}
{"submission_id":37804,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        mnum = minimum(l[1:])\n        minn = mnum\n        if mnum < minn:\n            minn = mnum\n        return minn","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        mnum = minimum(l[1:])\n        minn = mnum\n        if mnum < minn:\n            minn = mnum\n        return minn","n_lines":9,"__index_level_0__":789,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        else:\n    \n            mnum = min(l)\n            minn = mnum\n            if mnum < minn:\n                minn = mnum\n            return minn"}
{"submission_id":28377,"func_code":"def minimum(n):\n    if len(n) == 1:\n        return n[0]\n    else:\n        min_ret = minimum(n[1:])\n        return n[0] if n[0] > min_ret else min_ret","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if len(n) == 1:\n        return n[0]\n    else:\n        min_ret = minimum(n[1:])\n        return n[0] if n[0] > min_ret else min_ret","n_lines":6,"__index_level_0__":790,"repair":"def minimum(n):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(n) == 1:\n            return n[0]\n    \n        minimum = min(n)\n        return minimum"}
{"submission_id":3464,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        new_l = minimum(l[1:])\n    if l[0] > new_l:\n        return l[0]\n    else:\n        return new_l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"87fe2a11-c843-4db7-a092-fa2c47cf613f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        new_l = minimum(l[1:])\n    if l[0] > new_l:\n        return l[0]\n    else:\n        return new_l","n_lines":9,"__index_level_0__":791,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if l:\n        return min(l)\n    else:\n        return 0"}
{"submission_id":42401,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        l = minimum(a[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        l = minimum(a[1:])\n    if a[0] < l:\n        return l[0]\n    else:\n        return l","n_lines":9,"__index_level_0__":792,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l = min(a)\n    for i in a:\n        if a[0] < l:\n            return l[0]\n        else:\n            return l"}
{"submission_id":12511,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        small = a[0]\n        if a[1] < small:\n            small = a[1]\n        else:\n            a.remove(a[0])\n    return minimum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        small = a[0]\n        if a[1] < small:\n            small = a[1]\n        else:\n            a.remove(a[0])\n    return minimum(a)","n_lines":10,"__index_level_0__":793,"repair":"def minimum(a):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        small = a[0]\n        for num in a:\n            if num < small:\n                small = num\n        return small"}
{"submission_id":13936,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        small = a[0]\n        if a[1] < small:\n            small = a[i]\n            a.remove(a[0])\n        else:\n            a.remove(a[1])\n    return minimum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"0d8d49aa-e213-4ab4-bcc1-440a0397585c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        small = a[0]\n        if a[1] < small:\n            small = a[i]\n            a.remove(a[0])\n        else:\n            a.remove(a[1])\n    return minimum(a)","n_lines":11,"__index_level_0__":794,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    small = a[0]\n    for i in range(1, len(a)):\n        if a[i] < small:\n            small = a[i]\n    return small"}
{"submission_id":38463,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    elif a[0] < minimum(l[1:]):\n        return a[0]\n    return minimum(l[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    elif a[0] < minimum(l[1:]):\n        return a[0]\n    return minimum(l[1:])","n_lines":6,"__index_level_0__":795,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        return min(l[0:])"}
{"submission_id":2508,"func_code":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    elif list[0] < minimum(list[1:]):\n        list[0]\n    else:\n        return minimum(list[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    elif list[0] < minimum(list[1:]):\n        list[0]\n    else:\n        return minimum(list[1:])","n_lines":7,"__index_level_0__":796,"repair":"def minimum(list):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n        elif list[0] < minimum(list[1:]):\n    \n            return list[0]\n        else:\n            return minimum(list[1:])"}
{"submission_id":2031,"func_code":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    elif list[0] < minimum(list[1:]):\n        return list[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    elif list[0] < minimum(list[1:]):\n        return list[0]","n_lines":5,"__index_level_0__":797,"repair":"def minimum(list):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n    \n        return min(list)"}
{"submission_id":18495,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return min(l[0], findMinimum(l[1:]))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='findMinimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return min(l[0], findMinimum(l[1:]))","n_lines":5,"__index_level_0__":798,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        findMinimum = minimum\n        for element in l:\n            return min(l[0], findMinimum(l[1:]))"}
{"submission_id":38302,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return minimum(l[1:] if l[0] > l[-1] else l[-1])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"f93e7adc-52fc-42e1-ba0d-59e245864c63","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return minimum(l[1:] if l[0] > l[-1] else l[-1])","n_lines":5,"__index_level_0__":799,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        minimum = min(l)\n        return minimum"}
{"submission_id":9581,"func_code":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    list = sorted(list)\n    return minimum(list.pop())","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    list = sorted(list)\n    return minimum(list.pop())","n_lines":5,"__index_level_0__":800,"repair":"def minimum(list):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n        list = sorted(list)\n    \n        \n        return min(list)"}
{"submission_id":1128,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    smallest = a.pop(0)\n    x = minimum(a)\n    if smallest > minimum(a):\n        smallest = x\n    return smallest","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"36685ead-53f8-40af-a908-4c048278dc6b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    smallest = a.pop(0)\n    x = minimum(a)\n    if smallest > minimum(a):\n        smallest = x\n    return smallest","n_lines":8,"__index_level_0__":801,"repair":"def minimum(a):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n        smallest = a.pop(0)\n    \n        for i in a:\n            if i<smallest:\n                smallest=i\n        return smallest"}
{"submission_id":5832,"func_code":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    print(max_value)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    print(max_value)","n_lines":5,"__index_level_0__":802,"repair":"def minimum(list):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(list)==0:\n        return 0\n    \n    list.sort()\n    \n    return list[0]"}
{"submission_id":2348,"func_code":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    return list.remove(max_value)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 1:\n        return list[0]\n    max_value = max(list)\n    return list.remove(max_value)","n_lines":5,"__index_level_0__":803,"repair":"def minimum(list):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 1:\n            return list[0]\n    \n        return min(list)"}
{"submission_id":34612,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    mini = minimum(l[1])\n    if l[0] < mini:\n        l.pop(mini)\n    else:\n        l.pop(l[0])\n    return l[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    mini = minimum(l[1])\n    if l[0] < mini:\n        l.pop(mini)\n    else:\n        l.pop(l[0])\n    return l[0]","n_lines":9,"__index_level_0__":804,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    mini = l[0]\n    for i in range(len(l)):\n        if l[i] < mini:\n            mini = l[i]\n    return mini"}
{"submission_id":12764,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    mini = minimun(a[:-1])\n    if a[-1] < mini:\n        return a[-1]\n    else:\n        return mini","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"70a531fa-76d5-4949-ae20-9c7e6db61af8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimun', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    mini = minimun(a[:-1])\n    if a[-1] < mini:\n        return a[-1]\n    else:\n        return mini","n_lines":8,"__index_level_0__":805,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    mini = a[0]\n    for i in a:\n        if i < mini:\n            mini = i\n    return mini"}
{"submission_id":23105,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] > l[i + 1]:\n        i = i + 1\n        l = l[i]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"50d273d2-c9d2-425d-a22d-cc7338b6bc3e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] > l[i + 1]:\n        i = i + 1\n        l = l[i]\n    else:\n        l.pop(i + 1)\n    return minimum(l)","n_lines":10,"__index_level_0__":806,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l = list(l)\n    return min(l)"}
{"submission_id":24066,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] > l[i + 1]:\n        i += 1\n        l = l[i:]\n    else:\n        l.pop(i + 1)\n    return minimum()","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"57b690d2-56f4-4fcf-abf7-8719f8802aae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    i = 0\n    if l[i] > l[i + 1]:\n        i += 1\n        l = l[i:]\n    else:\n        l.pop(i + 1)\n    return minimum()","n_lines":10,"__index_level_0__":807,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        i = 0\n    \n        while i < len(l) and l[i] < l[i-1]:\n            i += 1\n        return l[i-1]"}
{"submission_id":31017,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    small = a[0]\n    i = 0\n    if a[i + 1] < small:\n        small = a[i]\n    else:\n        a.remove(a[i])\n    return minimum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    small = a[0]\n    i = 0\n    if a[i + 1] < small:\n        small = a[i]\n    else:\n        a.remove(a[i])\n    return minimum(a)","n_lines":10,"__index_level_0__":808,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    small = a[0]\n    for i in range(a.__len__()):\n        if a[i] < small:\n            small = a[i]\n    return small"}
{"submission_id":15677,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return l.remove(large)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return l.remove(large)","n_lines":8,"__index_level_0__":809,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        smallest = l[0]\n        for num in l:\n            if num < smallest:\n                smallest = num\n        return smallest"}
{"submission_id":19534,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return minimum(l.remove(large))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return minimum(l.remove(large))","n_lines":8,"__index_level_0__":810,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    small = l[0]\n    for num in l:\n        if num < small:\n            small = num\n    return small"}
{"submission_id":38724,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return minumum(l.remove(large))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minumum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    large = l[0]\n    for num in l:\n        if num > large:\n            large = num\n    return minumum(l.remove(large))","n_lines":8,"__index_level_0__":811,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    small = l[0]\n    large = l[0]\n    for num in l:\n        if num < small:\n            small = num\n    return small"}
{"submission_id":24960,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    small = a[0]\n    if a[1] < small:\n        small = a[1]\n    else:\n        a.remove(a[0])\n    return minimum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    small = a[0]\n    if a[1] < small:\n        small = a[1]\n    else:\n        a.remove(a[0])\n    return minimum(a)","n_lines":9,"__index_level_0__":812,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    small = a[0]\n    for x in a:\n        if x < small:\n            small = x\n    return small"}
{"submission_id":5335,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    a.remove(max(a))\n    return maximum(a)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    a.remove(max(a))\n    return maximum(a)","n_lines":5,"__index_level_0__":813,"repair":"def minimum(a):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        return min(a)"}
{"submission_id":11625,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if a[-2] < a[-1]:\n        return minimum(a[:-1])\n    else:\n        return minimum(a[:-2] + a[-1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d0af1b08-7254-49f0-8cc4-d63a85c9199d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if a[-2] < a[-1]:\n        return minimum(a[:-1])\n    else:\n        return minimum(a[:-2] + a[-1:])","n_lines":7,"__index_level_0__":814,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        a=list(l)\n        if a[0]<a[-1]:\n            return minimum(a[:-1])\n        else:\n            return minimum(a[:-2] + a[-1:])"}
{"submission_id":16483,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > minimum(a[1:]):\n        return a[0]\n    else:\n        return minimum(a[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] > minimum(a[1:]):\n        return a[0]\n    else:\n        return minimum(a[1:])","n_lines":7,"__index_level_0__":815,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    a.sort()\n    return a[0]"}
{"submission_id":12282,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] > l[1]:\n        l.remove(l[1])\n    elif l[0] < l[1]:\n        l.remove(l[0])\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9f673df6-fcfd-4d07-b0dd-1f553c38f25b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] > l[1]:\n        l.remove(l[1])\n    elif l[0] < l[1]:\n        l.remove(l[0])\n    return minimum(l)","n_lines":8,"__index_level_0__":816,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        \n        if len(l) > 1:\n            l.sort()\n            l.remove(l[1])\n        elif l[0] < l[1]:\n            l.remove(l[0])\n        return minimum(l)"}
{"submission_id":11947,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] < a[1]:\n        a.append(a[0])\n    return minmum(a[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minmum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[0] < a[1]:\n        a.append(a[0])\n    return minmum(a[1:])","n_lines":6,"__index_level_0__":817,"repair":"def minimum(a):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n        if a[0] < a[1]:\n            a.append(a[0])\n    \n        return min(a)"}
{"submission_id":28643,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < l[1]:\n        l.remove(l[0])\n    elif l[0] < l[1]:\n        l.remove(l[1])\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < l[1]:\n        l.remove(l[0])\n    elif l[0] < l[1]:\n        l.remove(l[1])\n    return minimum(l)","n_lines":8,"__index_level_0__":818,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if l[0] > l[1]:\n            l.remove(l[0])\n        elif l[0] < l[1]:\n            l.remove(l[1])\n        return minimum(l)"}
{"submission_id":40023,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < l[1]:\n        l.remove(l[0])\n    elif l[1] < l[0]:\n        l.remove(l[0])\n    return minimum(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] < l[1]:\n        l.remove(l[0])\n    elif l[1] < l[0]:\n        l.remove(l[0])\n    return minimum(l)","n_lines":8,"__index_level_0__":819,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        if l[0] < l[1]:\n    \n            l.remove(l[1])\n        elif l[1] < l[0]:\n            l.remove(l[0])\n        return minimum(l)"}
{"submission_id":956,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] <= minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[n + 1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"198db91d-9bcb-463c-838e-d8957f078a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[0] <= minimum(l[1:]):\n        return l[0]\n    else:\n        return minimum(l[n + 1:])","n_lines":7,"__index_level_0__":820,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n        if l[0] <= minimum(l[1:]):\n            return l[0]\n    \n        return minimum(l[1:])"}
{"submission_id":31164,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[-2] > l[-1]:\n        return minimum(l[:-1])\n    else:\n        return minimum(L[:-2] + l[-1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='L', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    if l[-2] > l[-1]:\n        return minimum(l[:-1])\n    else:\n        return minimum(L[:-2] + l[-1:])","n_lines":7,"__index_level_0__":821,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        if len(l)==0:\n            return 0\n        else:\n            return min(minimum(l[:-1]), l[-1])"}
{"submission_id":10082,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[-2] > a[-1]:\n        return minimum(a[:-1])\n    else:\n        return minimum(a[:-2] + a[-1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"d0e5b214-932e-4ec6-ae62-66baacab8b6c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    if a[-2] > a[-1]:\n        return minimum(a[:-1])\n    else:\n        return minimum(a[:-2] + a[-1:])","n_lines":7,"__index_level_0__":822,"repair":"def minimum(a):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(a)==0:\n        return 0\n    elif len(a)==1:\n        return a[0]\n    else:\n        if a[0]<a[-1]:\n            return minimum(a[:-1])\n        else:\n            return minimum(a[:-2] + a[-1:])"}
{"submission_id":7246,"func_code":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    return minimum(a.remove(max(a)))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(a):\n    if len(a) == 1:\n        return a[0]\n    return minimum(a.remove(max(a)))","n_lines":4,"__index_level_0__":823,"repair":"def minimum(a):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(a) == 1:\n            return a[0]\n    \n        return min(a)"}
{"submission_id":25485,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return minimum(l[1:] if l[0] > l[1] else l[:-1])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"2b5f9b04-bd61-4108-b289-84a2c1002a82","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return minimum(l[1:] if l[0] > l[1] else l[:-1])","n_lines":4,"__index_level_0__":824,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        return min(l, key=lambda x: x)"}
{"submission_id":13046,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return minimum(l[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return minimum(l[1:])","n_lines":4,"__index_level_0__":825,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        return min(l)"}
{"submission_id":30571,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] < minimum(l[1:])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    return l[0] < minimum(l[1:])","n_lines":4,"__index_level_0__":826,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(l) == 1:\n            return l[0]\n    \n        l.sort()\n        return l[0]"}
{"submission_id":7378,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[1]\n    else:\n        mnum = minimum(l[1:])\n        minn = mnum\n        if mnum < minn:\n            minn = mnum\n        return minn","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[1]\n    else:\n        mnum = minimum(l[1:])\n        minn = mnum\n        if mnum < minn:\n            minn = mnum\n        return minn","n_lines":9,"__index_level_0__":827,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(l)==0:\n        return 0\n    \n    minn = l[0]\n    for num in l:\n        if num < minn:\n            minn = num\n    return minn"}
{"submission_id":3004,"func_code":"def minimum(list):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return list.remove(max_value)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return list.remove(max_value)","n_lines":5,"__index_level_0__":828,"repair":"def minimum(list):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(list) == 2:\n            return list[0]\n    \n        list.sort()\n        return list[0]"}
{"submission_id":30043,"func_code":"def minimum(list):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(list):\n    if len(list) == 2:\n        return list[0]\n    max_value = max(list)\n    return minimum(list.remove(max_value))","n_lines":5,"__index_level_0__":829,"repair":"def minimum(list):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    list.sort()\n    max_value = list[0]\n    return max_value"}
{"submission_id":42126,"func_code":"def minimum(n):\n    if min(n) != None:\n        print(min(n))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if min(n) != None:\n        print(min(n))","n_lines":3,"__index_level_0__":830,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n)"}
{"submission_id":34262,"func_code":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < minimum(n[1:]):\n        return n[0]\n    else:\n        n[0] > n[1:]\n    return minimum(n - 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Expr(value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < minimum(n[1:]):\n        return n[0]\n    else:\n        n[0] > n[1:]\n    return minimum(n - 1)","n_lines":8,"__index_level_0__":831,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    ans = float('inf')\n    for i in range(len(n)):\n        if n[i]<ans:\n            ans = n[i]\n    return ans"}
{"submission_id":35020,"func_code":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < minimum(n[1:]):\n        return n[0]\n    elif n[0] > n[1:]:\n        return minimum(n - 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < minimum(n[1:]):\n        return n[0]\n    elif n[0] > n[1:]:\n        return minimum(n - 1)","n_lines":7,"__index_level_0__":832,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    \n    \n    \n    return min(n)"}
{"submission_id":32574,"func_code":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < n[1:]:\n        return n[0]\n    elif n[0] > n[1:]:\n        return minimum(n - 1)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n == 0:\n        return n\n    elif n[0] < n[1:]:\n        return n[0]\n    elif n[0] > n[1:]:\n        return minimum(n - 1)","n_lines":7,"__index_level_0__":833,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if not n:\n        return 0\n    elif len(n)==1:\n        return n[0]\n    else:\n        return min(n)"}
{"submission_id":32403,"func_code":"def minimum(n):\n    if n == 1:\n        return n[0]\n    else:\n        min_ret = minimum\n        return n[0] if n[0] < min_ret else min_ret","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='minimum', ctx=Load())), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n == 1:\n        return n[0]\n    else:\n        min_ret = minimum\n        return n[0] if n[0] < min_ret else min_ret","n_lines":6,"__index_level_0__":834,"repair":"def minimum(n):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if n == 1:\n            return n[0]\n    \n        \n        return min(n)"}
{"submission_id":38220,"func_code":"def minimum(n):\n    if n == 1:\n        return n[0]\n    else:\n        return n[0] if n[0] < minimum else minimum","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='minimum', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='minimum', ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n == 1:\n        return n[0]\n    else:\n        return n[0] if n[0] < minimum else minimum","n_lines":5,"__index_level_0__":835,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = min(set(n))\n    return minimum"}
{"submission_id":28862,"func_code":"def minimum(lst):\n    if lst == []:\n        return 0\n    return 1 + minimum(lst[:-1])","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"caddc359-e5b0-41d8-94ab-df712d5ea9ce","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def minimum(lst):\n    if lst == []:\n        return 0\n    return 1 + minimum(lst[:-1])","n_lines":4,"__index_level_0__":836,"repair":"def minimum(lst):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if lst == []:\n            return 0\n    \n        return min(lst)"}
{"submission_id":40949,"func_code":"def minimum(l):\n    if l == []:\n        return []\n    lowest = 100\n    for line in l:\n        if line < lowest:\n            lowest = line\n    return minimum(lowest)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if l == []:\n        return []\n    lowest = 100\n    for line in l:\n        if line < lowest:\n            lowest = line\n    return minimum(lowest)","n_lines":8,"__index_level_0__":837,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if l == []:\n            return []\n        lowest = 100\n    \n        for num in l:\n            if num < lowest:\n                lowest = num\n        return lowest"}
{"submission_id":40160,"func_code":"def minimum(n):\n    if n != None:\n        print(min(n))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def minimum(n):\n    if n != None:\n        print(min(n))","n_lines":3,"__index_level_0__":838,"repair":"def minimum(n):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(n) if len(n)>0 else 0"}
{"submission_id":13228,"func_code":"def minimum(l):\n    if not l:\n        return []\n    return minimum(min(l))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if not l:\n        return []\n    return minimum(min(l))","n_lines":4,"__index_level_0__":839,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if not l:\n            return []\n    \n        return min(l)"}
{"submission_id":4297,"func_code":"def minimum(l):\n    if not l:\n        return []\n    return minimum(min(l[:-1]))","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if not l:\n        return []\n    return minimum(min(l[:-1]))","n_lines":4,"__index_level_0__":840,"repair":"def minimum(l):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if not l:\n            return []\n    \n        return min(l)"}
{"submission_id":37517,"func_code":"def minimum(l):\n    return sorted(l)","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    return sorted(l)","n_lines":2,"__index_level_0__":841,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    return min(l)"}
{"submission_id":8341,"func_code":"def minimum(l):\n    return l","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    return l","n_lines":2,"__index_level_0__":842,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    l.sort()\n    return l[0]"}
{"submission_id":28358,"func_code":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    minimum = minimum(l[1])\n    if l[0] < minimum:\n        l.pop(minimum)\n    else:\n        l.pop(l[0])\n    return l[0]","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    minimum = minimum(l[1])\n    if l[0] < minimum:\n        l.pop(minimum)\n    else:\n        l.pop(l[0])\n    return l[0]","n_lines":9,"__index_level_0__":843,"repair":"def minimum(l):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = l[0]\n    for i in l:\n        if i < minimum:\n            minimum = i\n    return minimum"}
{"submission_id":33424,"func_code":"def remove_zeros(list, val):\n    for i in range(list.count(val)):\n        list.remove(val)","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list, val):\n    for i in range(list.count(val)):\n        list.remove(val)","n_lines":3,"__index_level_0__":844,"repair":""}
{"submission_id":17589,"func_code":"def remove_zeros(list):\n    i = 0\n    list = input()\n    while i < len(list):\n        if 0 in list:\n            list.pop(0)\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    list = input()\n    while i < len(list):\n        if 0 in list:\n            list.pop(0)\n        i = i + 1","n_lines":7,"__index_level_0__":845,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(list):\n            if 0 in list:\n                list.pop(0)\n            i = i + 1"}
{"submission_id":33550,"func_code":"def remove_zeros(list):\n    i = 0\n    no_zero_list = []\n    while i < len(list):\n        if list[i] != 0:\n            no_zero_list.append(list[i])\n        i = i + 1\n    return no_zero_list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    no_zero_list = []\n    while i < len(list):\n        if list[i] != 0:\n            no_zero_list.append(list[i])\n        i = i + 1\n    return no_zero_list","n_lines":8,"__index_level_0__":846,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        no_zero_list = []\n        while i < len(list):\n            if list[i] != 0:\n                no_zero_list.append(list[i])\n    \n            i += 1"}
{"submission_id":34557,"func_code":"def remove_zeros(list):\n    i = 0\n    for value in list:\n        if value == 0:\n            del value\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    for value in list:\n        if value == 0:\n            del value\n    return list","n_lines":6,"__index_level_0__":847,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    list2 = []\n    for i in list:\n        if i==0:\n            continue"}
{"submission_id":11067,"func_code":"def remove_zeros(list):\n    i = 0\n    if str(list[i]) == '0':\n        del list[i]\n    i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='0')]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    if str(list[i]) == '0':\n        del list[i]\n    i = i + 1\n    return list","n_lines":6,"__index_level_0__":848,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(list):\n                if list[i]==0:\n                        list.pop(i)\n                i=i+1"}
{"submission_id":32912,"func_code":"def remove_zeros(list):\n    i = 0\n    if list[i] == '0':\n        del list[i]\n    i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    if list[i] == '0':\n        del list[i]\n    i = i + 1\n    return list","n_lines":6,"__index_level_0__":849,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i=0\n    while i<len(list):\n        if list[i]==0:\n            list.pop(i)\n        else:\n            i=i+1\n    return"}
{"submission_id":9986,"func_code":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        del list[i]\n    i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        del list[i]\n    i = i + 1\n    return list","n_lines":6,"__index_level_0__":850,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(list):\n                if list[i] == 0:\n                        del list[i]\n                else:\n                        i += 1"}
{"submission_id":22494,"func_code":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        del list[i]","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        del list[i]","n_lines":4,"__index_level_0__":851,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    for i in range(len(list)):\n        if list[i] == 0:\n            del list[i]"}
{"submission_id":19438,"func_code":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        list.remove(list[i])","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    if list[i] == 0:\n        list.remove(list[i])","n_lines":4,"__index_level_0__":852,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    list = []\n    for i in list:\n        if list[i] == 0:\n            list.remove(list[i])"}
{"submission_id":7741,"func_code":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        print(len(a) - i)\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        print(len(a) - i)\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","n_lines":7,"__index_level_0__":853,"repair":"def remove_zeros(a):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(a):\n        if int(a[i]) == 0:\n            a.remove(a[i])\n        i = i + 1"}
{"submission_id":5902,"func_code":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        if int(a[len(a) - i - 1]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        if int(a[len(a) - i - 1]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","n_lines":6,"__index_level_0__":854,"repair":"def remove_zeros(a):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(a):\n        if int(a[len(a) - i - 1]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1"}
{"submission_id":31248,"func_code":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while len(a):\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","n_lines":6,"__index_level_0__":855,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            if a[i] == 0:\n                a.remove(a[len(a) - i])\n            i = i + 1"}
{"submission_id":5190,"func_code":"def remove_zeros(list):\n    i = 0\n    while 0 in List:\n        list.remove(0)","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='List', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while 0 in List:\n        list.remove(0)","n_lines":4,"__index_level_0__":856,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    List = []\n    for item in list:\n        List.append(item)\n        while 0 in List:\n            list.remove(0)"}
{"submission_id":39311,"func_code":"def remove_zeros(list):\n    i = 0\n    while i in List:\n        list.remove(0)","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='List', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i in List:\n        list.remove(0)","n_lines":4,"__index_level_0__":857,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    List=[]\n    for i in list:\n        while i in List:\n            list.remove(0)"}
{"submission_id":31624,"func_code":"def remove_zeros(list):\n    value = 0\n    while value in list:\n        list.remove(value)\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    value = 0\n    while value in list:\n        list.remove(value)\n    return list","n_lines":5,"__index_level_0__":858,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def remove(value):\n        while value in list:\n            list.remove(value)\n        return list"}
{"submission_id":13269,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(a):\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(a):\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","n_lines":7,"__index_level_0__":859,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(list):\n        if list[i]==0:\n            list.remove(list[i])\n            i = i - 1\n        i=i+1"}
{"submission_id":25870,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        list.remove(0)\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        list.remove(0)\n        i = i + 1","n_lines":5,"__index_level_0__":860,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(list) and list[i]==0:\n            list.remove(0)\n            i = i + 1"}
{"submission_id":33849,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        list.remove(0)\n    i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        list.remove(0)\n    i = i + 1","n_lines":5,"__index_level_0__":861,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(list):\n        if list[i]==0:\n            list.remove(0)\n        i = i + 1"}
{"submission_id":19204,"func_code":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(len(a) - i - 1)\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(len(a) - i - 1)\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i - 1])\n        i = i + 1","n_lines":7,"__index_level_0__":862,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            if int(a[i]) == 0:\n                a.remove(a[i])\n            i = i + 1"}
{"submission_id":16493,"func_code":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(a[0])\n        print(len(a))\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(a[0])\n        print(len(a))\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","n_lines":8,"__index_level_0__":863,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(a):\n            print(a[0])\n    \n            i = i + 1\n            if int(a[len(a) - i]) == 0:\n                a.remove(a[len(a) - i])\n            i = i + 1"}
{"submission_id":17194,"func_code":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(a[0])\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        print(a[0])\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","n_lines":7,"__index_level_0__":864,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(a):\n            print(a[0])\n    \n            if a[i] == 0:\n                a.remove(a[len(a) - i])\n            i = i + 1"}
{"submission_id":36736,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if int(list) == 0:\n            list.remove(list[i])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if int(list) == 0:\n            list.remove(list[i])\n        i = i + 1","n_lines":6,"__index_level_0__":865,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(list):\n    \n            if list[i] == 0:\n                list.remove(list[i])\n            i = i + 1"}
{"submission_id":39809,"func_code":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while i < len(a):\n        if int(a[len(a) - i]) == 0:\n            a.remove(a[len(a) - i])\n        i = i + 1","n_lines":6,"__index_level_0__":866,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(a):\n    \n            if a[i] == 0:\n                a.remove(a[len(a) - i])\n            i = i + 1"}
{"submission_id":5836,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if 0 in list:\n            list.remove(0)\n    i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if 0 in list:\n            list.remove(0)\n    i = i + 1","n_lines":6,"__index_level_0__":867,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            if 0 in list:\n                list.remove(0)\n        i = i + 1"}
{"submission_id":40970,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if 0 not in list:\n            list.remove(0)\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if 0 not in list:\n            list.remove(0)\n        i = i + 1","n_lines":6,"__index_level_0__":868,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(list):\n    \n            if list[i] == 0:\n                list.remove(0)\n            i = i + 1"}
{"submission_id":33606,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == '0':\n            list.remove(list[i])\n        i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == '0':\n            list.remove(list[i])\n        i = i + 1\n    return list","n_lines":7,"__index_level_0__":869,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def helper(list, i, length):\n        \"\"\"Helper function for the remove zeros function.\"\"\"\n        if i==length:\n            return list\n        while i < len(list):\n            if list[i] == '0':\n                list.remove(list[i])\n            i = i + 1\n        return list"}
{"submission_id":42073,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            del list[i]\n        else:\n            i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"94e64aae-7bb0-45bd-8969-e98b17d0a3da","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            del list[i]\n        else:\n            i = i + 1\n    return list","n_lines":8,"__index_level_0__":870,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(list):\n            if list[i] == 0:\n                    del list[i]\n            else:\n                i += 1"}
{"submission_id":24913,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            del list[i]\n        i = i + 1\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            del list[i]\n        i = i + 1\n    return list","n_lines":7,"__index_level_0__":872,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(list):\n            if list[i] == 0:\n                    del list[i]\n            else:\n                i += 1"}
{"submission_id":11497,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            list.remove(list[i])\n    i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len(list):\n        if list[i] == 0:\n            list.remove(list[i])\n    i = i + 1","n_lines":6,"__index_level_0__":875,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n        while i < len(list):\n    \n            if list[i]==0:\n                list.pop(i)\n            else:\n                i = i+1"}
{"submission_id":22833,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","n_lines":7,"__index_level_0__":876,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(list):\n            if list[i] == 0:\n                a.remove(a[i])\n                i = i + 1\n            i = i + 1"}
{"submission_id":31243,"func_code":"def remove_zeros(list):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","n_lines":7,"__index_level_0__":877,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(list):\n            if list[i] == 0:\n                a.remove(a[i])\n                i = i - 1\n            i = i + 1"}
{"submission_id":14038,"func_code":"def remove_zeros(a):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(a):\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","n_lines":7,"__index_level_0__":878,"repair":"def remove_zeros(a):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            if int(a[i]) == 0:\n                a.remove(a[i])\n                i = i + 1\n            i = i + 1"}
{"submission_id":7254,"func_code":"def remove_zeros(list):\n    b = []\n    i = 0\n    while i < len(a):\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    b = []\n    i = 0\n    while i < len(a):\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i - 1\n        i = i + 1","n_lines":8,"__index_level_0__":879,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(list):\n        if int(list[i]) == 0:\n            list.remove(i)\n            i = i - 1\n        i = i + 1"}
{"submission_id":3406,"func_code":"def remove_zeros(list):\n    b = []\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    b = []\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","n_lines":8,"__index_level_0__":882,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        b = []\n        i = 0\n    \n        while i < len(list):\n            a = list[:]\n            if int(a[i]) == 0:\n                a.remove(a[i])\n                i = i + 1\n            i = i + 1"}
{"submission_id":19193,"func_code":"def remove_zeros(list):\n    a = []\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"161bb8fd-c916-4d4e-a439-1dce6fc8f542","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    a = []\n    i = 0\n    while i < len[a]:\n        if int(a[i]) == 0:\n            a.remove(a[i])\n            i = i + 1\n        i = i + 1","n_lines":8,"__index_level_0__":883,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        a = []\n        i = 0\n    \n        while i < len(a):\n\n            if int(a[i]) == 0:\n                a.remove(a[i])\n                i = i + 1\n            i = i + 1"}
{"submission_id":41773,"func_code":"def remove_zeros(list):\n    remove[0].list\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2c13dbec-3676-4a81-84ae-11e26467d09e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Attribute(value=Subscript(value=Name(id='remove', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='x_0', ctx=Load())), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    remove[0].list\n    return list","n_lines":3,"__index_level_0__":884,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\""}
{"submission_id":38882,"func_code":"def remove_zeros(list):\n    for n in (list == 0):\n        list.remove(0)","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for n in (list == 0):\n        list.remove(0)","n_lines":3,"__index_level_0__":885,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    for x in list:\n        if x==0:\n            list.remove(0)"}
{"submission_id":6778,"func_code":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            list.remove('0')\n            return list\n        else:\n            return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            list.remove('0')\n            return list\n        else:\n            return list","n_lines":7,"__index_level_0__":886,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    if list==[]:\n        return None\n    else:\n        if list[0]==0:\n            if '0' in list:\n                list.remove('0')\n                return list\n            else:\n                return list"}
{"submission_id":5826,"func_code":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            return list.remove('0')\n        else:\n            return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            return list.remove('0')\n        else:\n            return list","n_lines":6,"__index_level_0__":887,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    if list:\n        if list[0]==0:\n            if '0' in list:\n                return list.remove('0')\n            else:\n                return list"}
{"submission_id":33339,"func_code":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            return list.remove(0)\n        else:\n            return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if '0' in list:\n            return list.remove(0)\n        else:\n            return list","n_lines":6,"__index_level_0__":888,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def remove_zero(list):\n            if '0' in list:\n                return list.remove(0)\n            else:\n                return list"}
{"submission_id":28145,"func_code":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.pop(number)\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.pop(number)\n    return list","n_lines":5,"__index_level_0__":889,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def remove(list):\n        for number in list:\n            if number == '0':\n                list.pop(number)\n        return list"}
{"submission_id":18280,"func_code":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.remove(number)\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.remove(number)\n    return list","n_lines":5,"__index_level_0__":890,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def remove_zeros(list):\n        for number in list:\n            if number == '0':\n                list.remove(number)\n        return list"}
{"submission_id":19754,"func_code":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.remove(list[number])\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for number in list:\n        if number == '0':\n            list.remove(list[number])\n    return list","n_lines":5,"__index_level_0__":891,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def remove(list):\n        for number in list:\n            if number==0:\n                list.remove(list[number])\n        return list"}
{"submission_id":312,"func_code":"def remove_zeros(list):\n    for i in list:\n        if i == 0:\n            list.remove[i]\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"03141ef3-f364-4b7c-9f52-990a173ac162","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    for i in list:\n        if i == 0:\n            list.remove[i]\n    return list","n_lines":5,"__index_level_0__":892,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    for i in range(len(list)):\n        if list[i]==0:\n            list.pop(i)"}
{"submission_id":7924,"func_code":"def remove_zeros(list):\n    if '0' in list:\n        return list.pop('0')\n    else:\n        return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    if '0' in list:\n        return list.pop('0')\n    else:\n        return list","n_lines":5,"__index_level_0__":893,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def zero_filter(num):\n        if num == 0:\n            return None\n        else:\n            return list"}
{"submission_id":6033,"func_code":"def remove_zeros(list):\n    if '0' in list:\n        return list.remove('0')\n    else:\n        return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    if '0' in list:\n        return list.remove('0')\n    else:\n        return list","n_lines":5,"__index_level_0__":894,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def zeros_remover(list):\n        if list==[]:\n            return list.remove('0')\n        else:\n            return list"}
{"submission_id":39647,"func_code":"def remove_zeros(list):\n    if n in list == 0:\n        list.remove(0)","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In(), Eq()], comparators=[Name(id='x_0', ctx=Load()), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    if n in list == 0:\n        list.remove(0)","n_lines":3,"__index_level_0__":895,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    for x in list:\n        if x == 0:\n            list.remove(0)"}
{"submission_id":11578,"func_code":"def remove_zeros(x):\n    if x[i] == 0:\n        del x[i]\n    if x[i] == 0:\n        del x[i]","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"a93c9eeb-104a-4436-bd9a-c2e65d311d9e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(x):\n    if x[i] == 0:\n        del x[i]\n    if x[i] == 0:\n        del x[i]","n_lines":5,"__index_level_0__":896,"repair":"def remove_zeros(x):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    for i in range(len(x)):\n        if x[i] == 0:\n            del x[i]"}
{"submission_id":18594,"func_code":"def remove_zeros(list):\n    return list.remove('0')","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    return list.remove('0')","n_lines":2,"__index_level_0__":897,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    list=[x for x in list if x]"}
{"submission_id":23859,"func_code":"def remove_zeros(list):\n    return [value for value in list if value != 0]","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='value', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    return [value for value in list if value != 0]","n_lines":2,"__index_level_0__":898,"repair":""}
{"submission_id":35125,"func_code":"def remove_zeros(list):\n    while 0 in list:\n        list.remove(0)\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    while 0 in list:\n        list.remove(0)\n    return list","n_lines":4,"__index_level_0__":899,"repair":"def remove_zeros(list):\n        \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n        while 0 in list:\n    \n                list.remove(0)"}
{"submission_id":41070,"func_code":"def remove_zeros(list):\n    while 0 in list:\n        for i in list:\n            if i == 0:\n                list.remove(i)\n    return list","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"03141ef3-f364-4b7c-9f52-990a173ac162","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(list):\n    while 0 in list:\n        for i in list:\n            if i == 0:\n                list.remove(i)\n    return list","n_lines":6,"__index_level_0__":900,"repair":"def remove_zeros(list):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    \n    def iterate(list):\n        for i in list:\n            for i in list:\n                if i == 0:\n                    list.remove(i)\n        return list"}
{"submission_id":12998,"func_code":"def remove_zeros(x):\n    while i < len(x):\n        if x[i] == 0:\n            del x[i]\n        if x[i] == 0:\n            del x[i]\n    i = i + 1","assignment_id":"remove_zeros","func_name":"remove_zeros","description":"Take a list of numbers and removes the zeros from it.","test":"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None","correct":false,"user":"a93c9eeb-104a-4436-bd9a-c2e65d311d9e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def remove_zeros(x):\n    while i < len(x):\n        if x[i] == 0:\n            del x[i]\n        if x[i] == 0:\n            del x[i]\n    i = i + 1","n_lines":7,"__index_level_0__":901,"repair":"def remove_zeros(x):\n    \"\"\"Take a list of numbers and removes the zeros from it.\"\"\"\n    i = 0\n    while i < len(x):\n        if x[i] == 0:\n            del x[i]\n        else:\n            if x[i] == 0:\n                del x[i]\n        i = i + 1"}
{"submission_id":35613,"func_code":"def reverse(a):\n    i = 0\n    while i < len(a) \/ 2:\n        tmp = a[i]\n        a[i] = a[len(a) - i - 1]\n        a[len(a) - i - 1]\n        i = i + 1\n    return a","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Expr(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    i = 0\n    while i < len(a) \/ 2:\n        tmp = a[i]\n        a[i] = a[len(a) - i - 1]\n        a[len(a) - i - 1]\n        i = i + 1\n    return a","n_lines":8,"__index_level_0__":902,"repair":"def reverse(a):\n        \"\"\"Iteratively reverse a list of elements.\"\"\"\n        i = 0\n        while i < len(a) \/ 2:\n            tmp = a[i]\n            a[i] = a[len(a) - i - 1]\n    \n            a[len(a)-i-1] = tmp\n            i = i + 1\n        return a"}
{"submission_id":11676,"func_code":"def reverse(a):\n    i = 0\n    while i < len(a):\n        print(a[len(a) - i - 1])\n        i = i + 1","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    i = 0\n    while i < len(a):\n        print(a[len(a) - i - 1])\n        i = i + 1","n_lines":5,"__index_level_0__":903,"repair":""}
{"submission_id":947,"func_code":"def reverse(a):\n    rev = []\n    i = 0\n    for i in len(a):\n        rev.append(a[len(a) - i - 1])\n    return rev","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"54e3b0c4-223a-427c-9155-d6954330319d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    i = 0\n    for i in len(a):\n        rev.append(a[len(a) - i - 1])\n    return rev","n_lines":6,"__index_level_0__":904,"repair":"def reverse(a):\n        \"\"\"Iteratively reverse a list of elements.\"\"\"\n        rev = []\n    \n        for i in range(len(a)):\n            rev.append(a[len(a) - i - 1])\n        return rev"}
{"submission_id":41825,"func_code":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev.rstrip())","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev.rstrip())","n_lines":7,"__index_level_0__":905,"repair":"def reverse(a):\n        \"\"\"Iteratively reverse a list of elements.\"\"\"\n        rev = []\n        i = 0\n    \n        while i < len(a):\n            rev.append(a[i])\n            i += 1\n        \n        return rev[::-1]\n        \n        print(rev.rstrip())"}
{"submission_id":39634,"func_code":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev.strip())","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev.strip())","n_lines":7,"__index_level_0__":906,"repair":"def reverse(a):\n    \"\"\"Iteratively reverse a list of elements.\"\"\"\n    i = 0\n    rev = []\n    while i < len(a):\n        rev.append(a[i])\n        i = i + 1\n    return rev[::-1]"}
{"submission_id":22381,"func_code":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev)","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    print(rev)","n_lines":7,"__index_level_0__":907,"repair":"def reverse(a):\n        \"\"\"Iteratively reverse a list of elements.\"\"\"\n        rev = []\n    \n        while a:\n                rev.append(a.pop())\n        return rev"}
{"submission_id":30666,"func_code":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    return rev","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    i = 0\n    while i < len(a):\n        rev.append(a[len(a) - i])\n        i = i + 1\n    return rev","n_lines":7,"__index_level_0__":908,"repair":"def reverse(a):\n    \"\"\"Iteratively reverse a list of elements.\"\"\"\n    i = 0\n    rev = []\n    while i < len(a):\n        rev.append(a[len(a)-i-1])\n        i = i + 1\n    return rev"}
{"submission_id":21734,"func_code":"def reverse(a):\n    rev = []\n    for i in len(a):\n        rev.append(a[len(a) - i - 1])\n    return rev","assignment_id":"reverse_iter","func_name":"reverse","description":"Iteratively reverse a list of elements.","test":"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']","correct":false,"user":"54e3b0c4-223a-427c-9155-d6954330319d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse(a):\n    rev = []\n    for i in len(a):\n        rev.append(a[len(a) - i - 1])\n    return rev","n_lines":5,"__index_level_0__":909,"repair":"def reverse(a):\n        \"\"\"Iteratively reverse a list of elements.\"\"\"\n        rev = []\n    \n        for i in range(len(a)):\n            rev.append(a[len(a) - i - 1])\n        return rev"}
{"submission_id":12863,"func_code":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1:]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1:]] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":911,"repair":""}
{"submission_id":18542,"func_code":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":912,"repair":"def reverse_list(a, b=0):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0 or len(a) == 1:\n    \n            return a\n        else:\n            return [a[-1]] + reverse_list(a[:-1])"}
{"submission_id":18340,"func_code":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return a[-1:]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=0):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return a[-1:]","n_lines":5,"__index_level_0__":913,"repair":"def reverse_list(a, b=0):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if a is None:\n        return []\n    else:\n        if b==0:\n            return a[::-1]\n        else:\n            return a[-1:]"}
{"submission_id":12507,"func_code":"def reverse_list(a, x=0):\n    if len(a) == 1:\n        return a\n    f = reverse_list[:-1]\n    x.append(f)\n    return x","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, x=0):\n    if len(a) == 1:\n        return a\n    f = reverse_list[:-1]\n    x.append(f)\n    return x","n_lines":6,"__index_level_0__":914,"repair":"def reverse_list(a, x=0):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if x<len(a):\n        reverse_list(a, x+1)\n    return a[::-1]"}
{"submission_id":39552,"func_code":"def reverse_list(a, b=0):\n    if a == 0:\n        return 0\n    c = reverse_list[-1:]\n    a.append(c)\n    return c","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=0):\n    if a == 0:\n        return 0\n    c = reverse_list[-1:]\n    a.append(c)\n    return c","n_lines":6,"__index_level_0__":915,"repair":""}
{"submission_id":22353,"func_code":"def reverse_list(a, b=[]):\n    if len(b) != len(a) and len(a) != 0:\n        b.append(a[-1])\n        return reverse_list(a[:-1], b)\n    else:\n        return b","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=[]):\n    if len(b) != len(a) and len(a) != 0:\n        b.append(a[-1])\n        return reverse_list(a[:-1], b)\n    else:\n        return b","n_lines":6,"__index_level_0__":917,"repair":""}
{"submission_id":41265,"func_code":"def reverse_list(s, x=[]):\n    if len(s) == 1 or len(s) == 0:\n        return s\n    else:\n        x.append(s[-1])\n        return x + reverse_list(s[:-1], x)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(s, x=[]):\n    if len(s) == 1 or len(s) == 0:\n        return s\n    else:\n        x.append(s[-1])\n        return x + reverse_list(s[:-1], x)","n_lines":6,"__index_level_0__":918,"repair":""}
{"submission_id":37113,"func_code":"def reverse_list(a, x=[]):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    f = reverse_list(a[:-1])\n    x.append(f)\n    return x","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, x=[]):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    f = reverse_list(a[:-1])\n    x.append(f)\n    return x","n_lines":6,"__index_level_0__":919,"repair":""}
{"submission_id":5541,"func_code":"def reverse_list(s, x=[]):\n    if len(s) == 1:\n        return s\n    else:\n        x.append(s[-1])\n        return x + reverse_list(s[0:len(s) - 1], x)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(s, x=[]):\n    if len(s) == 1:\n        return s\n    else:\n        x.append(s[-1])\n        return x + reverse_list(s[0:len(s) - 1], x)","n_lines":6,"__index_level_0__":920,"repair":""}
{"submission_id":4979,"func_code":"def reverse_list(a, x=[]):\n    if len(a) == 1:\n        return a\n    f = reverse_list(a[:-1])\n    x.append(f)\n    return x","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, x=[]):\n    if len(a) == 1:\n        return a\n    f = reverse_list(a[:-1])\n    x.append(f)\n    return x","n_lines":6,"__index_level_0__":921,"repair":""}
{"submission_id":38460,"func_code":"def reverse_list(a, x=[]):\n    if len(a) == 1:\n        return a\n    f = reverse_list[:-1]\n    x.append(f)\n    return x","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, x=[]):\n    if len(a) == 1:\n        return a\n    f = reverse_list[:-1]\n    x.append(f)\n    return x","n_lines":6,"__index_level_0__":922,"repair":"def reverse_list(a, x=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return x\n    \n    elif len(a)==1:\n        return a\n    else:\n        f=a[0]\n        x=reverse_list(a[1:],x)\n        x.append(f)\n        return x"}
{"submission_id":31445,"func_code":"def reverse_list(a, b=[]):\n    if len(b) != len(a):\n        b.append(a[-1])\n        return reverse_list(a[:-1], b)\n    else:\n        return b","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a, b=[]):\n    if len(b) != len(a):\n        b.append(a[-1])\n        return reverse_list(a[:-1], b)\n    else:\n        return b","n_lines":6,"__index_level_0__":923,"repair":""}
{"submission_id":21391,"func_code":"def reverse_list(l=None):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=None):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":924,"repair":"def reverse_list(l=None):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":13541,"func_code":"def reverse_list(i=[]):\n    i = 0\n    new_list = []\n    while i < len(1):\n        new_list.append((1)[len(1) - i - 1])\n        i = i + 1\n    return new_list","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"794362b7-cbcd-4bea-bafb-7967c266e248","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Constant(value=1), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(i=[]):\n    i = 0\n    new_list = []\n    while i < len(1):\n        new_list.append((1)[len(1) - i - 1])\n        i = i + 1\n    return new_list","n_lines":7,"__index_level_0__":925,"repair":"def reverse_list(i=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not i:\n        return []\n    else:\n        new_list = i[:]\n        new_list.reverse()\n        return new_list"}
{"submission_id":1592,"func_code":"def reverse_list(l=[]):\n    i = 0\n    new_list = []\n    while i < len(l):\n        new_list.append(l[len(l) - i])\n        i += 1\n    return new_list","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    i = 0\n    new_list = []\n    while i < len(l):\n        new_list.append(l[len(l) - i])\n        i += 1\n    return new_list","n_lines":7,"__index_level_0__":926,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        new_list = l[:]\n        new_list.reverse()\n        return new_list"}
{"submission_id":34653,"func_code":"def reverse_list(l=[]):\n    i = 0\n    while i < len(l):\n        new_list = new_list.append(l[len(l) - i])\n        i += 1","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    i = 0\n    while i < len(l):\n        new_list = new_list.append(l[len(l) - i])\n        i += 1","n_lines":5,"__index_level_0__":927,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":37328,"func_code":"def reverse_list(l=[]):\n    if l.isempty():\n        return '[]'\n    for i in reversed(l):\n        return list(i)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isempty', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='[]'))], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if l.isempty():\n        return '[]'\n    for i in reversed(l):\n        return list(i)","n_lines":5,"__index_level_0__":928,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":22457,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return 1\n    new = reverse_list(l[1:]) + l[:1]\n    return new","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return 1\n    new = reverse_list(l[1:]) + l[:1]\n    return new","n_lines":5,"__index_level_0__":929,"repair":"def reverse_list(l=[]):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n    \n            return l\n        new = reverse_list(l[1:]) + l[:1]\n        return new"}
{"submission_id":5099,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return []\n    else:\n        return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return []\n    else:\n        return l[-1] + reverse_list(l[:-1])","n_lines":5,"__index_level_0__":930,"repair":"def reverse_list(l=[]):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return []\n        else:\n    \n            return l[::-1]"}
{"submission_id":34075,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return []\n    else:\n        return [l[-1] + reverse_list(l[:-1])]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return []\n    else:\n        return [l[-1] + reverse_list(l[:-1])]","n_lines":5,"__index_level_0__":931,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":32993,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","n_lines":5,"__index_level_0__":932,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l) == 0:\n        return l\n    \n    reversed_list = l[:]\n    reversed_list.reverse()\n    return reversed_list"}
{"submission_id":25905,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    else:\n        return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    else:\n        return l[-1] + reverse_list(l[:-1])","n_lines":5,"__index_level_0__":933,"repair":"def reverse_list(l=[]):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":642,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    for i in reversed(l):\n        return list(i)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    for i in reversed(l):\n        return list(i)","n_lines":5,"__index_level_0__":934,"repair":"def reverse_list(l=[]):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":14532,"func_code":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":935,"repair":""}
{"submission_id":30792,"func_code":"def reverse_list(l=[]):\n    return l.reverse()","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    return l.reverse()","n_lines":2,"__index_level_0__":936,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":39479,"func_code":"def reverse_list(l=[]):\n    return l.sort(reverse=True)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l=[]):\n    return l.sort(reverse=True)","n_lines":2,"__index_level_0__":937,"repair":"def reverse_list(l=[]):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":30627,"func_code":"def reverse_list(list):\n    i = 0\n    while i <= len(list) \/\/ 2:\n        list[i], list[len(list) - 1 - i] = list[len(list) - 1 - i], list[i]\n        i += 1\n    return list","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(list):\n    i = 0\n    while i <= len(list) \/\/ 2:\n        list[i], list[len(list) - 1 - i] = list[len(list) - 1 - i], list[i]\n        i += 1\n    return list","n_lines":6,"__index_level_0__":938,"repair":"def reverse_list(list):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(list)==0:\n        return list\n    \n    return reverse_list(list[1:]) + [list[0]]"}
{"submission_id":16360,"func_code":"def reverse_list(l):\n    for i in reversed(l):\n        return reversed(l)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    for i in reversed(l):\n        return reversed(l)","n_lines":3,"__index_level_0__":942,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0: return l\n    return l[::-1]"}
{"submission_id":7486,"func_code":"def reverse_list(l):\n    for i in reversed(l):\n        return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    for i in reversed(l):\n        return l","n_lines":3,"__index_level_0__":943,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":35900,"func_code":"def reverse_list(l):\n    for i in l:\n        return reversed(l)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    for i in l:\n        return reversed(l)","n_lines":3,"__index_level_0__":944,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l == []:\n        return l\n    else:\n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":40846,"func_code":"def reverse_list(a):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0 or len(a) == 1:\n        return 0\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":945,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0 or len(a) == 1:\n    \n            return a\n        else:\n            return [a[-1]] + reverse_list(a[:-1])"}
{"submission_id":6136,"func_code":"def reverse_list(a):\n    if len(a) == 0 or len(a) == 1:\n        return 1\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0 or len(a) == 1:\n        return 1\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":946,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    else:\n        if a[0]==-1:\n            return 1\n        else:\n            return [a[-1]] + reverse_list(a[:-1])"}
{"submission_id":23971,"func_code":"def reverse_list(s):\n    if len(s) == 1 or len(s) == 0:\n        return s\n    else:\n        return s[-1] + reverse_list(s[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(s):\n    if len(s) == 1 or len(s) == 0:\n        return s\n    else:\n        return s[-1] + reverse_list(s[:-1])","n_lines":5,"__index_level_0__":947,"repair":"def reverse_list(s):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(s) == 1 or len(s) == 0:\n            return s\n        else:\n    \n            return reverse_list(s[1:]) + [s[0]]"}
{"submission_id":37077,"func_code":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return [a[:-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return [a[:-1]] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":948,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 1 or len(a) == 0:\n            return a\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":28807,"func_code":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return [a[-1]] + reverse_list[:-1]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return [a[-1]] + reverse_list[:-1]","n_lines":4,"__index_level_0__":949,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 1 or len(a) == 0:\n            return a\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":23410,"func_code":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return reverse_list(a[1:]).append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1 or len(a) == 0:\n        return a\n    return reverse_list(a[1:]).append(a[0])","n_lines":4,"__index_level_0__":950,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 1 or len(a) == 0:\n            return a\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":9489,"func_code":"def reverse_list(n):\n    if len(1) == 0:\n        return []\n    return (1)[-1] + reverse_list[:1]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"2bb8ff82-061d-43cd-a020-a2cffad09d1e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Constant(value=1), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if len(1) == 0:\n        return []\n    return (1)[-1] + reverse_list[:1]","n_lines":4,"__index_level_0__":953,"repair":"def reverse_list(n):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if n==[]:\n        return n\n    else:\n        return reverse_list(n[1:])+[n[0]]"}
{"submission_id":30308,"func_code":"def reverse_list(l):\n    if len(a) == 0:\n        return []\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"70a531fa-76d5-4949-ae20-9c7e6db61af8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(a) == 0:\n        return []\n    else:\n        return [a[-1]] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":954,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return l[::-1]"}
{"submission_id":7282,"func_code":"def reverse_list(l):\n    if len(q) != 0:\n        temp = q.pop(0)\n        reverse(q)\n        q.append(temp)\n    return q","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='q', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(q) != 0:\n        temp = q.pop(0)\n        reverse(q)\n        q.append(temp)\n    return q","n_lines":6,"__index_level_0__":955,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    else:\n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":34432,"func_code":"def reverse_list(l):\n    if len(l) == reverse_list(l):\n        return l\n    return 1 + reverse_list(l[-1] + l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == reverse_list(l):\n        return l\n    return 1 + reverse_list(l[-1] + l[:-1])","n_lines":4,"__index_level_0__":956,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return l[::-1]"}
{"submission_id":38705,"func_code":"def reverse_list(l):\n    if len(l) == reverse_list():\n        return l\n    return 1 + reverse_list(l[-1] + l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='reverse_list', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == reverse_list():\n        return l\n    return 1 + reverse_list(l[-1] + l[:-1])","n_lines":4,"__index_level_0__":957,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    else:\n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":32649,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return ''\n    return [l[-1]] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"50d273d2-c9d2-425d-a22d-cc7338b6bc3e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return ''\n    return [l[-1]] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":959,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n    \n            return l\n        return [l[-1]] + reverse_list(l[:-1])"}
{"submission_id":12174,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[-1] + count_letters(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[-1] + count_letters(l[:-1])","n_lines":5,"__index_level_0__":960,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l == []:\n        return l\n    else:\n        return l[::-1]"}
{"submission_id":40495,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return 0\n    else:\n        return l[-1] + reverse_list(l[:-1])","n_lines":5,"__index_level_0__":961,"repair":""}
{"submission_id":33683,"func_code":"def reverse_list(n):\n    if len(n) == 0:\n        return 0\n    return reverse_list(n.reverse())","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if len(n) == 0:\n        return 0\n    return reverse_list(n.reverse())","n_lines":4,"__index_level_0__":962,"repair":"def reverse_list(n):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if n==[] or n==[0]:\n        return n\n    return reverse_list(n[1:])+[n[0]]"}
{"submission_id":13124,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return 1\n    new = reverse_list(l[1:]) + l[:1]\n    return new","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return 1\n    new = reverse_list(l[1:]) + l[:1]\n    return new","n_lines":5,"__index_level_0__":963,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n    \n            return l\n        new = reverse_list(l[1:]) + l[:1]\n        return new"}
{"submission_id":14999,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        l = reverse_list(l[1:]) + l.pop(0)\n        return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        l = reverse_list(l[1:]) + l.pop(0)\n        return l","n_lines":6,"__index_level_0__":964,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":35922,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        l = reverse_list(l[1:]) + list(l.pop(0))\n        return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        l = reverse_list(l[1:]) + list(l.pop(0))\n        return l","n_lines":6,"__index_level_0__":965,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return []\n        else:\n    \n            return reverse_list(l[1:]) + [l[0]]\n            return l"}
{"submission_id":37820,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        return reverse_list(l[1:]).append(l.pop(0))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        return reverse_list(l[1:]).append(l.pop(0))","n_lines":5,"__index_level_0__":966,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":17511,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        return reverse_list(l[1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    else:\n        return reverse_list(l[1:])","n_lines":5,"__index_level_0__":967,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==1:\n        return l\n    else:\n        return l[::-1]"}
{"submission_id":25038,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a[-1]) + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a[-1]) + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":968,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0:\n            return []\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":21543,"func_code":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return [l[-1]] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"16011fd4-f5e2-4c2c-b014-86692ff746d5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='l', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return [l[-1]] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":969,"repair":"def reverse_list(n):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if n==[]: \n        return n\n    \n    return reverse_list(n[1:]) + [n[0]]"}
{"submission_id":5521,"func_code":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return n[-1:] + reverse_list[:-1]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"2bb8ff82-061d-43cd-a020-a2cffad09d1e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return n[-1:] + reverse_list[:-1]","n_lines":4,"__index_level_0__":970,"repair":"def reverse_list(n):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(n) == 0:\n            return []\n    \n        ans = n[:]\n        ans.reverse()\n        return ans"}
{"submission_id":28556,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return l[-1] + reverse_list(l[1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return l[-1] + reverse_list(l[1:])","n_lines":4,"__index_level_0__":971,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":18635,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return a[-1] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return a[-1] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":972,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0:\n            return []\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":22843,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a).append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a).append(a[0])","n_lines":4,"__index_level_0__":973,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0:\n            return []\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":9788,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a[1:]).append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return []\n    return reverse_list(a[1:]).append(a[0])","n_lines":4,"__index_level_0__":974,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0:\n            return []\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":30495,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":975,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":22634,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return l[-1].append(reverse_list(l[1:]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return l[-1].append(reverse_list(l[1:]))","n_lines":4,"__index_level_0__":976,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return []\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":23016,"func_code":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return [n[-1] + reverse_list((1)[:-1])]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Constant(value=1), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if len(n) == 0:\n        return []\n    return [n[-1] + reverse_list((1)[:-1])]","n_lines":4,"__index_level_0__":977,"repair":"def reverse_list(n):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if n==[]:\n        return []\n    \n    return reverse_list(n[1:])+[n[0]]"}
{"submission_id":15339,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return [l[-1] + reverse_list(l[:-1])]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7eb02a08-e561-4e33-a415-6df6cc4ff4a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return []\n    return [l[-1] + reverse_list(l[:-1])]","n_lines":4,"__index_level_0__":978,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":17846,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    else:\n        return a[-1] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    else:\n        return a[-1] + reverse_list(a[:-1])","n_lines":5,"__index_level_0__":979,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    else:\n        return reverse_list(a[1:])+[a[0]]"}
{"submission_id":37147,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    e = a[0]\n    a = a[1:]\n    b = reverse_list(a) + e\n    return b","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"6fb1b046-1d89-4162-8437-722d44e22f50","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    e = a[0]\n    a = a[1:]\n    b = reverse_list(a) + e\n    return b","n_lines":7,"__index_level_0__":980,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":21409,"func_code":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    return [l[-1]] + reverse_list(l[:-1])\n    return reverse_list(a[a:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='l', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_0', ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 0:\n        return a\n    return [l[-1]] + reverse_list(l[:-1])\n    return reverse_list(a[a:])","n_lines":5,"__index_level_0__":981,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(a) == 0:\n            return a\n    \n        reversed_list = reverse_list(a[1:])\n        return reversed_list + [a[0]]"}
{"submission_id":37431,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return a[-1] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"57b690d2-56f4-4fcf-abf7-8719f8802aae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return a[-1] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":982,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":31151,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"57b690d2-56f4-4fcf-abf7-8719f8802aae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return l[-1] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":983,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":4661,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":984,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n            return l\n    \n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":18574,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    new = reverse_list(l[1:]) + l[:1]\n    return new","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    new = reverse_list(l[1:]) + l[:1]\n    return new","n_lines":5,"__index_level_0__":985,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 0:\n    \n            return l\n        new = reverse_list(l[1:]) + l[:1]\n        return new"}
{"submission_id":11466,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return new.append(reverse_list[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='new', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return new.append(reverse_list[:-1])","n_lines":4,"__index_level_0__":986,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":23709,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list(l[:1]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list(l[:1]))","n_lines":4,"__index_level_0__":987,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)<1:\n        return l\n    \n    return l[::-1]"}
{"submission_id":13942,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list(l[:-1]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list(l[:-1]))","n_lines":4,"__index_level_0__":988,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":31025,"func_code":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 0:\n        return l[0]\n    return l.append(reverse_list[:-1])","n_lines":4,"__index_level_0__":989,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    \n    return l[::-1]"}
{"submission_id":21884,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return [a[0]]\n    return reverse_list(a[1:]) + [a[0]]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"dd2b828e-e813-417d-b910-df48d2f89ccc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return [a[0]]\n    return reverse_list(a[1:]) + [a[0]]","n_lines":4,"__index_level_0__":990,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":12106,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        j = l.pop(0)\n        return reverse_list(l).append(j)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        j = l.pop(0)\n        return reverse_list(l).append(j)","n_lines":6,"__index_level_0__":991,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    else:\n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":21210,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        j = list(l.pop(0))\n        return reverse_list(l) + j","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        j = list(l.pop(0))\n        return reverse_list(l) + j","n_lines":6,"__index_level_0__":992,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":40535,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return list(l.pop(0)) + reverse_list(l)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return list(l.pop(0)) + reverse_list(l)","n_lines":5,"__index_level_0__":993,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) == 1:\n            return l\n    \n        else:\n            return l[::-1]\n            return list(l.pop(0)) + reverse_list(l)"}
{"submission_id":13739,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l) + list(l.pop(0))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l) + list(l.pop(0))","n_lines":5,"__index_level_0__":994,"repair":""}
{"submission_id":10848,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","n_lines":5,"__index_level_0__":995,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":37768,"func_code":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return [ihavethehighground[-1]] + reverse_list(ihavethehighground[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return [ihavethehighground[-1]] + reverse_list(ihavethehighground[:-1])","n_lines":5,"__index_level_0__":996,"repair":"def reverse_list(ihavethehighground):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if ihavethehighground==[]:\n        return []\n    else:\n        if ihavethehighground[0]==-1:\n            return reverse_list(ihavethehighground[1:]) + [ihavethehighground[0]]\n        else:\n            return [ihavethehighground[-1]] + reverse_list(ihavethehighground[:-1])"}
{"submission_id":14701,"func_code":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return s[-1] + power(s[-1] - 1)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return s[-1] + power(s[-1] - 1)","n_lines":5,"__index_level_0__":997,"repair":"def reverse_list(ihavethehighground):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(ihavethehighground) == 1:\n            return ihavethehighground\n    \n        s = ihavethehighground[::-1]\n        if len(s) == 1:\n            return s[0]\n        \n        return s"}
{"submission_id":17455,"func_code":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + power(ihavethehighground[-1] - 1)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + power(ihavethehighground[-1] - 1)","n_lines":5,"__index_level_0__":998,"repair":""}
{"submission_id":33222,"func_code":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + reverse_list(ihavethehighground[-1] - 1\n            )","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + reverse_list(ihavethehighground[-1] - 1\n            )","n_lines":6,"__index_level_0__":999,"repair":"def reverse_list(ihavethehighground):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(ihavethehighground) == 1:\n            return ihavethehighground\n    \n        ihavethehighground.reverse()\n        return ihavethehighground"}
{"submission_id":19055,"func_code":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + reverse_list(ihavethehighground[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(ihavethehighground):\n    if len(ihavethehighground) == 1:\n        return ihavethehighground\n    else:\n        return ihavethehighground[-1] + reverse_list(ihavethehighground[:-1])","n_lines":5,"__index_level_0__":1000,"repair":"def reverse_list(ihavethehighground):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if ihavethehighground:\n        reverse_list(ihavethehighground[1:])\n        \n    return ihavethehighground[::-1]"}
{"submission_id":4010,"func_code":"def reverse_list(s):\n    if len(s) == 1:\n        return s\n    else:\n        return s[-1] + reverse_list[:-1]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(s):\n    if len(s) == 1:\n        return s\n    else:\n        return s[-1] + reverse_list[:-1]","n_lines":5,"__index_level_0__":1001,"repair":"def reverse_list(s):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(s)==0:\n        return []\n    \n    reversed = reverse_list(s[1:])\n    reversed.append(s[0])\n    return reversed"}
{"submission_id":23470,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(0))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(0))","n_lines":5,"__index_level_0__":1002,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    else:\n        return reverse_list(l[1:])+[l.pop(0)]"}
{"submission_id":13451,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(s[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(s[0]))","n_lines":5,"__index_level_0__":1003,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    \n    return l[::-1]"}
{"submission_id":13370,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(l[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l.pop(l[0]))","n_lines":5,"__index_level_0__":1004,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l) == 0:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":3591,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    else:\n        return reverse_list[:-1]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    else:\n        return reverse_list[:-1]","n_lines":5,"__index_level_0__":1005,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    \n    else:\n        return reverse_list(a[1:])+[a[0]]"}
{"submission_id":34756,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    else:\n        return reverse_list[:-2]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    else:\n        return reverse_list[:-2]","n_lines":5,"__index_level_0__":1006,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if a==[]:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":15874,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    new_l = reverse_list(l[1:]) + l[:1]\n    return new_l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d030c365-0c70-41fc-bf99-b5270c6b8c31","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    new_l = reverse_list(l[1:]) + l[:1]\n    return new_l","n_lines":5,"__index_level_0__":1007,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)<1:\n        return l\n    else:\n        new_l = reverse_list(l[1:]) + l[:1]\n        return new_l"}
{"submission_id":17394,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    l = reverse_list(a[1:]).append(a[0])\n    return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    l = reverse_list(a[1:]).append(a[0])\n    return l","n_lines":5,"__index_level_0__":1008,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    \n    l=reverse_list(a[1:])\n    l.append(a[0])\n    return l"}
{"submission_id":6800,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    l = reverse_list(a[1:])\n    l.append(a[0])\n    return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    l = reverse_list(a[1:])\n    l.append(a[0])\n    return l","n_lines":6,"__index_level_0__":1009,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        l = reverse_list(a[1:])\n        l.append(a[0])\n        return l"}
{"submission_id":28495,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    b = a[1:]\n    return reverse_list(b).append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    b = a[1:]\n    return reverse_list(b).append(a[0])","n_lines":5,"__index_level_0__":1010,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":39991,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]) + list(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]) + list(a[0])","n_lines":4,"__index_level_0__":1011,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not a:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":27978,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]) + [a[0]]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]) + [a[0]]","n_lines":4,"__index_level_0__":1012,"repair":""}
{"submission_id":15251,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return [l[-1]] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bb62ca90-d7ec-42bb-b255-0f55492691ea","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return [l[-1]] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":1013,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":36013,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a + reverse_list(a[1:1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a + reverse_list(a[1:1])","n_lines":4,"__index_level_0__":1014,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:])+[a[0]]"}
{"submission_id":25199,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[len(a) - 1] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"d0e5b214-932e-4ec6-ae62-66baacab8b6c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[len(a) - 1] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":1015,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if a==[]:\n        return a\n    \n    return reverse_list(a[1:])+[a[0]]"}
{"submission_id":28091,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return l[-1:] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"733076ff-a42d-4d8b-82c9-5fbbffc0c400","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return l[-1:] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":1016,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    else:\n        return l[-1:] + reverse_list(l[:-1])"}
{"submission_id":33993,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[-1] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[-1] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":1017,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":3983,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]).append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]).append(a[0])","n_lines":4,"__index_level_0__":1018,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:])+[a[0]]"}
{"submission_id":17716,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]).append(a[1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:]).append(a[1])","n_lines":4,"__index_level_0__":1019,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    \n    return reverse_list(a[1:])+[a[0]]"}
{"submission_id":28223,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[0].append(reverse_list(a[1:]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return a[0].append(reverse_list(a[1:]))","n_lines":4,"__index_level_0__":1020,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":14846,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse(l[:-1] + l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse(l[:-1] + l[0])","n_lines":4,"__index_level_0__":1021,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":33046,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[:-1] + l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[:-1] + l[0])","n_lines":4,"__index_level_0__":1022,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":14347,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1])","n_lines":4,"__index_level_0__":1023,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":15711,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a\n    return reverse_list(a[1:])","n_lines":4,"__index_level_0__":1024,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":25666,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[-1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[-1:])","n_lines":4,"__index_level_0__":1025,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":20326,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[::-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l\n    return reverse_list(l[::-1])","n_lines":4,"__index_level_0__":1026,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":7305,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[::1], reverse_list(l[::1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7eb02a08-e561-4e33-a415-6df6cc4ff4a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=1)), ctx=Load()), Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[::1], reverse_list(l[::1])","n_lines":5,"__index_level_0__":1027,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]: return []\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":37160,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    l = reverse_list(a[1:]).append(a[0])\n    return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    l = reverse_list(a[1:]).append(a[0])\n    return l","n_lines":5,"__index_level_0__":1028,"repair":""}
{"submission_id":24494,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    tmp = reverse_list(a[1:])\n    tmp.append(a[0])\n    return tmp","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f4380e0a-3bfd-44c6-b455-fe1018a45321","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    tmp = reverse_list(a[1:])\n    tmp.append(a[0])\n    return tmp","n_lines":6,"__index_level_0__":1029,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        tmp = reverse_list(a[1:])\n        tmp.append(a[0])\n        return tmp"}
{"submission_id":16953,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    b = []\n    i = 0\n    b.append(reverse_list(a[i])) + 1\n    return b[-1:]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f4380e0a-3bfd-44c6-b455-fe1018a45321","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Expr(value=BinOp(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=1))), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    b = []\n    i = 0\n    b.append(reverse_list(a[i])) + 1\n    return b[-1:]","n_lines":7,"__index_level_0__":1030,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":2316,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    b = []\n    b.append(reverse_list(a))\n    return b[-1:]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f4380e0a-3bfd-44c6-b455-fe1018a45321","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    b = []\n    b.append(reverse_list(a))\n    return b[-1:]","n_lines":6,"__index_level_0__":1031,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return []\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":37756,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[:-1]] + reverse_list(a[::-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[:-1]] + reverse_list(a[::-1])","n_lines":4,"__index_level_0__":1032,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":33949,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[:-1]] + reverse_list(a[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[:-1]] + reverse_list(a[:-1])","n_lines":4,"__index_level_0__":1033,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":14754,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[-1]] + reverse_list(a[::-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return [a[-1]] + reverse_list(a[::-1])","n_lines":4,"__index_level_0__":1034,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":40393,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return a[-1] + reverse_list(a[::-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return a[-1] + reverse_list(a[::-1])","n_lines":4,"__index_level_0__":1035,"repair":""}
{"submission_id":463,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return l[-1] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":1036,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":19217,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[:-1]).append(-1)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[:-1]).append(-1)","n_lines":4,"__index_level_0__":1037,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":30665,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":1038,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":9857,"func_code":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return a[0].append(reverse_list(a[1:]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 1:\n        return a[0]\n    return a[0].append(reverse_list(a[1:]))","n_lines":4,"__index_level_0__":1039,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":24351,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[1:].append(l[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[1:].append(l[0]))","n_lines":4,"__index_level_0__":1040,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return l\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":26069,"func_code":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[:-1].append(l[-1]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 1:\n        return l[0]\n    return reverse_list(l[:-1].append(l[-1]))","n_lines":4,"__index_level_0__":1041,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l == []:\n        return l\n    else:\n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":1888,"func_code":"def reverse_list(a):\n    if len(a) == 2:\n        return ''\n    return reverse_list(a[1:] + a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 2:\n        return ''\n    return reverse_list(a[1:] + a[0])","n_lines":4,"__index_level_0__":1042,"repair":""}
{"submission_id":33207,"func_code":"def reverse_list(l):\n    if len(l) == 2:\n        return l\n    else:\n        return list(l.pop(0)) + reverse_list(l)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) == 2:\n        return l\n    else:\n        return list(l.pop(0)) + reverse_list(l)","n_lines":5,"__index_level_0__":1043,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":21625,"func_code":"def reverse_list(a):\n    if len(a) == 2:\n        return a\n    return reverse_list(a[1:] + a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if len(a) == 2:\n        return a\n    return reverse_list(a[1:] + a[0])","n_lines":4,"__index_level_0__":1044,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(a)==0:\n        return a\n    \n    return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":6609,"func_code":"def reverse_list(l):\n    if len(l) < 2:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) < 2:\n        return l\n    else:\n        return reverse_list(l[1:]) + l[0]","n_lines":5,"__index_level_0__":1045,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) < 2:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":34619,"func_code":"def reverse_list(l):\n    if len(l) != 0:\n        temp = q.pop(0)\n        reverse(ll)\n        l.append(temp)\n    return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='ll', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) != 0:\n        temp = q.pop(0)\n        reverse(ll)\n        l.append(temp)\n    return l","n_lines":6,"__index_level_0__":1046,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) != 0:\n    \n            temp = l.pop(0)\n            l.reverse()\n            l.append(temp)\n        return l"}
{"submission_id":35891,"func_code":"def reverse_list(l):\n    if len(l) != 0:\n        temp = l.pop(0)\n        reverse(l)\n        l.append(temp)\n    return l","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len(l) != 0:\n        temp = l.pop(0)\n        reverse(l)\n        l.append(temp)\n    return l","n_lines":6,"__index_level_0__":1047,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if len(l) != 0:\n            temp = l.pop(0)\n    \n            reverse_list(l)\n\n            l.append(temp)\n        return l"}
{"submission_id":3633,"func_code":"def reverse_list(x):\n    if x == '':\n        return x\n    else:\n        return x[-1] + reverse_list(x[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"50aef720-52de-4735-8874-78f5a311b939","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(x):\n    if x == '':\n        return x\n    else:\n        return x[-1] + reverse_list(x[:-1])","n_lines":5,"__index_level_0__":1048,"repair":"def reverse_list(x):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if x == '':\n            return x\n    \n        return x[::-1]"}
{"submission_id":33737,"func_code":"def reverse_list(a):\n    if a == '':\n        return a\n    else:\n        return reverse_list(a[1:] + a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"919f743b-c8d6-4955-bb0f-9ca7c9bbe1be","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if a == '':\n        return a\n    else:\n        return reverse_list(a[1:] + a[0])","n_lines":5,"__index_level_0__":1049,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if a==[]:\n        return []\n    else:\n        return reverse_list(a[1:])+[a[0]]"}
{"submission_id":20036,"func_code":"def reverse_list(l):\n    if l == None:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == None:\n        return l\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":4,"__index_level_0__":1050,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":12443,"func_code":"def reverse_list(n):\n    if n == []:\n        return 0\n    return reverse_list(n.reverse())","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(n):\n    if n == []:\n        return 0\n    return reverse_list(n.reverse())","n_lines":4,"__index_level_0__":1051,"repair":"def reverse_list(n):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if n==[]:\n        return []\n    else:\n        return reverse_list(n[1:])+[n[0]]"}
{"submission_id":11504,"func_code":"def reverse_list(a):\n    if a == []:\n        return []\n    else:\n        b = [reverse_list(a[1:])]\n        return b.append(a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if a == []:\n        return []\n    else:\n        b = [reverse_list(a[1:])]\n        return b.append(a[0])","n_lines":6,"__index_level_0__":1052,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if a == []:\n            return []\n    \n        reversed_list = reverse_list(a[1:])\n        reversed_list.append(a[0])\n        return reversed_list"}
{"submission_id":40610,"func_code":"def reverse_list(list):\n    if list == []:\n        return []\n    elif len(list) == 1:\n        return [].append(list)\n    else:\n        return reverse_list(list[1:]).append(list[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=List(elts=[], ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(list):\n    if list == []:\n        return []\n    elif len(list) == 1:\n        return [].append(list)\n    else:\n        return reverse_list(list[1:]).append(list[0])","n_lines":7,"__index_level_0__":1054,"repair":"def reverse_list(list):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if list == []:\n            return []\n    \n        return reverse_list(list[1:]) + [list[0]]"}
{"submission_id":22325,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[len(l) - 2:]).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[len(l) - 2:]).append(l[0])","n_lines":7,"__index_level_0__":1056,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if l == []:\n            return []\n        elif len(l) == 1:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":40120,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[1:]).append(l[0])","n_lines":7,"__index_level_0__":1057,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if l == []:\n            return []\n        elif len(l) == 1:\n            return l\n    \n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":4755,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[-1:]).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return reverse_list(l[-1:]).append(l[0])","n_lines":7,"__index_level_0__":1058,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if l == []:\n            return []\n        elif len(l) == 1:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":37045,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return list(reverse_list(l[1:])).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return list(reverse_list(l[1:])).append(l[0])","n_lines":5,"__index_level_0__":1059,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":19108,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return reverse_list(l[1:]).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return reverse_list(l[1:]).append(l[0])","n_lines":5,"__index_level_0__":1060,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":34866,"func_code":"def reverse_list(list):\n    if list == []:\n        return []\n    else:\n        return list(reverse_list(list[1:])).append(list[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='x_0', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(list):\n    if list == []:\n        return []\n    else:\n        return list(reverse_list(list[1:])).append(list[0])","n_lines":5,"__index_level_0__":1061,"repair":"def reverse_list(list):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if list == []:\n            return []\n        else:\n    \n            return reverse_list(list[1:]) + [list[0]]"}
{"submission_id":17437,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return reverse_list(l[1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    else:\n        return reverse_list(l[1:])","n_lines":5,"__index_level_0__":1062,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l) == 0:\n        return l\n    else:\n        return l[::-1]"}
{"submission_id":7621,"func_code":"def reverse_list(a):\n    if a == []:\n        return []\n    else:\n        return a","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"27057d38-c1f9-4b8d-a26e-f287a0546d33","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if a == []:\n        return []\n    else:\n        return a","n_lines":5,"__index_level_0__":1063,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not a:\n        return []\n    else:\n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":10947,"func_code":"def reverse_list(l):\n    if l == []:\n        return []\n    return reverse_list(l[1:]) + list(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"05bf8435-64be-48cb-be81-139956827989","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if l == []:\n        return []\n    return reverse_list(l[1:]) + list(l[0])","n_lines":4,"__index_level_0__":1064,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if l == []:\n            return []\n    \n        l_ = reverse_list(l[1:])\n        l_.append(l[0])\n        return l_"}
{"submission_id":12787,"func_code":"def reverse_list(lst):\n    if lst == []:\n        return []\n    return lst[-1] + reverse_list(lst[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"caddc359-e5b0-41d8-94ab-df712d5ea9ce","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(lst):\n    if lst == []:\n        return []\n    return lst[-1] + reverse_list(lst[:-1])","n_lines":4,"__index_level_0__":1065,"repair":"def reverse_list(lst):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(lst)==0:\n        return lst\n    else:\n        return reverse_list(lst[1:]) + [lst[0]]"}
{"submission_id":215,"func_code":"def reverse_list(l):\n    if len[l] == 0:\n        return l\n    return l[-1:] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"2b5f9b04-bd61-4108-b289-84a2c1002a82","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if len[l] == 0:\n        return l\n    return l[-1:] + reverse_list(l[:-1])","n_lines":4,"__index_level_0__":1066,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return l\n    else:\n        return l[-1:] + reverse_list(l[:-1])"}
{"submission_id":7404,"func_code":"def reverse_list(l):\n    if not l:\n        return []\n    return reverse_list(l[1:].append(l[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if not l:\n        return []\n    return reverse_list(l[1:].append(l[0]))","n_lines":4,"__index_level_0__":1067,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    \n    return reverse_list(l[1:])+l[0:1]"}
{"submission_id":25814,"func_code":"def reverse_list(a):\n    if not a:\n        return a\n    else:\n        return reverse_list(a[1:] + a[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"919f743b-c8d6-4955-bb0f-9ca7c9bbe1be","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if not a:\n        return a\n    else:\n        return reverse_list(a[1:] + a[0])","n_lines":5,"__index_level_0__":1068,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if not a:\n            return a\n        else:\n    \n            return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":9656,"func_code":"def reverse_list(a):\n    if not a:\n        return a\n    return str(a[-1]) + reverse_list(str(a[:-1]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    if not a:\n        return a\n    return str(a[-1]) + reverse_list(str(a[:-1]))","n_lines":4,"__index_level_0__":1069,"repair":"def reverse_list(a):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if not a:\n            return a\n    \n        return reverse_list(a[1:]) + [a[0]]"}
{"submission_id":7510,"func_code":"def reverse_list(l):\n    if not l:\n        return l\n    return l[-1:] + reverse(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"7eb02a08-e561-4e33-a415-6df6cc4ff4a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if not l:\n        return l\n    return l[-1:] + reverse(l[:-1])","n_lines":4,"__index_level_0__":1070,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":690,"func_code":"def reverse_list(l):\n    if not l:\n        return l\n    return reverse_list(l[1:].append(l[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if not l:\n        return l\n    return reverse_list(l[1:].append(l[0]))","n_lines":4,"__index_level_0__":1071,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if not l:\n            return l\n    \n        return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":21583,"func_code":"def reverse_list(l):\n    if not l:\n        return l\n    return reverse_list(l[:-1].append(l[-1]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if not l:\n        return l\n    return reverse_list(l[:-1].append(l[-1]))","n_lines":4,"__index_level_0__":1072,"repair":"def reverse_list(l):\n        \"\"\"Recursively reverse a list of elements.\"\"\"\n        if not l:\n            return l\n    \n        l_reversed = reverse_list(l[1:])\n        l_reversed.append(l[0])\n        return l_reversed"}
{"submission_id":20190,"func_code":"def reverse_list(l):\n    if not l:\n        return l[0]\n    return reverse_list(l[1:].append(l[0]))","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    if not l:\n        return l[0]\n    return reverse_list(l[1:].append(l[0]))","n_lines":4,"__index_level_0__":1073,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return []\n    \n    return reverse_list(l[1:]) + [l[0]]"}
{"submission_id":18483,"func_code":"def reverse_list(l):\n    return l[-1] + reverse_list(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return l[-1] + reverse_list(l[:-1])","n_lines":2,"__index_level_0__":1074,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    \n    reversed_list = l[::-1]\n    return reversed_list"}
{"submission_id":9410,"func_code":"def reverse_list(l):\n    return reverse_list(l[1:-1]).append(l[0])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return reverse_list(l[1:-1]).append(l[0])","n_lines":2,"__index_level_0__":1075,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return l\n    else:\n        return reverse_list(l[1:])+[l[0]]"}
{"submission_id":40218,"func_code":"def reverse_list(l):\n    return reverse_list(l[-1]).append(l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return reverse_list(l[-1]).append(l[:-1])","n_lines":2,"__index_level_0__":1076,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l==[]:\n        return []\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":35986,"func_code":"def reverse_list(a):\n    return a.reverse()","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    return a.reverse()","n_lines":2,"__index_level_0__":1077,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    ans = a[:]\n    ans.reverse()\n    return ans"}
{"submission_id":1343,"func_code":"def reverse_list(l):\n    return l.sort(reverse=True)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return l.sort(reverse=True)","n_lines":2,"__index_level_0__":1078,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if l:\n        return reverse_list(l[1:])+[l[0]]\n    else:\n        return l"}
{"submission_id":22754,"func_code":"def reverse_list(a):\n    return reverse(a)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(a):\n    return reverse(a)","n_lines":2,"__index_level_0__":1079,"repair":"def reverse_list(a):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if a==[]:\n        return a\n    \n    return [a.pop()]+ reverse_list(a)"}
{"submission_id":33472,"func_code":"def reverse_list(l):\n    return reverse_list(l[-1] + l[:-1])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return reverse_list(l[-1] + l[:-1])","n_lines":2,"__index_level_0__":1080,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":41028,"func_code":"def reverse_list(l):\n    return reverse_list(l[1:])","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return reverse_list(l[1:])","n_lines":2,"__index_level_0__":1081,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l = list(l)\n    l.reverse()\n    return l"}
{"submission_id":15194,"func_code":"def reverse_list(l):\n    return reversed(l)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return reversed(l)","n_lines":2,"__index_level_0__":1082,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l = l[::-1]\n    return l"}
{"submission_id":688,"func_code":"def reverse_list(l):\n    return sorted(l, reverse=True)","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return sorted(l, reverse=True)","n_lines":2,"__index_level_0__":1083,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if not l:\n        return []\n    return l[::-1]"}
{"submission_id":33440,"func_code":"def reverse_list(l):\n    return l if len(l) == 1 else reverse_list(l[1:]) + [l[0]]","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"c7fa847c-561b-4652-9a01-05f954e6c8df","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Name(id='x_0', ctx=Load()), orelse=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return l if len(l) == 1 else reverse_list(l[1:]) + [l[0]]","n_lines":2,"__index_level_0__":1084,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    \n    if len(l)==0:\n        return l\n    \n    return reverse_list(l[1:])+[l[0]]"}
{"submission_id":42339,"func_code":"def reverse_list(l):\n    return lambda l: backwards(l[1:]) + l[:1] if l else []","assignment_id":"reverse_recur","func_name":"reverse_list","description":"Recursively reverse a list of elements.","test":"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Name(id='x_0', ctx=Load()), body=BinOp(left=Call(func=Name(id='backwards', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())), orelse=List(elts=[], ctx=Load()))))], decorator_list=[])], type_ignores=[])","representative":"def reverse_list(l):\n    return lambda l: backwards(l[1:]) + l[:1] if l else []","n_lines":2,"__index_level_0__":1085,"repair":"def reverse_list(l):\n    \"\"\"Recursively reverse a list of elements.\"\"\"\n    l.reverse()\n    return l"}
{"submission_id":37824,"func_code":"def search(string, letter):\n    string = input()\n    letter = input()\n    if letter not in string:\n        print('False')\n    else:\n        print('True')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    string = input()\n    letter = input()\n    if letter not in string:\n        print('False')\n    else:\n        print('True')","n_lines":7,"__index_level_0__":1088,"repair":"def search(string, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    string = str(string)\n    letter = str(letter)\n    for c in string:\n        if c == letter:\n            return True\n    return False"}
{"submission_id":29575,"func_code":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str:\n            return True\n        else:\n            return False\n        i = i + 1","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"12d00542-0a26-4a35-a142-ccd508484c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str:\n            return True\n        else:\n            return False\n        i = i + 1","n_lines":8,"__index_level_0__":1094,"repair":"def search(str, letter):\n        \"\"\"Iteratively search for a letter in a string\"\"\"\n        i = 0\n        while i < len(str):\n    \n            if str[i] == letter:\n                return True\n            else:\n                i = i + 1\n        return False"}
{"submission_id":13445,"func_code":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str:\n            return True\n        else:\n            return False\n        i += 1","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"7ee35977-e007-4398-99c0-ea42a300ff3c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if letter in str:\n            return True\n        else:\n            return False\n        i += 1","n_lines":8,"__index_level_0__":1095,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    i=0\n    while i<len(str):\n        if letter==str[i]:\n            return True\n        else:\n            i+=1\n    return False"}
{"submission_id":25345,"func_code":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return 'True'\n        i += 1\n    return False","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return 'True'\n        i += 1\n    return False","n_lines":7,"__index_level_0__":1097,"repair":"def search(str, letter):\n        \"\"\"Iteratively search for a letter in a string\"\"\"\n        i = 0\n        while i < len(str):\n    \n            if str[i] == letter:\n                return True\n    \n            i += 1\n        return False"}
{"submission_id":19455,"func_code":"def search(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n        i = i + 1\n        return False","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Constant(value=False))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n        i = i + 1\n        return False","n_lines":7,"__index_level_0__":1098,"repair":"def search(ls, val):\n        \"\"\"Iteratively search for a letter in a string\"\"\"\n        i = 0\n        while i < len(ls):\n            if ls[i] == val:\n                return True\n            i = i + 1\n    \n        return False"}
{"submission_id":12632,"func_code":"def search(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n    i = i + 1\n    return False","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n    i = i + 1\n    return False","n_lines":7,"__index_level_0__":1099,"repair":"def search(ls, val):\n        \"\"\"Iteratively search for a letter in a string\"\"\"\n        i = 0\n        while i < len(ls):\n            if ls[i] == val:\n                return True\n    \n            i += 1\n        return False"}
{"submission_id":39787,"func_code":"def search(string, letter):\n    print(letter in string)","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    print(letter in string)","n_lines":2,"__index_level_0__":1101,"repair":"def search(string, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    found = False\n    for i in range(len(string)):\n        if string[i] == letter:\n            found = True\n    return found"}
{"submission_id":13253,"func_code":"def search(str, letter):\n    for letter in str:\n        if letter in str:\n            return True\n        else:\n            return False","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    for letter in str:\n        if letter in str:\n            return True\n        else:\n            return False","n_lines":6,"__index_level_0__":1102,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    found = False\n    while not found:\n            if letter in str:\n                return True\n            else:\n                return False"}
{"submission_id":41667,"func_code":"def search(str, letter):\n    for letter in str:\n        return True","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"0ea9000e-74e5-4eea-8653-1bfeeae4aab1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    for letter in str:\n        return True","n_lines":3,"__index_level_0__":1103,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    i=0\n    while i<len(str):\n        if str[i] == letter:\n            return True\n        i+=1\n    return False"}
{"submission_id":33668,"func_code":"def search(str, letter):\n    for letters in str:\n        if letter in str:\n            print('True')\n        else:\n            print('False')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    for letters in str:\n        if letter in str:\n            print('True')\n        else:\n            print('False')","n_lines":6,"__index_level_0__":1104,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    \n    found = False\n    for i in range(len(str)):\n        if str[i] == letter:\n            found = True\n            break\n    return found"}
{"submission_id":36437,"func_code":"def search(str, letter):\n    for letters in str:\n        if letters in str:\n            print('True')\n        else:\n            print('False')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    for letters in str:\n        if letters in str:\n            print('True')\n        else:\n            print('False')","n_lines":6,"__index_level_0__":1105,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    \n    found = False\n    for char in str:\n        if char == letter:\n            found = True\n            break\n    return found"}
{"submission_id":28494,"func_code":"def search(str, letter):\n    if letter in str:\n        print('True')\n    else:\n        print('False')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        print('True')\n    else:\n        print('False')","n_lines":5,"__index_level_0__":1121,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    pos = str.find(letter)\n    if pos==-1:\n        return False\n    else:\n        return True"}
{"submission_id":26883,"func_code":"def search(str, letter):\n    if letter in str:\n        print('True')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        print('True')","n_lines":3,"__index_level_0__":1122,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    i=0\n    i=0\n    while i<len(str):\n        if str[i] == letter:\n            return True\n        else:\n            i=i+1\n    return False"}
{"submission_id":24719,"func_code":"def search(str, letter):\n    if letter in str:\n        print(True)\n    else:\n        print(False)","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=False)], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        print(True)\n    else:\n        print(False)","n_lines":5,"__index_level_0__":1123,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    i=0\n    while i < len(str):\n        if str[i]==letter:\n            return True\n        else:\n            i=i+1\n    return False"}
{"submission_id":39946,"func_code":"def search(str, letter):\n    if letter in str:\n        print(True)\n    if letter not in str:\n        print(False)","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=False)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        print(True)\n    if letter not in str:\n        print(False)","n_lines":5,"__index_level_0__":1124,"repair":"def search(str, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    found = False\n    for char in str:\n        if char == letter:\n            found = True\n    return found"}
{"submission_id":5918,"func_code":"def search(string, letter):\n    if letter in string:\n        return 'True'\n    if letter not in string:\n        return 'False'","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if letter in string:\n        return 'True'\n    if letter not in string:\n        return 'False'","n_lines":5,"__index_level_0__":1127,"repair":"def search(string, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    i=0\n    while i<len(string):\n        if string[i] == letter:\n            return True\n        else:\n            i+=1\n    return False"}
{"submission_id":7032,"func_code":"def search(str, letter):\n    if letter in str:\n        return true\n    else:\n        return false","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='true', ctx=Load()))], orelse=[Return(value=Name(id='false', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        return true\n    else:\n        return false","n_lines":5,"__index_level_0__":1128,"repair":""}
{"submission_id":29051,"func_code":"def search(string, letter):\n    if letter not in string:\n        print('False')\n    else:\n        print('True')","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"4205f21d-1c6e-499a-a25c-83a2d9d5ad93","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if letter not in string:\n        print('False')\n    else:\n        print('True')","n_lines":5,"__index_level_0__":1129,"repair":"def search(string, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    found = False\n    for i in range(len(string)):\n        if string[i] == letter:\n            found = True\n            break\n    return found"}
{"submission_id":35022,"func_code":"def search(string, letter):\n    if letter not in string:\n        return 'False'\n    else:\n        return 'True'","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"a93c9eeb-104a-4436-bd9a-c2e65d311d9e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[Return(value=Constant(value='True'))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if letter not in string:\n        return 'False'\n    else:\n        return 'True'","n_lines":5,"__index_level_0__":1130,"repair":"def search(string, letter):\n    \"\"\"Iteratively search for a letter in a string\"\"\"\n    \n    found = False\n    \n    for char in string:\n        if char == letter:\n            found = True\n            return found\n            \n    return found"}
{"submission_id":17377,"func_code":"def search(letter):\n    str = input()\n    letter = input()\n    if letter in str:\n        print(True)\n    else:\n        print(false)","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='false', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(letter):\n    str = input()\n    letter = input()\n    if letter in str:\n        print(True)\n    else:\n        print(false)","n_lines":7,"__index_level_0__":1140,"repair":""}
{"submission_id":961,"func_code":"def search(letter):\n    str = input()\n    if letter in str:\n        print(True)\n    else:\n        print(false)","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='false', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(letter):\n    str = input()\n    if letter in str:\n        print(True)\n    else:\n        print(false)","n_lines":6,"__index_level_0__":1141,"repair":""}
{"submission_id":8404,"func_code":"def search(letter):\n    str = input()\n    if letter in str:\n        return True\n    else:\n        return false","assignment_id":"search_iter","func_name":"search","description":"Iteratively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Name(id='false', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def search(letter):\n    str = input()\n    if letter in str:\n        return True\n    else:\n        return false","n_lines":6,"__index_level_0__":1142,"repair":""}
{"submission_id":26503,"func_code":"def search(ls, val, na=0):\n    pos = len(ls)\n    if pos == len(ls):\n        return False\n    elif ls[pos] == val:\n        return True\n    else:\n        return search(ls, val, pos + 1)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val, na=0):\n    pos = len(ls)\n    if pos == len(ls):\n        return False\n    elif ls[pos] == val:\n        return True\n    else:\n        return search(ls, val, pos + 1)","n_lines":8,"__index_level_0__":1086,"repair":"def search(ls, val, na=0):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    pos = na\n    for c in val:\n\n        if pos == len(ls):\n            return False\n        elif ls[pos] == val:\n            return True\n        else:\n            return search(ls, val, pos + 1)"}
{"submission_id":33533,"func_code":"def search(ls, val, pos):\n    if pos == len(ls):\n        return False\n    elif ls[pos] == val:\n        return True\n    else:\n        return search(ls, val, pos + 1)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val, pos):\n    if pos == len(ls):\n        return False\n    elif ls[pos] == val:\n        return True\n    else:\n        return search(ls, val, pos + 1)","n_lines":7,"__index_level_0__":1087,"repair":""}
{"submission_id":6023,"func_code":"def search(str, letter):\n    i = 0\n    if len(str) == 0:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"1952771b-859e-46c9-8146-448dc8ef5870","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    if len(str) == 0:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        search(str[1:], letter)","n_lines":8,"__index_level_0__":1090,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if str == \"\":\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)"}
{"submission_id":15796,"func_code":"def search(str, letter):\n    i = 0\n    if letter == str[i]:\n        return 'True'\n    else:\n        return 'False'\n        i = i + 1","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False')), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    if letter == str[i]:\n        return 'True'\n    else:\n        return 'False'\n        i = i + 1","n_lines":7,"__index_level_0__":1091,"repair":"def search(str, letter):\n        \"\"\"Recursively search for a letter in a string\"\"\"\n        i = 0\n    \n        if letter in str:\n            return True\n        else:\n            return False"}
{"submission_id":37966,"func_code":"def search(str, letter):\n    i = 0\n    if letter == str[i]:\n        return 'True'\n    else:\n        return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    if letter == str[i]:\n        return 'True'\n    else:\n        return 'False'","n_lines":6,"__index_level_0__":1092,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    # base case\n    if letter in str:\n        return True\n    else:\n        return False"}
{"submission_id":8459,"func_code":"def search(word, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n        i = i + 1\n    return False","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","representative":"def search(word, letter):\n    i = 0\n    while i < len(ls):\n        if ls[i] == val:\n            return True\n        i = i + 1\n    return False","n_lines":7,"__index_level_0__":1093,"repair":"def search(word, letter):\n        \"\"\"Recursively search for a letter in a string\"\"\"\n        i = 0\n    \n        while i < len(word):\n            if word[i] == letter:\n                return True\n            i = i + 1\n        return False"}
{"submission_id":19931,"func_code":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return 'True'\n        i = i + 1\n    return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    i = 0\n    while i < len(str):\n        if str[i] == letter:\n            return 'True'\n        i = i + 1\n    return 'False'","n_lines":7,"__index_level_0__":1096,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in str:\n        return True\n    else:\n        return False"}
{"submission_id":37266,"func_code":"def search(string, letter):\n    if string == ' ':\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string == ' ':\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)","n_lines":7,"__index_level_0__":1106,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(string)==0:\n        return False\n    else:\n        if string[0]==letter:\n            return True\n        else:\n            return search(string[1:], letter)"}
{"submission_id":37986,"func_code":"def search(string, letter):\n    if string == '':\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string == '':\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)","n_lines":7,"__index_level_0__":1107,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":20083,"func_code":"def search(string, letter):\n    if string == []:\n        print('False')\n    elif string[0] == letter:\n        print('True')\n    else:\n        search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string == []:\n        print('False')\n    elif string[0] == letter:\n        print('True')\n    else:\n        search(string[1:], letter)","n_lines":7,"__index_level_0__":1108,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(string)==0:\n        return False\n    \n    if letter==string[0]:\n        return True\n    \n    return search(string[1:],letter)"}
{"submission_id":7638,"func_code":"def search(ls, val):\n    if ls == []:\n        return\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return()], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    if ls == []:\n        return\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","n_lines":7,"__index_level_0__":1109,"repair":"def search(ls, val):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(ls) == 0:\n        return False\n    else:\n        if val == ls[0]:\n            return True\n        else:\n            return search(ls[1:], val)"}
{"submission_id":10349,"func_code":"def search(string, letter):\n    if string == []:\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string == []:\n        return 'False'\n    elif string[0] == letter:\n        return 'True'\n    else:\n        search(string[1:], letter)","n_lines":7,"__index_level_0__":1110,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    \n    return False"}
{"submission_id":5977,"func_code":"def search(str, letter):\n    if str == []:\n        return 'False'\n    elif str[0] == letter:\n        return 'True'\n    else:\n        return search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str == []:\n        return 'False'\n    elif str[0] == letter:\n        return 'True'\n    else:\n        return search(str[1:], letter)","n_lines":7,"__index_level_0__":1111,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(str) == 0:\n        return False\n    else:\n        if str[0] == letter:\n            return True\n        else:\n            return search(str[1:], letter)"}
{"submission_id":21440,"func_code":"def search(str, letter):\n    if str == []:\n        return False\n    elif lstr[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='lstr', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str == []:\n        return False\n    elif lstr[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","n_lines":7,"__index_level_0__":1112,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter == \"\":\n        return False\n    \n    if letter in str:\n        return True\n    else:\n        return search(str, letter[1:])"}
{"submission_id":10160,"func_code":"def search(ls, letter):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, letter):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","n_lines":7,"__index_level_0__":1113,"repair":"def search(ls, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in ls:\n        return True\n    \n    elif letter == '':\n        return False\n    \n    else:\n        return False"}
{"submission_id":14875,"func_code":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == val:\n        return True\n    else:\n        return search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == val:\n        return True\n    else:\n        return search(str[1:], letter)","n_lines":7,"__index_level_0__":1114,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(str) == 0:\n        return False\n    else:\n        if str[0] == letter:\n            return True\n        else:\n            return search(str[1:], letter)"}
{"submission_id":24930,"func_code":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        search(str[1:], letter)","n_lines":7,"__index_level_0__":1115,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    found = False\n    for char in str:\n        if char == letter:\n            found = True\n            break\n    return found"}
{"submission_id":8931,"func_code":"def search(ls, val):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[0:], val)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[0:], val)","n_lines":7,"__index_level_0__":1116,"repair":"def search(ls, val):\n        \"\"\"Recursively search for a letter in a string\"\"\"\n        if ls == []:\n            return False\n    \n        for element in ls:\n            if element == val:\n                return True\n        return False"}
{"submission_id":9716,"func_code":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letters)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"d31360b5-795b-45df-bd6f-a99df2683eae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='letters', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str == []:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letters)","n_lines":7,"__index_level_0__":1117,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in str: return True\n    return False"}
{"submission_id":12925,"func_code":"def search(ls, val):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2d5a247c-29b2-4cc2-a956-669a2206edc8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    if ls == []:\n        return False\n    elif ls[0] == val:\n        return True\n    else:\n        return search(ls[1:], val)","n_lines":7,"__index_level_0__":1118,"repair":"def search(ls, val):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(ls)==0:\n        return False\n    else:\n        if ls[0]==val:\n            return True\n        else:\n            return search(ls[1:], val)"}
{"submission_id":18997,"func_code":"def search(ls, val):\n    if ls == []:\n        return -1\n    elif ls[0] == val:\n        return val\n    else:\n        return search(ls[1:], val)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(ls, val):\n    if ls == []:\n        return -1\n    elif ls[0] == val:\n        return val\n    else:\n        return search(ls[1:], val)","n_lines":7,"__index_level_0__":1119,"repair":"def search(ls, val):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if ls == None:\n        return False\n    else:\n        return ls.find(val) >= 0"}
{"submission_id":32661,"func_code":"def search(string, letter):\n    if letter == string:\n        return 'True'\n    else:\n        search(string[1:], letter)\n    return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if letter == string:\n        return 'True'\n    else:\n        search(string[1:], letter)\n    return 'False'","n_lines":6,"__index_level_0__":1120,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":13524,"func_code":"def search(str, letter):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'\n    i = 0\n    while i < len(str):\n        if str[i] == letter2:\n            return i\n        i += 1\n    return '-1'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"54e3b0c4-223a-427c-9155-d6954330319d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='letter2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'\n    i = 0\n    while i < len(str):\n        if str[i] == letter2:\n            return i\n        i += 1\n    return '-1'","n_lines":11,"__index_level_0__":1125,"repair":""}
{"submission_id":26856,"func_code":"def search(str, letter):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"7d0d82bd-2bdb-48da-a37f-ffa6ee59d960","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'","n_lines":5,"__index_level_0__":1126,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(str) == 0:\n        return False\n\n    if letter == str[0]:\n        return True\n    else:\n        return search(str[1:],letter)"}
{"submission_id":30226,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        print('False')\n        return search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[])), Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        print('False')\n        return search(string[1:], letter)","n_lines":6,"__index_level_0__":1131,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":28014,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n        print('False')","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n        print('False')","n_lines":6,"__index_level_0__":1132,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    index = string.find(letter)\n    if index == -1:\n        return False\n    else:\n        return True"}
{"submission_id":437,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    print('False')","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    print('False')","n_lines":6,"__index_level_0__":1133,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":36507,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    if letter not in string:\n        print('False')","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    if letter not in string:\n        print('False')","n_lines":7,"__index_level_0__":1134,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False\n    \n    if letter == string:\n        return True\n    else:\n        return False"}
{"submission_id":23027,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    if letter not in string:\n        return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    if letter not in string:\n        return 'False'","n_lines":7,"__index_level_0__":1135,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":32266,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return search(string[1:], letter)\n    return 'False'","n_lines":6,"__index_level_0__":1136,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    \n    else:\n        return False"}
{"submission_id":37789,"func_code":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return 'False'\n        return search(string[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False')), Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def search(string, letter):\n    if string[0] == letter:\n        return 'True'\n    else:\n        return 'False'\n        return search(string[1:], letter)","n_lines":6,"__index_level_0__":1137,"repair":"def search(string, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if letter in string:\n        return True\n    else:\n        return False"}
{"submission_id":34658,"func_code":"def search(str, letter):\n    if str[-1] != a:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='a', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str[-1] != a:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","n_lines":7,"__index_level_0__":1138,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(str) == 0:\n        return False\n    \n    if letter in str:\n        return True\n    \n    return search(str[1:], letter+str[0])"}
{"submission_id":24483,"func_code":"def search(str, letter):\n    if str[-1] != letter:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","representative":"def search(str, letter):\n    if str[-1] != letter:\n        return False\n    elif str[0] == letter:\n        return True\n    else:\n        return search(str[1:], letter)","n_lines":7,"__index_level_0__":1139,"repair":"def search(str, letter):\n    \"\"\"Recursively search for a letter in a string\"\"\"\n    \n    if len(str) == 0:\n        return False\n    else:\n        if letter == str[0]:\n            return True\n        else:\n            return search(str[1:], letter)"}
{"submission_id":30855,"func_code":"def search(str):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'","assignment_id":"search_recur","func_name":"search","description":"Recursively search for a letter in a string","test":"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True","correct":false,"user":"9413c2ae-94cc-4b45-8180-0919de97fe15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","representative":"def search(str):\n    if letter in str:\n        return 'True'\n    else:\n        return 'False'","n_lines":5,"__index_level_0__":1143,"repair":""}
{"submission_id":37962,"func_code":"def selection_sort(a, j, k):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        swap(a, i, j)\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_3', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a, j, k):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        swap(a, i, j)\n        i = i + 1","n_lines":10,"__index_level_0__":1144,"repair":""}
{"submission_id":10318,"func_code":"def selection_sort(a, i):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return p","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"6fb1b046-1d89-4162-8437-722d44e22f50","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a, i):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return p","n_lines":8,"__index_level_0__":1145,"repair":""}
{"submission_id":4668,"func_code":"def selection_sort(a, i):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a, i):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":7,"__index_level_0__":1146,"repair":""}
{"submission_id":6444,"func_code":"def selection_sort(a):\n    a = a.sorted()","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sorted', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    a = a.sorted()","n_lines":2,"__index_level_0__":1147,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length-1):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":19810,"func_code":"def selection_sort(a):\n    p = 0\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","n_lines":8,"__index_level_0__":1150,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    n = len(a)\n    for i in range(n):\n        for j in range(n-1,i,-1):\n            if a[j] < a[i]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":26975,"func_code":"def selection_sort(a):\n    p = 0\n    j = p + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = p + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","n_lines":8,"__index_level_0__":1151,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)):\n        p = i\n        j = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        a[p], a[i] = a[i], a[p]\n    \n    return a"}
{"submission_id":39906,"func_code":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = len(a) - 1 - i\n    while i < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = len(a) - 1 - i\n    while i < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","n_lines":9,"__index_level_0__":1152,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                temp = a[j]\n                a[j] = a[i]\n                a[i] = temp\n    return a"}
{"submission_id":18120,"func_code":"def selection_sort(a):\n    i = 0\n    j = 0\n    p = 0\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n    while i < len(a):\n        p = i\n        j = i + 1\n        smallest(a, j, p)\n        swap(a, i, p)\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='smallest', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    j = 0\n    p = 0\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n    while i < len(a):\n        p = i\n        j = i + 1\n        smallest(a, j, p)\n        swap(a, i, p)\n        i += 1","n_lines":17,"__index_level_0__":1153,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        j = 0\n    \n        while i < len(a):\n                j = i+1\n                while j < len(a) and a[j] < a[i]:\n                        a[j], a[i] = a[i], a[j]\n                        j += 1\n                i += 1\n        \n        return a"}
{"submission_id":39832,"func_code":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = 1\n    while i < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = 1\n    while i < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","n_lines":9,"__index_level_0__":1154,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length\/\/2):\n        min = i\n        for j in range(i+1, length):\n            if a[j] < a[min]:\n                min= j\n        a[i], a[min] = a[min], a[i]\n    return a"}
{"submission_id":36439,"func_code":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","n_lines":13,"__index_level_0__":1155,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a) - 1:\n            j = i + 1\n            \n            while j < len(a):\n                if a[j] < a[i]:\n                    a[i], a[j] = a[j], a[i]\n                j += 1\n            i += 1\n        return a"}
{"submission_id":40548,"func_code":"def selection_sort(a):\n    p = 0\n    j = 0\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 0\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","n_lines":8,"__index_level_0__":1156,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length\/\/2):\n        min_index = i\n        for j in range(i+1, length):\n            if a[min_index] > a[j]:\n                min_index = j\n        a[i], a[min_index] = a[min_index], a[i]\n    return a"}
{"submission_id":30429,"func_code":"def selection_sort(a):\n    i = 0\n    p = 1\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = 1\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","n_lines":9,"__index_level_0__":1157,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        p = 1\n        j = i + 1\n    \n        while j < len(a):\n            if a[j] < a[p]:\n                a[i],a[j] = a[j],a[i]\n                p += 1\n            j += 1\n        return a"}
{"submission_id":13576,"func_code":"def selection_sort(a):\n    i = 0\n    p = 1\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = 1\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":8,"__index_level_0__":1158,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    a.sort()\n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i]>a[j]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":10042,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n            a[j] = tmp\n            a[p] = a[j]\n            tmp = a[p]\n        j = j + 1\n        a[j] = tmp\n        a[p] = a[j]\n        tmp = a[p]\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n            a[j] = tmp\n            a[p] = a[j]\n            tmp = a[p]\n        j = j + 1\n        a[j] = tmp\n        a[p] = a[j]\n        tmp = a[p]\n    return a","n_lines":14,"__index_level_0__":1159,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    a.sort()\n    return a"}
{"submission_id":10406,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[j] = tmp\n        a[p] = a[j]\n        tmp = a[p]\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[j] = tmp\n        a[p] = a[j]\n        tmp = a[p]\n    return a","n_lines":11,"__index_level_0__":1160,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":35001,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","n_lines":12,"__index_level_0__":1161,"repair":""}
{"submission_id":25445,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","n_lines":8,"__index_level_0__":1162,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        min = i\n        for j in range(i, j + 1):\n            if a[j] < a[min]:\n                min = j\n        a[i], a[min] = a[min], a[i]\n        i = i + 1\n    return a"}
{"submission_id":19948,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":7,"__index_level_0__":1163,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                temp = a[j]\n                a[j] = a[i]\n                a[i] = temp\n    return a"}
{"submission_id":35316,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n    j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n    j = j + 1\n    return a","n_lines":8,"__index_level_0__":1164,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    l = len(a)\n    for i in range(l):\n        for j in range(i-1, 0, -1):\n            if a[j] < a[j-1]:\n                a[i], a[j-1] = a[j-1], a[i]\n    return a"}
{"submission_id":12992,"func_code":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n    j = j + 1\n    return p","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = 0\n    j = 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n    j = j + 1\n    return p","n_lines":8,"__index_level_0__":1165,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(length-1):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":21011,"func_code":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    i = i + 1\n    return a","n_lines":10,"__index_level_0__":1166,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    size = len(a)\n    for i in range(size-1):\n        for j in range(i+1, size):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":33470,"func_code":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return a","n_lines":9,"__index_level_0__":1167,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    a.sort()\n    for e in range(1, len(a)):\n        while len(a)>1 and a[0]>a[-1]:\n            a.insert(0, a.pop())\n    return a"}
{"submission_id":29541,"func_code":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":8,"__index_level_0__":1168,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(len(a)-i-1):\n            if a[j] >= a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a"}
{"submission_id":7302,"func_code":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c + 1\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c + 1\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","n_lines":13,"__index_level_0__":1169,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(length-1):\n        minimum = i\n        for j in range(i+1, length):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i], a[minimum] = a[minimum], a[i]\n    return a"}
{"submission_id":38874,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i + 1\n        j = p\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i + 1\n        j = p\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","n_lines":13,"__index_level_0__":1170,"repair":""}
{"submission_id":3651,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = find_smallest_position(a, i)\n        swap(a, i, p)\n        i = i + 1\n        return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"8487432c-a440-40f5-afcb-ad0e762b9edb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='find_smallest_position', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = find_smallest_position(a, i)\n        swap(a, i, p)\n        i = i + 1\n        return a","n_lines":7,"__index_level_0__":1171,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length\/\/2):\n        min = i\n        for j in range(i+1, length):\n            if a[j] < a[min]:\n                min = j\n        a[i], a[min] = a[min], a[i]\n    return a"}
{"submission_id":32331,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = find_smallest_position(a, i)\n        swap(a, i, p)\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"48db4273-a21e-41be-bca6-9b6444a15cbf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='find_smallest_position', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = find_smallest_position(a, i)\n        swap(a, i, p)\n        i = i + 1","n_lines":6,"__index_level_0__":1172,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    a.sort()\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":3505,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        if a[p] < a[j]:\n            p = j\n        j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        if a[p] < a[j]:\n            p = j\n        j = j + 1\n        i = i + 1","n_lines":9,"__index_level_0__":1173,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    if len(a)==1:\n        return a\n    \n    for i in range(len(a)-1):\n        min_index=i\n        for j in range(i+1, len(a)):\n            if a[j]<a[min_index]:\n                min_index=j\n        a[i],a[min_index] = a[min_index],a[i]\n    return a"}
{"submission_id":39878,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n        i = i + 1","n_lines":9,"__index_level_0__":1174,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    j = len(a)-1\n    k = j\n    while i < k:\n        while j >= 0 and a[j] < a[i]:\n            a[i],a[j] = a[j],a[i]\n            j = j - 1\n        i = i + 1\n    return a"}
{"submission_id":18441,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        i = i + 1","n_lines":10,"__index_level_0__":1175,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length):\n        minimum = i\n        for j in range(i+1, length):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i], a[minimum] = a[minimum], a[i]\n    return a"}
{"submission_id":14642,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        smallest = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[smallest]:\n                smallest = j\n            j = j + 1\n        tmp = a[0]\n        a[0] = a[smallest]\n        a[smallest] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"536d6075-5a50-4346-89ff-5e21df057756","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        smallest = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[smallest]:\n                smallest = j\n            j = j + 1\n        tmp = a[0]\n        a[0] = a[smallest]\n        a[smallest] = tmp\n        i = i + 1","n_lines":13,"__index_level_0__":1176,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    i=0\n    j=len(a)-1\n    while i<j:\n        if a[i] > a[j]:\n            temp = a[i]\n            a[i] = a[j]\n            a[j] = temp\n            \n        i=i+1\n        j=j-1\n        \n    return a"}
{"submission_id":17583,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","n_lines":13,"__index_level_0__":1177,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    l = len(a)\n    for i in range(l):\n        j = i\n        while j>0 and a[j-1]>a[j]:\n            a[j],a[j-1] = a[j-1],a[j]\n            j -= 1\n    return a"}
{"submission_id":17416,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"30a4c165-17bc-4bdf-a096-e2a252a403eb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1","n_lines":9,"__index_level_0__":1178,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                temp = a[j]\n                a[j] = a[i]\n                a[i] = temp\n    return a"}
{"submission_id":16022,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"05bc0114-9d34-4210-bb9b-07af403e11ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = 0\n        j = 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1179,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    \n    for i in range(length-1):\n        minimum = i\n        for j in range(i+1, length):\n            if a[j] < a[minimum]:\n                minimum = j\n        \n        a[i], a[minimum] = a[minimum], a[i]\n        \n    return a"}
{"submission_id":6791,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[p] > a[j]:\n                p = j\n            j += 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"36685ead-53f8-40af-a908-4c048278dc6b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[p] > a[j]:\n                p = j\n            j += 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1180,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    while i < len(a):\n        min = i\n        for j in range(i+1, len(a)):\n            if a[j] < a[min]:\n                min = j\n        a[min], a[i] = a[i], a[min]\n        i += 1\n    return a"}
{"submission_id":38600,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] > a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"8d21baf9-a7ac-4132-92e0-a1002f0c04a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] > a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1\n    return a","n_lines":14,"__index_level_0__":1181,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n    \n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j += 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i += 1\n        return a"}
{"submission_id":20705,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = i\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"85db1d22-a87d-4132-bd9a-e07bf9282015","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = i\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j = j + 1\n        i = i + 1","n_lines":13,"__index_level_0__":1182,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                temp = a[j]\n                a[j] = a[i]\n                a[i] = temp\n    return a"}
{"submission_id":17515,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = i\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j += 1\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"16011fd4-f5e2-4c2c-b014-86692ff746d5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = i\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j += 1\n        i += 1","n_lines":13,"__index_level_0__":1183,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    length = len(a)\n    while i < length:\n        min_index = i\n        for j in range(i+1, length):\n            if a[min_index] > a[j]:\n                min_index = j\n        a[i],a[min_index] = a[min_index],a[i]\n        i += 1\n    return a"}
{"submission_id":33879,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            i = i + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            i = i + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1184,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n    \n            while j < len(a) and a[j] < a[i]:\n                j = j + 1\n                i = i + 1\n            tmp = a[i]\n            a[i] = a[p]\n            a[p] = tmp\n            i = i + 1\n        return a"}
{"submission_id":19177,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            i = i + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            i = i + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1185,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n            while j < len(a):\n    \n                if a[j] < a[p]:\n                    p = j\n                j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n        return a"}
{"submission_id":919,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"8487432c-a440-40f5-afcb-ad0e762b9edb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n    return a","n_lines":14,"__index_level_0__":1186,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n    \n            min = i\n            for j in range(i+1, len(a)):\n                if a[j] < a[min]:\n                    min = j\n            a[i], a[min] = a[min], a[i]\n            i+=1\n        return a"}
{"submission_id":3517,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        i = i + 1\n    return a","n_lines":11,"__index_level_0__":1187,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length\/\/2):\n        minimum = i\n        for j in range(i+1, length):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i], a[minimum] = a[minimum], a[i]\n    return a"}
{"submission_id":12264,"func_code":"def selection_sort(a):\n    j = 0\n    while j < len(a):\n        p = j\n        i = j + 1\n        while i < len(a):\n            if a[i] < a[p]:\n                p = i\n            i = i + 1\n        tmp = a[j]\n        a[j] = a[p]\n        a[p] = tmp\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"05bf8435-64be-48cb-be81-139956827989","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    j = 0\n    while j < len(a):\n        p = j\n        i = j + 1\n        while i < len(a):\n            if a[i] < a[p]:\n                p = i\n            i = i + 1\n        tmp = a[j]\n        a[j] = a[p]\n        a[p] = tmp\n        j = j + 1","n_lines":13,"__index_level_0__":1188,"repair":""}
{"submission_id":33808,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n        print(a[i])\n        return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"50aef720-52de-4735-8874-78f5a311b939","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n        print(a[i])\n        return a","n_lines":15,"__index_level_0__":1189,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n    \n        return a"}
{"submission_id":39736,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n        return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"50aef720-52de-4735-8874-78f5a311b939","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n        return a","n_lines":14,"__index_level_0__":1190,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n    \n        return a"}
{"submission_id":41472,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return i","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"3d2a254e-7beb-402f-8a24-1414f9d11b3c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return i","n_lines":14,"__index_level_0__":1191,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(length):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                temp = a[i]\n                a[i] = a[j]\n                a[j] = temp\n    \n    return a"}
{"submission_id":8607,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1","n_lines":13,"__index_level_0__":1192,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    n = len(a)\n    for i in range(n-1):\n        min_index = i\n        for j in range(i+1, n):\n            if a[min_index] > a[j]:\n                min_index = j\n        a[i], a[min_index] = a[min_index], a[i]\n    return a"}
{"submission_id":37996,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        print(a)","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"50aef720-52de-4735-8874-78f5a311b939","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        print(a)","n_lines":13,"__index_level_0__":1193,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":39315,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        print(a[i])\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"50aef720-52de-4735-8874-78f5a311b939","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        print(a[i])\n        i = i + 1","n_lines":14,"__index_level_0__":1194,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":13669,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n    i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n    i = i + 1","n_lines":13,"__index_level_0__":1195,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a) - 1:\n                min_pos = i\n                min_val = a[i]\n                for j in range(i+1, len(a)):\n                        curr = a[j]\n                        if curr < min_val:\n                                min_pos = j\n                                min_val = curr\n                a[min_pos], a[i] = a[i], a[min_pos]\n                i += 1\n        return a"}
{"submission_id":27635,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"03ce4b42-26f0-456c-9d48-18c0d16bec55","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        a[i] = tmp\n        a[p] = a[i]\n        tmp = a[p]\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1196,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j]<a[i]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":11397,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1\n    return a","n_lines":18,"__index_level_0__":1197,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    j = i + 1\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n        j = i + 1\n        while j < len(a):\n            print(a[j])\n            j += 1\n        i = i + 1\n    return a"}
{"submission_id":35372,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    return a","n_lines":10,"__index_level_0__":1198,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n    \n            while j < len(a):\n                if a[j] < a[p]:\n                    a[i], a[j] = a[j], a[i]\n                j += 1\n            i += 1\n    \n        return a"}
{"submission_id":1454,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    return p","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"6fb1b046-1d89-4162-8437-722d44e22f50","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n    return p","n_lines":10,"__index_level_0__":1199,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i]>a[j]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":13472,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"553c9a10-8e3d-401b-8100-2094287197ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1200,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    n = len(a)\n    while i<n:\n        minimum = i\n        for j in range(i+1,n):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i], a[minimum] = a[minimum], a[i]\n        i += 1\n    return a"}
{"submission_id":5064,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"05bc0114-9d34-4210-bb9b-07af403e11ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1201,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length):\n        minimum = i\n        for j in range(i+1,length):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i],a[minimum] = a[minimum],a[i]\n    return a"}
{"submission_id":11142,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        a[i], a[j] = a[j], a[i]\n        i += 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"85db1d22-a87d-4132-bd9a-e07bf9282015","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        a[i], a[j] = a[j], a[i]\n        i += 1\n    return a","n_lines":12,"__index_level_0__":1202,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = i + 1\n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j += 1\n    \n            a[i], a[p] = a[p], a[i]\n            i += 1\n        return a"}
{"submission_id":7687,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n        j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"6a72520c-4c39-4c03-b7cf-5550dbde3147","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n        j = j + 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1203,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n    \n            for j in range(i, len(a)):\n                if a[j] < a[p]:\n                    p = j\n            j = j + 1\n            tmp = a[p]\n            a[p] = a[i]\n            a[i] = tmp\n            i = i + 1\n        return a"}
{"submission_id":9112,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j = j + 1\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                tmp = a[p]\n                a[p] = a[j]\n                a[j] = tmp\n            j = j + 1\n        i = i + 1","n_lines":12,"__index_level_0__":1204,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a):\n                j = i\n                while j > 0:\n                        if a[j] < a[j-1]:\n                                a[j], a[j-1] = a[j-1], a[j]\n                        j = j-1\n                i = i+1\n        return a"}
{"submission_id":16367,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1\n    return a","n_lines":18,"__index_level_0__":1205,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            min_index = i\n            for j in range(i+1, len(a)):\n                if a[j] < a[min_index]:\n                    min_index = j\n            \n            a[i], a[min_index] = a[min_index], a[i]\n            i+=1\n    \n        return a"}
{"submission_id":5044,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[p]\n    a[p] = a[i]\n    a[i] = tmp\n    i = i + 1","n_lines":13,"__index_level_0__":1206,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    for i in range(length):\n        minimum = i\n        for j in range(i+1, length):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i],a[minimum] = a[minimum],a[i]\n    return a"}
{"submission_id":38844,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[smal]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"4a7eb3c1-23d7-4547-a3af-8d940245a9a3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='smal', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[smal]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1207,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":9600,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = p + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        a_tmp = a[p]\n        a[p] = a[i]\n        a[i] = a_tmp\n        i = i + 1\n    z = 0\n    while z < len(a):\n        print(a[z])\n        z = z + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = p + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        a_tmp = a[p]\n        a[p] = a[i]\n        a[i] = a_tmp\n        i = i + 1\n    z = 0\n    while z < len(a):\n        print(a[z])\n        z = z + 1","n_lines":17,"__index_level_0__":1208,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = i\n            j = p + 1\n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j = j + 1\n            a_tmp = a[p]\n            a[p] = a[i]\n            a[i] = a_tmp\n            i = i + 1\n        z = 0\n    \n        return a"}
{"submission_id":847,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[small]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[small]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1\n    i = 0\n    while i < len(a):\n        print(a[i])\n        i += 1","n_lines":17,"__index_level_0__":1209,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            small = i\n            j = small + 1\n            while j < len(a):\n                if a[j] < a[small]:\n                    small = j\n                j += 1\n            tmp = a[small]\n            a[small] = a[i]\n            a[i] = tmp\n            i += 1\n    \n        \n        return a"}
{"submission_id":23832,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[small]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        small = i\n        j = small + 1\n        while j < len(a):\n            if a[j] < a[small]:\n                small = j\n            j += 1\n        tmp = a[small]\n        a[small] = a[i]\n        a[i] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1210,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(length-1):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n                \n    return a"}
{"submission_id":38845,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = j + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = i\n        j = j + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j += 1\n        tmp = a[p]\n        a[p] = a[i]\n        a[i] = tmp\n        i += 1","n_lines":13,"__index_level_0__":1211,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    swap = a.copy()\n    swap.sort()\n    return swap"}
{"submission_id":15691,"func_code":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","n_lines":13,"__index_level_0__":1212,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        minimum = i\n        for j in range(i+1, len(a)):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[i],a[minimum] = a[minimum],a[i]\n    return a"}
{"submission_id":34224,"func_code":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            i += 1\n        z = a[p]\n        a[p] = a[c]\n        a[c] = z\n        c += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] > a[i]:\n                p = i\n            i += 1\n        z = a[p]\n        a[p] = a[c]\n        a[c] = z\n        c += 1","n_lines":13,"__index_level_0__":1213,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":21995,"func_code":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] < a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    c = 0\n    while c < len(a):\n        i = c\n        p = c\n        while i < len(a):\n            if a[p] < a[i]:\n                p = i\n            z = a[p]\n            a[p] = a[c]\n            a[c] = z\n            i += 1\n        c += 1","n_lines":13,"__index_level_0__":1214,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        c = 0\n    \n        while c < len(a):\n            j = c\n            k = c\n            for i in range(j+1, len(a)):\n                if a[i] < a[j]:\n                    a[i], a[j] = a[j], a[i]\n                    k = j\n            c += 1\n        return a"}
{"submission_id":8234,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        smallest = i\n        j = i\n        while j < len(a):\n            if a[smallest] > a[j]:\n                smallest = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[smallest]\n        a[smallest] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"f565987c-8fbf-4b95-b405-cf1a3ccac8f5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        smallest = i\n        j = i\n        while j < len(a):\n            if a[smallest] > a[j]:\n                smallest = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[smallest]\n        a[smallest] = tmp\n        i = i + 1","n_lines":13,"__index_level_0__":1215,"repair":""}
{"submission_id":33983,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1216,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            j = i\n            k = i\n            while k < len(a):\n    \n                if a[k] < a[j]:\n                    j = j + 1\n                    k = j\n                k = k + 1\n            tmp = a[i]\n            a[i] = a[j]\n            a[j] = tmp\n            i = i + 1\n        return a"}
{"submission_id":25851,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        j = i\n        while j < len(a):\n            if a[i] > a[j]:\n                tmp = a[i]\n                a[i] = a[j]\n                a[j] = tmp\n            j += 1\n        i += 1\n        return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"d030c365-0c70-41fc-bf99-b5270c6b8c31","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        j = i\n        while j < len(a):\n            if a[i] > a[j]:\n                tmp = a[i]\n                a[i] = a[j]\n                a[j] = tmp\n            j += 1\n        i += 1\n        return a","n_lines":12,"__index_level_0__":1217,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    i = 0\n    while i < len(a):\n        j = i\n        while j > 0 and a[j] < a[j - 1]:\n            a[j], a[j - 1] = a[j - 1], a[j]\n            j -= 1\n        i += 1\n    return a"}
{"submission_id":11496,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1218,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            p = i\n            j = i + 1\n            while j < len(a):\n                if a[j] < a[p]:\n                    p = j\n                j = j + 1\n            tmp = a[i]\n            a[i] = a[p]\n            a[p] = tmp\n            i = i + 1\n        return a"}
{"submission_id":32461,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = a[i]\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i + 1\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = a[i]\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1219,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n    \n        while i < len(a):\n            j = i\n            tmp = a[i]\n            while j > 0 and tmp < a[j - 1]:\n                a[j] = a[j - 1]\n                j = j - 1\n            a[j] = tmp\n            i = i + 1\n        return a"}
{"submission_id":20804,"func_code":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = a[i]\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0\n    while i < len(a):\n        p = a[i]\n        j = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = a[i]\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1220,"repair":"def selection_sort(a):\n        \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n        i = 0\n        while i < len(a):\n            p = a[i]\n            j = i\n    \n            while j < len(a):\n                if a[j] < p:\n                    a[i],a[j] = a[j],a[i]\n                j += 1\n            i += 1\n        return a"}
{"submission_id":6180,"func_code":"def selection_sort(a):\n    i = 0","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"539a3d07-c706-42ed-bbbe-db66980d170f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 0","n_lines":2,"__index_level_0__":1221,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i]>a[j]:\n                temp = a[i]\n                a[i]=a[j]\n                a[j]=temp\n\n    return a"}
{"submission_id":32631,"func_code":"def selection_sort(a):\n    i = 1\n    while i < len(a):\n        smallest = i\n        j = i + 1\n        while j < len(a):\n            if a[i] < a[smallest]:\n                smallest = i\n            j = j + 1\n        temp = a[i]\n        a[i] = a[j]\n        a[j] = temp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = 1\n    while i < len(a):\n        smallest = i\n        j = i + 1\n        while j < len(a):\n            if a[i] < a[smallest]:\n                smallest = i\n            j = j + 1\n        temp = a[i]\n        a[i] = a[j]\n        a[j] = temp\n        i = i + 1","n_lines":13,"__index_level_0__":1222,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                temp = a[j]\n                a[j] = a[i]\n                a[i] = temp\n                \n    return a"}
{"submission_id":6765,"func_code":"def selection_sort(a):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return p","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"6fb1b046-1d89-4162-8437-722d44e22f50","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    return p","n_lines":8,"__index_level_0__":1223,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    \n    for i in range(length):\n        for j in range(i+1, length):\n            if a[j] < a[i]:\n                a[i],a[j] = a[j],a[i]\n    return a"}
{"submission_id":36174,"func_code":"def selection_sort(a):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":7,"__index_level_0__":1224,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    n = len(a)\n    \n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    \n    return a"}
{"submission_id":27077,"func_code":"def selection_sort(a):\n    i = p\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    i = p\n    p = i\n    j = i + 1\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1","n_lines":8,"__index_level_0__":1225,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    n = len(a)\n    for i in range(n\/\/2):\n        min_index = i\n        for j in range(i+1,n):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[i],a[min_index] = a[min_index],a[i]\n    return a"}
{"submission_id":38685,"func_code":"def selection_sort(a):\n    a.sort()","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    a.sort()","n_lines":2,"__index_level_0__":1226,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    for i in range(length-1):\n        for j in range(i+1,length):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    return a"}
{"submission_id":34935,"func_code":"def selection_sort(a):\n    import func_reverse\n    i = 0\n    while i < len(a):\n        j = i\n        while j < len(a):\n            if a[j] < a[i]:\n                swap(a, i, j)\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"9e8689c2-5967-4244-adc0-65049ce12be4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_1')]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    import func_reverse\n    i = 0\n    while i < len(a):\n        j = i\n        while j < len(a):\n            if a[j] < a[i]:\n                swap(a, i, j)\n        i = i + 1","n_lines":9,"__index_level_0__":1227,"repair":""}
{"submission_id":2619,"func_code":"def selection_sort(a):\n    while i < len(a):\n        j = i + 1\n        i = 0\n        p = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    while i < len(a):\n        j = i + 1\n        i = 0\n        p = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        tmp = a[i]\n        a[i] = a[p]\n        a[p] = tmp\n        i = i + 1\n    return a","n_lines":14,"__index_level_0__":1228,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    length = len(a)\n    while length > 1:\n        j = length\n        i = 0\n        p = i\n        while j < len(a):\n            if a[j] < a[p]:\n                p = j\n            j = j + 1\n        if p > i:\n            tmp = a[i]\n            a[i] = a[p]\n            a[p] = tmp\n            i = i + 1\n        length = length - 1\n    return a"}
{"submission_id":35544,"func_code":"def selection_sort(a):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        tmp = a[i]\n        a[i] = a[j]\n        a[j] = tmp\n        i = i + 1","n_lines":12,"__index_level_0__":1229,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    length = len(a)\n    \n    for i in range(length-1):\n        min_index = i\n        for j in range(i+1, length):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[min_index], a[i] = a[i], a[min_index]\n    return a"}
{"submission_id":39018,"func_code":"def selection_sort(a):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        swap(a, i, j)\n        i = i + 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"82c933c3-be69-41b5-9530-1fe384a7f993","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    while i < len(a):\n        j = i\n        k = i\n        while k < len(a):\n            if a[j] > a[k]:\n                k = j\n            k = k + 1\n        swap(a, i, j)\n        i = i + 1","n_lines":10,"__index_level_0__":1230,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    # Move minimum of remaining sublist to front.\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    \n    return a"}
{"submission_id":35401,"func_code":"def selection_sort(a):\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        smallest(a, j, p)\n        swap(a, i, p)\n        i += 1","assignment_id":"selection_sort","func_name":"selection_sort","description":"Sort a list by repeatedly move minimimum of remaining sublist to front.","test":"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='smallest', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_3', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def selection_sort(a):\n    while j < len(a):\n        if a[j] < a[p]:\n            p = j\n        j = j + 1\n    tmp = a[i]\n    a[i] = a[j]\n    a[j] = tmp\n    i = 0\n    while i < len(a):\n        p = i\n        j = i + 1\n        smallest(a, j, p)\n        swap(a, i, p)\n        i += 1","n_lines":15,"__index_level_0__":1231,"repair":"def selection_sort(a):\n    \"\"\"Sort a list by repeatedly move minimimum of remaining sublist to front.\"\"\"\n    \n    for i in range(len(a)-1):\n        for j in range(len(a)-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n\n    return a"}
{"submission_id":19603,"func_code":"def sumup(n):\n    n = n(n + 1) \/ 2\n    return n","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    n = n(n + 1) \/ 2\n    return n","n_lines":3,"__index_level_0__":1233,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    total=0\n    for i in range(1,n+1):\n        total+=i\n    return total"}
{"submission_id":13319,"func_code":"def sumup(x):\n    x = x + sumup(x)\n    return x","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sumup(x):\n    x = x + sumup(x)\n    return x","n_lines":3,"__index_level_0__":1234,"repair":"def sumup(x):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum=0\n    while x>=0:\n        sum+=x\n        x-=1\n    return sum"}
{"submission_id":24573,"func_code":"def sumup(n):\n    n = int(n)\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        print(n)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    n = int(n)\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        print(n)","n_lines":6,"__index_level_0__":1236,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    while n > 0:\n        sum += n\n        n = n - 1\n    return sum"}
{"submission_id":36152,"func_code":"def sumup(n):\n    n = int(n)\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        return n","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    n = int(n)\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        return n","n_lines":6,"__index_level_0__":1237,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        n = int(n)\n        if n > 0:\n    \n            return n + sumup(n-1)\n        else:\n            return n"}
{"submission_id":16913,"func_code":"def sumup(n):\n    a = n(n + 1) \/ 2\n    return a","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    a = n(n + 1) \/ 2\n    return a","n_lines":3,"__index_level_0__":1238,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s"}
{"submission_id":4514,"func_code":"def sumup(n):\n    sum = 0\n    for x in range(0, n):\n        sum += x\n    return sum","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"71d3efb1-0433-44ad-83f0-224949653177","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    sum = 0\n    for x in range(0, n):\n        sum += x\n    return sum","n_lines":5,"__index_level_0__":1239,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum=0\n    for x in range(1,n+1):\n        sum+=x\n    return sum"}
{"submission_id":37109,"func_code":"def sumup(n):\n    total = 0\n    for i in range(n):\n        total + i\n    return total + n","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    total = 0\n    for i in range(n):\n        total + i\n    return total + n","n_lines":5,"__index_level_0__":1240,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        total = 0\n        for i in range(n):\n    \n            total += i\n        return total + n"}
{"submission_id":4839,"func_code":"def sumup(n):\n    total = [int(i) for i in range(0, n)]\n    return sum(total)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    total = [int(i) for i in range(0, n)]\n    return sum(total)","n_lines":3,"__index_level_0__":1241,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum"}
{"submission_id":34113,"func_code":"def sumup(n):\n    print(n)\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    print(n)\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","n_lines":6,"__index_level_0__":1242,"repair":""}
{"submission_id":33612,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return n(n + 1) \/ 2","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2)))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return n(n + 1) \/ 2","n_lines":5,"__index_level_0__":1243,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum"}
{"submission_id":38318,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return n + sumup(n - 1)","n_lines":5,"__index_level_0__":1244,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if int(n) == 0:\n    \n            return 0\n        else:\n            return n + sumup(n - 1)"}
{"submission_id":10683,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return int(n(n + 1) \/ 2)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return int(n(n + 1) \/ 2)","n_lines":5,"__index_level_0__":1245,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    s = 0\n    while n>0:\n        s += n\n        n -= 1\n    return s"}
{"submission_id":32865,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return sumup(n + 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    else:\n        return sumup(n + 1)","n_lines":5,"__index_level_0__":1246,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total"}
{"submission_id":4338,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return '0'\n    return n + sumup(n - 1)","n_lines":4,"__index_level_0__":1247,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n<0:\n            return '0'\n        return n + sumup(n - 1)"}
{"submission_id":19212,"func_code":"def sumup(n):\n    if int(n) == 0:\n        return 0\n    return n + sumup(n + 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0412928d-97c6-46f2-980b-7d98214b9765","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if int(n) == 0:\n        return 0\n    return n + sumup(n + 1)","n_lines":4,"__index_level_0__":1248,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if int(n) == 0:\n            return 0\n    \n        return int(n) + sumup(n-1)"}
{"submission_id":28275,"func_code":"def sumup(N):\n    if n == 0:\n        return 0\n    return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"1ea53a09-863b-4396-bbe3-e75221238368","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(N):\n    if n == 0:\n        return 0\n    return n + sumup(n - 1)","n_lines":4,"__index_level_0__":1249,"repair":"def sumup(N):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    s = 0\n    while N > 0:\n        s += N\n        N -= 1\n    return s"}
{"submission_id":30728,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return n * sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return n * sumup(n - 1)","n_lines":6,"__index_level_0__":1250,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    while n:\n        sum += n\n        n -= 1\n    return sum"}
{"submission_id":27469,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    else:\n        return n * sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    else:\n        return n * sumup(n - 1)","n_lines":5,"__index_level_0__":1251,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total"}
{"submission_id":16556,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    n = n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    n = n + sumup(n - 1)","n_lines":4,"__index_level_0__":1252,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return n+sumup(n-1)"}
{"submission_id":40764,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    sum_to_n_minus_1 = sumup(n - 1)\n    return n + sum_to_n_minus_","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"d05025fd-0a14-4010-acb6-dea38896a651","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='sum_to_n_minus_', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    sum_to_n_minus_1 = sumup(n - 1)\n    return n + sum_to_n_minus_","n_lines":5,"__index_level_0__":1253,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return sumup(n-1) + n"}
{"submission_id":9335,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + (n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + (n - 1)","n_lines":4,"__index_level_0__":1254,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return sumup(n - 1) + n"}
{"submission_id":14857,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sum(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0d8d49aa-e213-4ab4-bcc1-440a0397585c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sum(n - 1)","n_lines":4,"__index_level_0__":1255,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return n+sumup(n-1)"}
{"submission_id":557,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sum_up_to(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"7eb02a08-e561-4e33-a415-6df6cc4ff4a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum_up_to', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sum_up_to(n - 1)","n_lines":4,"__index_level_0__":1256,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return sumup(n-1)+n"}
{"submission_id":1457,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sumup(n)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"9ae0539b-3842-4209-9c3e-252c74db087e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return n + sumup(n)","n_lines":4,"__index_level_0__":1257,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return n + sumup(n-1)"}
{"submission_id":24957,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return n - sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return n - sumup(n - 1)","n_lines":4,"__index_level_0__":1258,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return n + sumup(n-1)"}
{"submission_id":23069,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    return sumup(n + (n - 1))","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    return sumup(n + (n - 1))","n_lines":4,"__index_level_0__":1259,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    while n:\n        sum += n\n        n = n - 1\n    return sum"}
{"submission_id":27724,"func_code":"def sumup(n):\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 1\n    else:\n        return n * sumup(n - 1)","n_lines":5,"__index_level_0__":1260,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    ans = 0\n    while n > 0:\n        ans += n\n        n -= 1\n    return ans"}
{"submission_id":13558,"func_code":"def sumup(n):\n    if n == 0:\n        return 1\n    sum_to_n_1 = sumup(n - 1)\n    return n + sum_to_n_1","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 1\n    sum_to_n_1 = sumup(n - 1)\n    return n + sum_to_n_1","n_lines":5,"__index_level_0__":1261,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        sum_to_n_1 = sumup(n - 1)\n        return n + sum_to_n_1"}
{"submission_id":34542,"func_code":"def sumup(n):\n    if n == 0:\n        return 1\n    return n + (n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 1\n    return n + (n - 1)","n_lines":4,"__index_level_0__":1262,"repair":""}
{"submission_id":37334,"func_code":"def sumup(n):\n    if n == 0:\n        return 1\n    return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"2f42085d-bb24-498f-9d99-42137e03966f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 1\n    return n + sumup(n - 1)","n_lines":4,"__index_level_0__":1263,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n<0:\n            return 1\n        return n + sumup(n - 1)"}
{"submission_id":37872,"func_code":"def sumup(n):\n    if n == 0:\n        return n\n    return n + (n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return n\n    return n + (n - 1)","n_lines":4,"__index_level_0__":1264,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return n\n    \n        return n + sumup(n-1)"}
{"submission_id":13203,"func_code":"def sumup(n):\n    if n == 0:\n        return n\n    return n + sum(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return n\n    return n + sum(n - 1)","n_lines":4,"__index_level_0__":1265,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return n\n    \n        return sumup(n-1)+n"}
{"submission_id":22368,"func_code":"def sumup(n):\n    if n == 1:\n        return\n    sum_to_n = sumup(n - 1)\n    return n + sum_to_n","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return\n    sum_to_n = sumup(n - 1)\n    return n + sum_to_n","n_lines":5,"__index_level_0__":1266,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n == 0:\n        return 0\n    else:\n        sum_to_n = sumup(n - 1)\n        return n + sum_to_n"}
{"submission_id":4141,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sumup(n - 1)","n_lines":5,"__index_level_0__":1267,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n + sumup(n-1)"}
{"submission_id":17271,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    else:\n        return n * sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    else:\n        return n * sumup(n - 1)","n_lines":5,"__index_level_0__":1268,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    return sum"}
{"submission_id":40861,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    n = n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"3386630d-db39-4134-a4bb-b4908e2b7522","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    n = n + sumup(n - 1)","n_lines":4,"__index_level_0__":1269,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum"}
{"submission_id":34387,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    sum_to_n_1 = sumup(n - 1)\n    return n + sum_to_n_1","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"0d8d49aa-e213-4ab4-bcc1-440a0397585c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    sum_to_n_1 = sumup(n - 1)\n    return n + sum_to_n_1","n_lines":5,"__index_level_0__":1270,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n == 0:\n        return 0\n    else:\n        sum_to_n_1 = sumup(n - 1)\n        return n + sum_to_n_1"}
{"submission_id":24314,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + (n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + (n - 1)","n_lines":4,"__index_level_0__":1271,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 1:\n            return 1\n    \n        return n*(n+1)\/\/2"}
{"submission_id":26000,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sum(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sum(n - 1)","n_lines":4,"__index_level_0__":1272,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 1:\n            return 1\n    \n        return n*(n+1)\/2"}
{"submission_id":14062,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sumup(n + 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"ebcb6801-87f5-4fa5-b252-f89ccb02603a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sumup(n + 1)","n_lines":4,"__index_level_0__":1273,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    ans = 0\n    while n:\n        ans += n\n        n -= 1\n    return ans"}
{"submission_id":15788,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"a758f933-ec7a-444d-b3d2-f685ac9d9563","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return n + sumup(n - 1)","n_lines":4,"__index_level_0__":1274,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 1:\n            return 1\n    \n        return sum(range(n+1))"}
{"submission_id":35581,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return n - sum(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return n - sum(n - 1)","n_lines":4,"__index_level_0__":1275,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 1:\n            return 1\n    \n        return n*(n+1)\/2"}
{"submission_id":23177,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    return sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"60b76a41-ddf8-4d27-a286-8da8c4e298cd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    return sumup(n - 1)","n_lines":4,"__index_level_0__":1276,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s"}
{"submission_id":10439,"func_code":"def sumup(n):\n    if n == 1:\n        return n\n    return n + (n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return n\n    return n + (n - 1)","n_lines":4,"__index_level_0__":1277,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum"}
{"submission_id":6333,"func_code":"def sumup(n):\n    if n == 1:\n        return n\n    return n + sumup(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"8d21baf9-a7ac-4132-92e0-a1002f0c04a9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return n\n    return n + sumup(n - 1)","n_lines":4,"__index_level_0__":1278,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n==0:\n        return 0\n    else:\n        if n == 1:\n            return n\n        return n + sumup(n - 1)"}
{"submission_id":35511,"func_code":"def sumup(n):\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        print(n)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"a998fa29-b3b1-437f-9555-da670b1ae43b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n > 0:\n        n = n + sumup(n - 1)\n    else:\n        print(n)","n_lines":5,"__index_level_0__":1279,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    s=0\n    for i in range(1, n+1):\n        s+=i\n    return s"}
{"submission_id":33553,"func_code":"def sumup(n):\n    if n < 2:\n        return 1\n    sum_to_n = sumup(n - 1)\n    return n + sum_to_n","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n < 2:\n        return 1\n    sum_to_n = sumup(n - 1)\n    return n + sum_to_n","n_lines":5,"__index_level_0__":1280,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    \n    if n == 0:\n        return 0\n    else:\n        sum_to_n = sumup(n - 1)\n        return n + sum_to_n"}
{"submission_id":22020,"func_code":"def sumup(N):\n    if N != 0:\n        N += N - 1\n    return N","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"3f0a2ff2-f068-43e9-9a21-42850d31b8d3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='x_0', ctx=Store()), op=Add(), value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sumup(N):\n    if N != 0:\n        N += N - 1\n    return N","n_lines":4,"__index_level_0__":1281,"repair":"def sumup(N):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    total=0\n    while N>=0:\n        total+=N\n        N-=1\n    return total"}
{"submission_id":7185,"func_code":"def sumup(n):\n    if not n:\n        return n\n    if n == 1:\n        return 1\n    return n + sum(n - 1)","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if not n:\n        return n\n    if n == 1:\n        return 1\n    return n + sum(n - 1)","n_lines":6,"__index_level_0__":1282,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if not n:\n            return n\n        if n == 1:\n            return 1\n    \n        return sumup(n-1)+n"}
{"submission_id":17468,"func_code":"def sumup(n):\n    if n == 0:\n        return 0\n    sumup = sumup(n - 1)\n    return n + sumup","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 0:\n        return 0\n    sumup = sumup(n - 1)\n    return n + sumup","n_lines":5,"__index_level_0__":1284,"repair":"def sumup(n):\n        \"\"\"Return the sum of all integers up to n.\"\"\"\n        if n == 0:\n            return 0\n    \n        return n+sumup(n-1)"}
{"submission_id":9705,"func_code":"def sumup(n):\n    if n == 1:\n        return 0\n    sumup = sumup(n - 1)\n    return n + sumup","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 0\n    sumup = sumup(n - 1)\n    return n + sumup","n_lines":5,"__index_level_0__":1285,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum"}
{"submission_id":17977,"func_code":"def sumup(n):\n    if n == 1:\n        return 1\n    sumup = sumup(n - 1)\n    return n + sumup","assignment_id":"sumup","func_name":"sumup","description":"Return the sum of all integers up to n.","test":"assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def sumup(n):\n    if n == 1:\n        return 1\n    sumup = sumup(n - 1)\n    return n + sumup","n_lines":5,"__index_level_0__":1286,"repair":"def sumup(n):\n    \"\"\"Return the sum of all integers up to n.\"\"\"\n    sum = 0\n    while n>0:\n        sum += n\n        n = n - 1\n    return sum"}
{"submission_id":31702,"func_code":"def swap_keys_values():\n    new_dict = {}\n    for key in d:\n        new_dict[d[key]] = key\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"d86203fa-9e1b-4fc0-a3a6-b40a78065d80","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values():\n    new_dict = {}\n    for key in d:\n        new_dict[d[key]] = key\n    return new_dict","n_lines":5,"__index_level_0__":1287,"repair":""}
{"submission_id":37103,"func_code":"def swap_keys_values():\n    new_dic = {}\n    for key in dic:\n        if dic[key] not in new_dic:\n            new_dic[dic[key]] = key\n    return new_dic","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='dic', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values():\n    new_dic = {}\n    for key in dic:\n        if dic[key] not in new_dic:\n            new_dic[dic[key]] = key\n    return new_dic","n_lines":6,"__index_level_0__":1288,"repair":""}
{"submission_id":34366,"func_code":"def swap_keys_values():\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvlaues] = oldkeys\n    return swappeddict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='dictionary', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dictionary', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dictionary', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='oldvlaues', ctx=Load()), ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values():\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvlaues] = oldkeys\n    return swappeddict","n_lines":10,"__index_level_0__":1292,"repair":""}
{"submission_id":3017,"func_code":"def swap_keys_values(d):\n    d = {}\n    for k, v in list(d.items()):\n        d[v] = k\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"da1464fe-2ccb-4c4e-b174-962f2177debd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d = {}\n    for k, v in list(d.items()):\n        d[v] = k\n    return d","n_lines":5,"__index_level_0__":1293,"repair":""}
{"submission_id":13449,"func_code":"def swap_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    list(d.items())","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"35d18426-1565-4cbc-afa0-82ff8cbc8cbd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    list(d.items())","n_lines":3,"__index_level_0__":1294,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        d = {v: k for k, v in list(d.items())}\n    \n        return d"}
{"submission_id":21656,"func_code":"def swap_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    print(list(d.items()))","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"35d18426-1565-4cbc-afa0-82ff8cbc8cbd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    print(list(d.items()))","n_lines":3,"__index_level_0__":1295,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        d = {v: k for k, v in list(d.items())}\n    \n        return dict(d)"}
{"submission_id":3826,"func_code":"def swap_keys_values(x):\n    d = dict((k, v) for v, k in list(x.items()))\n    return x","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    d = dict((k, v) for v, k in list(x.items()))\n    return x","n_lines":3,"__index_level_0__":1296,"repair":"def swap_keys_values(x):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    temp = {}\n    for key, value in x.items():\n        temp[value] = key\n    x=temp\n    return x"}
{"submission_id":24152,"func_code":"def swap_keys_values(x):\n    d = dict((v, k) for k, v in list(x.items()))\n    return x","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    d = dict((v, k) for k, v in list(x.items()))\n    return x","n_lines":3,"__index_level_0__":1297,"repair":"def swap_keys_values(x):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    if type(x) is dict:\n        return {v:k for k,v in x.items()}\n        return x"}
{"submission_id":2499,"func_code":"def swap_keys_values(dic):\n    keys = list(dic.keys())\n    values = list(dic.values())\n    d = {}\n    i = 0\n    for v in values:\n        d[keys[i]] = v[i]\n        i = i + 1\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"d0e5b214-932e-4ec6-ae62-66baacab8b6c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dic):\n    keys = list(dic.keys())\n    values = list(dic.values())\n    d = {}\n    i = 0\n    for v in values:\n        d[keys[i]] = v[i]\n        i = i + 1\n    return d","n_lines":9,"__index_level_0__":1300,"repair":"def swap_keys_values(dic):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        keys = list(dic.keys())\n        values = list(dic.values())\n        d = {}\n        i = 0\n        for v in values:\n    \n            d[v] = keys[i]\n            i = i + 1\n        return d"}
{"submission_id":7023,"func_code":"def swap_keys_values(dic):\n    keys = list(dic.keys())\n    values = list(dic.values())\n    d = {}\n    i = 0\n    for v in values:\n        d[v[i]] = keys[i]\n        i = i + 1","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"d0e5b214-932e-4ec6-ae62-66baacab8b6c","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dic):\n    keys = list(dic.keys())\n    values = list(dic.values())\n    d = {}\n    i = 0\n    for v in values:\n        d[v[i]] = keys[i]\n        i = i + 1","n_lines":8,"__index_level_0__":1301,"repair":"def swap_keys_values(dic):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap = {}\n    for k, v in dic.items():\n        swap[v] = k\n    return swap"}
{"submission_id":3503,"func_code":"def swap_keys_values(d):\n    keys = list(d.keys())\n    values = list(d.values())\n    new = {}\n    i = 0\n    while i < len(keys):\n        new[value[i]] = keys[i]\n        i = i + 1\n    return new","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"ebcb6801-87f5-4fa5-b252-f89ccb02603a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    keys = list(d.keys())\n    values = list(d.values())\n    new = {}\n    i = 0\n    while i < len(keys):\n        new[value[i]] = keys[i]\n        i = i + 1\n    return new","n_lines":9,"__index_level_0__":1303,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swapper = {}\n    for key, value in d.items():\n        swapper[value] = key\n    return swapper"}
{"submission_id":32179,"func_code":"def swap_keys_values(d):\n    tmp = ''\n    for key in d:\n        key = key.split()\n        tmp = key[0]\n        key[0] = key[1]\n        key[1] = tmp\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    tmp = ''\n    for key in d:\n        key = key.split()\n        tmp = key[0]\n        key[0] = key[1]\n        key[1] = tmp\n    return d","n_lines":8,"__index_level_0__":1304,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swapped_dict = {}\n    for key, value in d.items():\n        swapped_dict[value] = key\n    return swapped_dict"}
{"submission_id":20640,"func_code":"def swap_keys_values(d):\n    tmp = ''\n    for key in d:\n        key = tmp\n        key = d[key]\n        d[key] = tmp\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    tmp = ''\n    for key in d:\n        key = tmp\n        key = d[key]\n        d[key] = tmp\n    return d","n_lines":7,"__index_level_0__":1305,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap = {v: k for k, v in d.items()}\n    return swap"}
{"submission_id":40049,"func_code":"def swap_keys_values(d):\n    dic = {}\n    a = list(d.values())\n    b = list(d.keys())\n    print(a)","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    a = list(d.values())\n    b = list(d.keys())\n    print(a)","n_lines":5,"__index_level_0__":1306,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dic = {}\n    \n        for k,v in d.items():\n            dic[v] = k\n    \n        return dic"}
{"submission_id":6626,"func_code":"def swap_keys_values(d):\n    dic = {}\n    a = list(d.values())\n    b = list(d.keys())\n    print((a, 'boop'))","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"e65c3029-39bf-4873-8e7a-599cb24be899","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_2', ctx=Load()), Constant(value='boop')], ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    a = list(d.values())\n    b = list(d.keys())\n    print((a, 'boop'))","n_lines":5,"__index_level_0__":1307,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dic = {}\n    \n        for k,v in d.items():\n            dic[v] = k\n    \n        return dic"}
{"submission_id":18534,"func_code":"def swap_keys_values(d):\n    newdict = {}\n    keys = list(d.keys())\n    values = list(d.values())\n    i = 0\n    while i < len(d.keys):\n        newdict[keys[i]] = values[i]\n        i = i + 1\n    return newdict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    newdict = {}\n    keys = list(d.keys())\n    values = list(d.values())\n    i = 0\n    while i < len(d.keys):\n        newdict[keys[i]] = values[i]\n        i = i + 1\n    return newdict","n_lines":9,"__index_level_0__":1308,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        newdict = {}\n    \n        for key in d.keys():\n            newdict[d[key]] = key\n        return newdict"}
{"submission_id":36266,"func_code":"def swap_keys_values(d):\n    newdict = {}\n    keys = list(d.keys())\n    values = list(d.values())\n    i = 0\n    while i < len(d):\n        newdict[keys[i]] = values[i]\n        i = i + 1\n    return newdict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"104b03f1-1241-495d-996a-ba8f4a26b8bc","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    newdict = {}\n    keys = list(d.keys())\n    values = list(d.values())\n    i = 0\n    while i < len(d):\n        newdict[keys[i]] = values[i]\n        i = i + 1\n    return newdict","n_lines":9,"__index_level_0__":1309,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        newdict = {}\n        keys = list(d.keys())\n        values = list(d.values())\n        i = 0\n    \n        while i < len(keys):\n                oldkey = keys[i]\n                newkey = values[i]\n                \n                newdict[newkey] = oldkey\n                \n                i = i+1\n    \n        return newdict"}
{"submission_id":24329,"func_code":"def swap_keys_values(d):\n    d2 = {}\n    ds = sorted(d.items, reverse=True)\n    for k, v in ds:\n        d2[v] = k\n    return d2","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"57b690d2-56f4-4fcf-abf7-8719f8802aae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d2 = {}\n    ds = sorted(d.items, reverse=True)\n    for k, v in ds:\n        d2[v] = k\n    return d2","n_lines":6,"__index_level_0__":1310,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        d2 = {}\n    \n        for k,v in d.items():\n            d2[v] = k\n        return d2"}
{"submission_id":24583,"func_code":"def swap_keys_values(s):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key) - 1):\n        new_d[key[i]] = value[i]\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"75fca52d-a61c-4d91-946c-d376c5569767","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(s):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key) - 1):\n        new_d[key[i]] = value[i]\n    return new_d","n_lines":7,"__index_level_0__":1311,"repair":"def swap_keys_values(s):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_d = {}\n    \n        for key in s.keys():\n            new_d[s[key]] = key\n        return new_d"}
{"submission_id":11974,"func_code":"def swap_keys_values(d):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key) - 1):\n        new_d[key[i]] = value[i]\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"75fca52d-a61c-4d91-946c-d376c5569767","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key) - 1):\n        new_d[key[i]] = value[i]\n    return new_d","n_lines":7,"__index_level_0__":1312,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap = {}\n    for key in d:\n        swap[d[key]] = key\n    return swap"}
{"submission_id":8585,"func_code":"def swap_keys_values(d):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key)):\n        new_d[value[i]] = key[i]\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"75fca52d-a61c-4d91-946c-d376c5569767","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_d = {}\n    key = sorted(d.keys())\n    value = sorted(d.values())\n    for i in range(0, len(key)):\n        new_d[value[i]] = key[i]\n    return new_d","n_lines":7,"__index_level_0__":1313,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_d = {}\n    \n        for key in d:\n            new_d[d[key]] = key\n        return new_d\n        value = sorted(d.values())\n        for i in range(0, len(key)):\n            new_d[value[i]] = key[i]\n        return new_d"}
{"submission_id":18855,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    i = 0\n    while i < len(d):\n        new_dict[d[0]] = d[1]\n        i += 1\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"70e78257-bdc0-4e89-b7cb-a49beaca5b77","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    i = 0\n    while i < len(d):\n        new_dict[d[0]] = d[1]\n        i += 1\n    return new_dict","n_lines":7,"__index_level_0__":1314,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n        i = 0\n    \n        for key in d:\n            new_dict[d[key]] = key\n            i += 1\n    \n        while i < len(d):\n            new_dict[d[0]] = d[1]\n            i += 1\n        return new_dict"}
{"submission_id":38562,"func_code":"def swap_keys_values(d):\n    a2 = {}\n    a3 = {}\n    ar = sorted(list(d.items()), reverse=True)\n    for k, v in ar:\n        a2[v] = k\n    ar2 = sorted(list(a2.items()), reverse=True)\n    for k, v in ar2:\n        a3[k] = v\n    return a3","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"919f743b-c8d6-4955-bb0f-9ca7c9bbe1be","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    a2 = {}\n    a3 = {}\n    ar = sorted(list(d.items()), reverse=True)\n    for k, v in ar:\n        a2[v] = k\n    ar2 = sorted(list(a2.items()), reverse=True)\n    for k, v in ar2:\n        a3[k] = v\n    return a3","n_lines":10,"__index_level_0__":1315,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        a2 = {}\n        a3 = {}\n    \n        ar = list(d.items())\n        for k, v in ar:\n            a2[v] = k\n        ar2 = sorted(list(a2.items()), reverse=True)\n        for k, v in ar2:\n            a3[k] = v\n        return a3"}
{"submission_id":7941,"func_code":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        if key not in new_dic:\n            new_dic[key] = key\n    return new_dic","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        if key not in new_dic:\n            new_dic[key] = key\n    return new_dic","n_lines":10,"__index_level_0__":1316,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    return dic"}
{"submission_id":37976,"func_code":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    return d","n_lines":6,"__index_level_0__":1317,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    dic = {}\n    for key, value in d.items():\n        dic[value] = key\n    return dic"}
{"submission_id":11032,"func_code":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = d[key]\n    return dic","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = d[key]\n    return dic","n_lines":6,"__index_level_0__":1318,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dic = {}\n        for key in d:\n    \n            dic[d[key]] = key\n        return dic"}
{"submission_id":16116,"func_code":"def swap_keys_values(d):\n    new_d = {}\n    for k in d:\n        d1[d[k]] = k\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_d = {}\n    for k in d:\n        d1[d[k]] = k\n    return new_d","n_lines":5,"__index_level_0__":1319,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap_keys_values = {}\n    for k, v in d.items():\n        swap_keys_values[v] = k\n    return swap_keys_values"}
{"submission_id":28023,"func_code":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        d[key] = value\n        d[value] = d[key]\n    return dic","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dic = {}\n    for key in d:\n        d[key] = value\n        d[value] = d[key]\n    return dic","n_lines":6,"__index_level_0__":1320,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dic = {}\n    \n        for key in d:\n                dic[d[key]] = key\n        return dic"}
{"submission_id":10498,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[key] = d[key]\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[key] = d[key]\n    return d","n_lines":5,"__index_level_0__":1321,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for key in d:\n            new_dict[d[key]] = key\n        return new_dict"}
{"submission_id":5633,"func_code":"def swap_keys_values(s):\n    dictionary = {}\n    for i in s:\n        dictionary[s[i]] = i\n        return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), Return(value=Name(id='d', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(s):\n    dictionary = {}\n    for i in s:\n        dictionary[s[i]] = i\n        return d","n_lines":5,"__index_level_0__":1322,"repair":"def swap_keys_values(s):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dictionary = {}\n        for i in s:\n            dictionary[s[i]] = i\n    \n        return dictionary"}
{"submission_id":10312,"func_code":"def swap_keys_values(s):\n    dictionary = {}\n    for i in s:\n        dictionary[s[i]] = i\n        return dictionary","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(s):\n    dictionary = {}\n    for i in s:\n        dictionary[s[i]] = i\n        return dictionary","n_lines":5,"__index_level_0__":1323,"repair":"def swap_keys_values(s):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    dictionary = {}\n    for key, value in s.items():\n        dictionary[value] = key\n    return dictionary"}
{"submission_id":26546,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[d[key]] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[d[key]] = key\n    return d","n_lines":5,"__index_level_0__":1324,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n        for key in d:\n            new_dict[d[key]] = key\n    \n        return new_dict"}
{"submission_id":29119,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[key[d]] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key in d:\n        new_dict[key[d]] = key\n    return d","n_lines":5,"__index_level_0__":1325,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for key in d:\n            new_dict[d[key]] = key\n    \n        return new_dict"}
{"submission_id":13994,"func_code":"def swap_keys_values(s):\n    dic = {}\n    for key, value in s.item():\n        dic[value] = key\n    return dic","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(s):\n    dic = {}\n    for key, value in s.item():\n        dic[value] = key\n    return dic","n_lines":5,"__index_level_0__":1326,"repair":"def swap_keys_values(s):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap = {}\n    for key, value in s.items():\n        swap[value] = key\n    return swap"}
{"submission_id":9251,"func_code":"def swap_keys_values(dict_descriptor):\n    new_dict = {}\n    for key, values in list(dict_descriptor.items()):\n        new_dict[values] = keys\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"7d02a9ff-65b9-4dbf-909b-9668940c661b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='keys', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dict_descriptor):\n    new_dict = {}\n    for key, values in list(dict_descriptor.items()):\n        new_dict[values] = keys\n    return new_dict","n_lines":5,"__index_level_0__":1327,"repair":"def swap_keys_values(dict_descriptor):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swapped = {}\n    for key, value in dict_descriptor.items():\n        swapped[value] = key\n    return swapped"}
{"submission_id":6741,"func_code":"def swap_keys_values(d):\n    swapped_d = {}\n    for k, v in list(d.items()):\n        swapped_d[v] = k\n    print(swapped_d)","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"553c9a10-8e3d-401b-8100-2094287197ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    swapped_d = {}\n    for k, v in list(d.items()):\n        swapped_d[v] = k\n    print(swapped_d)","n_lines":5,"__index_level_0__":1328,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        swapped_d = {}\n        for k, v in list(d.items()):\n            swapped_d[v] = k\n    \n        return swapped_d"}
{"submission_id":8922,"func_code":"def swap_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        new_dict[value] = key\n    return new_dictict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='new_dictict', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        new_dict[value] = key\n    return new_dictict","n_lines":5,"__index_level_0__":1329,"repair":"def swap_keys_values(s):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n        for key, value in list(s.items()):\n            new_dict[value] = key\n    \n        return new_dict"}
{"submission_id":828,"func_code":"def swap_keys_values(d):\n    new = {}\n    for k, v in list(d.items()):\n        new[v] = k\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"536d6075-5a50-4346-89ff-5e21df057756","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new = {}\n    for k, v in list(d.items()):\n        new[v] = k\n    return d","n_lines":5,"__index_level_0__":1330,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new = {}\n        for k, v in list(d.items()):\n            new[v] = k\n    \n        return new"}
{"submission_id":36130,"func_code":"def swap_keys_values(dictionary):\n    new_dict = {}\n    for k, v in list(dictionary.items()):\n        new_dict[v] = k","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"156114dd-8a1c-4e95-a7b3-fb54488e2dcf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dictionary):\n    new_dict = {}\n    for k, v in list(dictionary.items()):\n        new_dict[v] = k","n_lines":4,"__index_level_0__":1331,"repair":"def swap_keys_values(dictionary):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for key, value in dictionary.items():\n            new_dict[value] = key\n        \n        return new_dict"}
{"submission_id":9646,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        new_dict[value] = d[key]\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        new_dict[value] = d[key]\n    return new_dict","n_lines":5,"__index_level_0__":1332,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    new_dict = {}\n    for key, value in list(d.items()):\n        new_dict[value] = key\n    return new_dict"}
{"submission_id":2416,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        new_dict[d[value]] = d[key]\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        new_dict[d[value]] = d[key]\n    return new_dict","n_lines":5,"__index_level_0__":1333,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    new_dict = dict()\n    for key, value in list(d.items()):\n        new_dict[value] = key\n    return new_dict"}
{"submission_id":9242,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in list(d.items()):\n        return d","n_lines":4,"__index_level_0__":1334,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for key, value in d.items():\n            new_dict[value] = key\n        return new_dict"}
{"submission_id":41800,"func_code":"def swap_keys_values(d):\n    new_d = {}\n    for k, v in zip(d):\n        new_d[v] = k\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"3a3b6ee9-ae37-4d43-b10a-27ade2385dcd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_d = {}\n    for k, v in zip(d):\n        new_d[v] = k\n    return new_d","n_lines":5,"__index_level_0__":1335,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    new_d = {}\n    for k,v in d.items():\n        new_d[v] = k\n    return new_d"}
{"submission_id":18678,"func_code":"def swap_keys_values(d):\n    new_d = {}\n    for k, v in d:\n        d1[v] = k\n    return new_d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_d = {}\n    for k, v in d:\n        d1[v] = k\n    return new_d","n_lines":5,"__index_level_0__":1336,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_d = {}\n    \n        for k, v in d.items():\n            new_d[v] = k\n        return new_d"}
{"submission_id":37561,"func_code":"def swap_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    for keys, values in dictionary_descriptor:\n        new_dictionary[values] = keys","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    for keys, values in dictionary_descriptor:\n        new_dictionary[values] = keys","n_lines":4,"__index_level_0__":1337,"repair":"def swap_keys_values(dictionary_descriptor):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    new_dictionary = {}\n    for key, values in dictionary_descriptor.items():\n        new_dictionary[values] = key\n\n    return new_dictionary"}
{"submission_id":38024,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in d:\n        return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for key, value in d:\n        return d","n_lines":4,"__index_level_0__":1338,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for key in d:\n            new_dict[d[key]] = key\n        return new_dict"}
{"submission_id":35363,"func_code":"def swap_keys_values(d):\n    new_dict = {}\n    for k, v in (list(d.keys()), list(d.values())):\n        new_dict[v] = k\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"198db91d-9bcb-463c-838e-d8957f078a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new_dict = {}\n    for k, v in (list(d.keys()), list(d.values())):\n        new_dict[v] = k\n    return new_dict","n_lines":5,"__index_level_0__":1339,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        new_dict = {}\n    \n        for k, v in d.items():\n            new_dict[v] = k\n        return new_dict"}
{"submission_id":28840,"func_code":"def swap_keys_values(d):\n    inv_map = {a: b for b, a in list(d.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    inv_map = {a: b for b, a in list(d.items())}","n_lines":2,"__index_level_0__":1340,"repair":""}
{"submission_id":17348,"func_code":"def swap_keys_values(x):\n    d = {v: k for k, v in list(a.items())}\n    return x","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    d = {v: k for k, v in list(a.items())}\n    return x","n_lines":3,"__index_level_0__":1341,"repair":"def swap_keys_values(x):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    if isinstance(x, dict):\n        return {v:k for k,v in x.items()}\n    else:\n        return x"}
{"submission_id":7124,"func_code":"def swap_keys_values(old_dict):\n    dict = {v: k for k, v in list(old_dict.items())}\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"8487432c-a440-40f5-afcb-ad0e762b9edb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(old_dict):\n    dict = {v: k for k, v in list(old_dict.items())}\n    return new_dict","n_lines":3,"__index_level_0__":1342,"repair":"def swap_keys_values(old_dict):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        dict = {v: k for k, v in list(old_dict.items())}\n    \n        return dict"}
{"submission_id":33395,"func_code":"def swap_keys_values(x):\n    d = {v: k for k, v in list(x.items())}\n    return x","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    d = {v: k for k, v in list(x.items())}\n    return x","n_lines":3,"__index_level_0__":1343,"repair":"def swap_keys_values(x):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        d = {v: k for k, v in list(x.items())}\n    \n        return d"}
{"submission_id":38045,"func_code":"def swap_keys_values(d):\n    new = {v: k for k, v in list(d.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"35d18426-1565-4cbc-afa0-82ff8cbc8cbd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    new = {v: k for k, v in list(d.items())}","n_lines":2,"__index_level_0__":1344,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    return dict((v, k) for k, v in d.items())"}
{"submission_id":6739,"func_code":"def swap_keys_values(x):\n    d = {v: k for k, v in list(d.items())}\n    return x","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    d = {v: k for k, v in list(d.items())}\n    return x","n_lines":3,"__index_level_0__":1345,"repair":"def swap_keys_values(x):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    mapping = {v:k for k, v in x.items()}\n    return mapping"}
{"submission_id":10474,"func_code":"def swap_keys_values(dictionary):\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvlaues] = oldkeys\n    return swappeddict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='oldvlaues', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dictionary):\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvlaues] = oldkeys\n    return swappeddict","n_lines":10,"__index_level_0__":1347,"repair":"def swap_keys_values(dictionary):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swappeddict = {}\n    for oldkey, oldvalues in dictionary.items():\n        for oldvalue in oldvalues:\n            oldkeys,oldvalues = oldvalue,oldkey\n        swappeddict[oldkeys] = oldvalues\n    return swappeddict"}
{"submission_id":38765,"func_code":"def swap_keys_values(dictionary):\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvalues] = oldkeys\n    return swappeddict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dictionary):\n    oldkeys = []\n    oldvalues = []\n    swappeddict = {}\n    for key in dictionary:\n        oldkeys.append(list(dictionary.keys()))\n        oldvalues.append(list(dictionary.values()))\n    for e in oldkeys:\n        swappeddict[oldvalues] = oldkeys\n    return swappeddict","n_lines":10,"__index_level_0__":1348,"repair":""}
{"submission_id":19572,"func_code":"def swap_keys_values(d):\n    a = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        a.append(u)\n    return a","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    a = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        a.append(u)\n    return a","n_lines":6,"__index_level_0__":1356,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swaps = {}\n    for key, value in d.items():\n        swaps[value] = key\n    return swaps"}
{"submission_id":12754,"func_code":"def swap_keys_values(d):\n    d_2 = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        for k, v in u.split(','):\n            d_2[k] = v\n    return d_2","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d_2 = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        for k, v in u.split(','):\n            d_2[k] = v\n    return d_2","n_lines":7,"__index_level_0__":1357,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    d_2 = {}\n    for k, v in d.items():\n        d_2[v] = k\n    return d_2"}
{"submission_id":10972,"func_code":"def swap_keys_values(d):\n    d_2 = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        for k, v in u:\n            d_2[k] = v\n    return d_2","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    d_2 = []\n    for entry in list(d.items()):\n        u = entry[::-1]\n        for k, v in u:\n            d_2[k] = v\n    return d_2","n_lines":7,"__index_level_0__":1358,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    d_2 = {}\n    for k, v in d.items():\n        d_2[v] = k\n    return d_2"}
{"submission_id":11362,"func_code":"def swap_keys_values(dic):\n    d = []\n    for key in dic:\n        value = dic[key]\n        d[value] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dic):\n    d = []\n    for key in dic:\n        value = dic[key]\n        d[value] = key\n    return d","n_lines":6,"__index_level_0__":1359,"repair":"def swap_keys_values(dic):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    if isinstance(dic, dict):\n        d = {}\n        for key in dic:\n            value = dic[key]\n            d[value] = key\n        return d"}
{"submission_id":10688,"func_code":"def swap_keys_values(dic):\n    d = []\n    for key in dic:\n        value = d[key]\n        d[value] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dic):\n    d = []\n    for key in dic:\n        value = d[key]\n        d[value] = key\n    return d","n_lines":6,"__index_level_0__":1360,"repair":"def swap_keys_values(dic):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        d = []\n    \n        for k, v in dic.items():\n            d.append([v,k])\n        \n        return dict(d)"}
{"submission_id":14051,"func_code":"def swap_keys_values(d):\n    a = []\n    for entry in d:\n        u = entry[::-1]\n        a.append(u)\n    return a","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    a = []\n    for entry in d:\n        u = entry[::-1]\n        a.append(u)\n    return a","n_lines":6,"__index_level_0__":1361,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap = {}\n    for key, value in d.items():\n        swap[value] = key\n    return swap"}
{"submission_id":603,"func_code":"def swap_keys_values(d):\n    dict_ = sys.argv[1]\n    new_dict = {}\n    for k, v in list(dict_.items()):\n        new_dict[v] = k","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"156114dd-8a1c-4e95-a7b3-fb54488e2dcf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    dict_ = sys.argv[1]\n    new_dict = {}\n    for k, v in list(dict_.items()):\n        new_dict[v] = k","n_lines":5,"__index_level_0__":1362,"repair":""}
{"submission_id":24089,"func_code":"def swap_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dict:\n        a.append(file)\n    for letter in a:\n        c[dic[letter]] = letter\n    return c","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='dict', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dict:\n        a.append(file)\n    for letter in a:\n        c[dic[letter]] = letter\n    return c","n_lines":7,"__index_level_0__":1363,"repair":"def swap_keys_values(dic):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap_keys_values = {}\n    for letter in dic:\n        swap_keys_values[dic[letter]] = letter\n    return swap_keys_values"}
{"submission_id":28546,"func_code":"def swap_keys_values(d):\n    print({v: k for k, v in list(d.items())})","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"35d18426-1565-4cbc-afa0-82ff8cbc8cbd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    print({v: k for k, v in list(d.items())})","n_lines":2,"__index_level_0__":1364,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    return dict((value, key) for key, value in d.items())"}
{"submission_id":29365,"func_code":"def swap_keys_values(d):\n    print(d)\n    new_dict = {}\n    i = 0\n    while i < len(d):\n        new_dict[d[i]] = d[0]\n        i += 1\n    return new_dict","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"70e78257-bdc0-4e89-b7cb-a49beaca5b77","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    print(d)\n    new_dict = {}\n    i = 0\n    while i < len(d):\n        new_dict[d[i]] = d[0]\n        i += 1\n    return new_dict","n_lines":8,"__index_level_0__":1365,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    swap_keys_values_dict = {}\n    for key in d:\n        swap_keys_values_dict[d[key]] = key\n    return swap_keys_values_dict"}
{"submission_id":34219,"func_code":"def swap_keys_values(d):\n    for key in d:\n        key = key.split()\n        tmp = key[0]\n        key[0] = key[1]\n        key[1] = tmp\n    return tmp","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    for key in d:\n        key = key.split()\n        tmp = key[0]\n        key[0] = key[1]\n        key[1] = tmp\n    return tmp","n_lines":7,"__index_level_0__":1366,"repair":"def swap_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n        for key in d:\n            key = key.split()\n    \n        tmp = {}\n        for key in d:\n            tmp[str(d[key])] = key\n        return tmp"}
{"submission_id":18058,"func_code":"def swap_keys_values(d):\n    for key in d:\n        key = key.split()\n    return key","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    for key in d:\n        key = key.split()\n    return key","n_lines":4,"__index_level_0__":1367,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    key_swap = {}\n    for key, value in d.items():\n        key_swap[value] = key\n    return key_swap"}
{"submission_id":9172,"func_code":"def swap_keys_values(d):\n    for key in d:\n        key = tmp\n        key = d[key]\n        d[key] = tmp\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='tmp', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='tmp', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    for key in d:\n        key = tmp\n        key = d[key]\n        d[key] = tmp\n    return d","n_lines":6,"__index_level_0__":1368,"repair":""}
{"submission_id":19666,"func_code":"def swap_keys_values(a):\n    for entry in a:\n        u = entry[::-1]\n        a.append(u)\n    return a","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(a):\n    for entry in a:\n        u = entry[::-1]\n        a.append(u)\n    return a","n_lines":5,"__index_level_0__":1369,"repair":""}
{"submission_id":2910,"func_code":"def swap_keys_values(x):\n    for key, v in list(x.items()):\n        d[v] = key\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(x):\n    for key, v in list(x.items()):\n        d[v] = key\n    return d","n_lines":4,"__index_level_0__":1370,"repair":""}
{"submission_id":40958,"func_code":"def swap_keys_values(d):\n    for k, v in list(d.items()):\n        k, v = v, k\n    return d","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    for k, v in list(d.items()):\n        k, v = v, k\n    return d","n_lines":4,"__index_level_0__":1371,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    return {v: k for k, v in d.items()}"}
{"submission_id":20047,"func_code":"def swap_keys_values(d):\n    for k, v in list(d.items()):\n        del d[k]\n        d[v] = k","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"d0af1b08-7254-49f0-8cc4-d63a85c9199d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())]), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    for k, v in list(d.items()):\n        del d[k]\n        d[v] = k","n_lines":4,"__index_level_0__":1372,"repair":""}
{"submission_id":32192,"func_code":"def swap_keys_values(d):\n    return d((v, k) for k, v in d.items())","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='x_0', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    return d((v, k) for k, v in d.items())","n_lines":2,"__index_level_0__":1373,"repair":""}
{"submission_id":28108,"func_code":"def swap_keys_values(d):\n    return {v: k for k, v in list(a.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    return {v: k for k, v in list(a.items())}","n_lines":2,"__index_level_0__":1374,"repair":""}
{"submission_id":21682,"func_code":"def swap_keys_values(d):\n    return {v: k for k, v in list(dic.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dic', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    return {v: k for k, v in list(dic.items())}","n_lines":2,"__index_level_0__":1375,"repair":""}
{"submission_id":30225,"func_code":"def swap_keys_values(d):\n    return {v: d for k, v in list(d.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"bb62ca90-d7ec-42bb-b255-0f55492691ea","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_0', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    return {v: d for k, v in list(d.items())}","n_lines":2,"__index_level_0__":1376,"repair":""}
{"submission_id":5991,"func_code":"def swap_keys_values(d):\n    return {p[0]: p[1] for p in list(d.items())}","assignment_id":"swap_keys_values","func_name":"swap_keys_values","description":"Swap the keys of a dictionary with its values.","test":"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Subscript(value=Name(id='p', ctx=Load()), slice=Constant(value=0), ctx=Load()), value=Subscript(value=Name(id='p', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_keys_values(d):\n    return {p[0]: p[1] for p in list(d.items())}","n_lines":2,"__index_level_0__":1377,"repair":"def swap_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its values.\"\"\"\n    \n    return {v: k for k, v in d.items()}"}
{"submission_id":39965,"func_code":"def swap_unique_keys_values():\n    dic1 = {}\n    dic2 = {}\n    dicsort = sorted(list(d.items()), reverse=True)\n    for k, v in dicsort:\n        if v not in dic1:\n            dic1[v] = k\n        else:\n            dic1[v] = 'N'\n    dicsort2 = sorted(list(dic1.items()), reverse=True)\n    for k, v in dicsort2:\n        if v != 'N':\n            dic2[k] = v\n    return dic2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values():\n    dic1 = {}\n    dic2 = {}\n    dicsort = sorted(list(d.items()), reverse=True)\n    for k, v in dicsort:\n        if v not in dic1:\n            dic1[v] = k\n        else:\n            dic1[v] = 'N'\n    dicsort2 = sorted(list(dic1.items()), reverse=True)\n    for k, v in dicsort2:\n        if v != 'N':\n            dic2[k] = v\n    return dic2","n_lines":14,"__index_level_0__":1378,"repair":""}
{"submission_id":11026,"func_code":"def swap_unique_keys_values():\n    d = {}\n    d2 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d:\n            d[v] = k\n        else:\n            d[v] = 'N'\n    ds2 = sorted(list(d.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d2[k] = v\n    return d2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"20997107-3eee-4a62-bc0c-56e29ffe0c3d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values():\n    d = {}\n    d2 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d:\n            d[v] = k\n        else:\n            d[v] = 'N'\n    ds2 = sorted(list(d.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d2[k] = v\n    return d2","n_lines":14,"__index_level_0__":1379,"repair":""}
{"submission_id":8686,"func_code":"def swap_unique_keys_values():\n    new_dic = {}\n    for key in dic:\n        if dic[key] not in new_dic:\n            new_dic[dic[key]] = key\n        else:\n            del new_dic[d[key]]\n    return new_dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f734d662-6b82-46af-93a9-92b490e12476","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='dic', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values():\n    new_dic = {}\n    for key in dic:\n        if dic[key] not in new_dic:\n            new_dic[dic[key]] = key\n        else:\n            del new_dic[d[key]]\n    return new_dic","n_lines":8,"__index_level_0__":1380,"repair":""}
{"submission_id":6194,"func_code":"def swap_unique_keys_values(d):\n    lst = []\n    for k in list(d.keys()):\n        v = d[k]\n        lst.append(v)\n    new_d = {v: k for k, v in list(d.items()) if lst.count(v, 0, len(lst)) == 1\n        }\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e3c31dbf-4c63-4e59-aa78-540cb586910e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lst', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    lst = []\n    for k in list(d.keys()):\n        v = d[k]\n        lst.append(v)\n    new_d = {v: k for k, v in list(d.items()) if lst.count(v, 0, len(lst)) == 1\n        }\n    return new_d","n_lines":8,"__index_level_0__":1381,"repair":""}
{"submission_id":20528,"func_code":"def swap_unique_keys_values(d):\n    seen = []\n    unseen = []\n    for v in list(d.keys()):\n        va = d[v]\n        if va in unseen:\n            seen.append(va)\n        else:\n            unseen.append(va)\n        out = {v: k for k, v in list(d.items()) if v not in seen}\n    return out","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"6bdfefac-1fa3-44c6-b066-9e1536e0210e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='seen', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    seen = []\n    unseen = []\n    for v in list(d.keys()):\n        va = d[v]\n        if va in unseen:\n            seen.append(va)\n        else:\n            unseen.append(va)\n        out = {v: k for k, v in list(d.items()) if v not in seen}\n    return out","n_lines":11,"__index_level_0__":1382,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        seen = []\n    \n        unseen = []\n        out = {}\n        for v in list(d.keys()):\n            va = d[v]\n            if va in unseen:\n                seen.append(va)\n            else:\n                unseen.append(va)\n            out = {v: k for k, v in list(d.items()) if v not in seen}\n        return out"}
{"submission_id":26584,"func_code":"def swap_unique_keys_values(d):\n    vals = list(d.values())\n    inv = {v: k for k, v in list(d.items()) if vals.count(v) == '1'}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vals', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='vals', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='1')])], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    vals = list(d.values())\n    inv = {v: k for k, v in list(d.items()) if vals.count(v) == '1'}\n    return inv","n_lines":4,"__index_level_0__":1383,"repair":""}
{"submission_id":30262,"func_code":"def swap_unique_keys_values(d):\n    d = dict(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = dict(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":4,"__index_level_0__":1384,"repair":""}
{"submission_id":10609,"func_code":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    d = {k: v for k, v in d}\n    inv = {v: k for k, v in list(d.items())}\n    return d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    d = {k: v for k, v in d}\n    inv = {v: k for k, v in list(d.items())}\n    return d","n_lines":5,"__index_level_0__":1385,"repair":""}
{"submission_id":35427,"func_code":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return d","n_lines":4,"__index_level_0__":1386,"repair":""}
{"submission_id":16969,"func_code":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":4,"__index_level_0__":1387,"repair":""}
{"submission_id":7352,"func_code":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    return d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = list(set(d))\n    return d","n_lines":3,"__index_level_0__":1388,"repair":""}
{"submission_id":9636,"func_code":"def swap_unique_keys_values(d):\n    d = set(d)\n    d = {k: v for k, v in d}\n    inv = {v: k for k, v in list(d.items())}\n    return d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = set(d)\n    d = {k: v for k, v in d}\n    inv = {v: k for k, v in list(d.items())}\n    return d","n_lines":5,"__index_level_0__":1389,"repair":""}
{"submission_id":27763,"func_code":"def swap_unique_keys_values(d):\n    d = set(d)\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = set(d)\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":4,"__index_level_0__":1390,"repair":""}
{"submission_id":24922,"func_code":"def swap_unique_keys_values(d):\n    d = set(d)\n    inv = {v: k for k, v in d}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = set(d)\n    inv = {v: k for k, v in d}\n    return inv","n_lines":4,"__index_level_0__":1391,"repair":""}
{"submission_id":7358,"func_code":"def swap_unique_keys_values(dic):\n    dic = {'a': 4, 'b': 7, 'c': 10, 'd': 7}\n    list_of_values = [dic[value] for value in dic]\n    unique_dict = {}\n    for key in dic:\n        if list_of_values.count(dic[key]) == 1:\n            unique_dict[dic[key]] = key\n    return unique_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dd3b5b53-00cc-42e8-9f77-c46f84f7c7b3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[Constant(value='a'), Constant(value='b'), Constant(value='c'), Constant(value='d')], values=[Constant(value=4), Constant(value=7), Constant(value=10), Constant(value=7)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    dic = {'a': 4, 'b': 7, 'c': 10, 'd': 7}\n    list_of_values = [dic[value] for value in dic]\n    unique_dict = {}\n    for key in dic:\n        if list_of_values.count(dic[key]) == 1:\n            unique_dict[dic[key]] = key\n    return unique_dict","n_lines":8,"__index_level_0__":1392,"repair":"def swap_unique_keys_values(dic):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    list_of_values = list(dic.values())\n    if list_of_values == list(dic):\n        return dic\n    else:\n        unique_dict = {}\n        for key in dic:\n            if list_of_values.count(dic[key]) == 1:\n                unique_dict[dic[key]] = key\n        return unique_dict"}
{"submission_id":41975,"func_code":"def swap_unique_keys_values(d):\n    d = {}\n    d2 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d:\n            d[v] = k\n        else:\n            d[v] = 'N'\n    ds2 = sorted(list(d.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d2[k] = v\n    return d2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"20997107-3eee-4a62-bc0c-56e29ffe0c3d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {}\n    d2 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d:\n            d[v] = k\n        else:\n            d[v] = 'N'\n    ds2 = sorted(list(d.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d2[k] = v\n    return d2","n_lines":14,"__index_level_0__":1393,"repair":""}
{"submission_id":12143,"func_code":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    unique_values = list(set(d.values()))\n    for key in unique_values:\n        new_d[key] = d[key]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    unique_values = list(set(d.values()))\n    for key in unique_values:\n        new_d[key] = d[key]\n    return new_d","n_lines":7,"__index_level_0__":1394,"repair":""}
{"submission_id":3295,"func_code":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n        else:\n            del new_d[k]\n            del d[k]\n            del new_d[k]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n        else:\n            del new_d[k]\n            del d[k]\n            del new_d[k]\n    return new_d","n_lines":11,"__index_level_0__":1395,"repair":""}
{"submission_id":5634,"func_code":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n        else:\n            del new_d[k]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n        else:\n            del new_d[k]\n    return new_d","n_lines":9,"__index_level_0__":1396,"repair":""}
{"submission_id":10937,"func_code":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k in d:\n        if k not in new_d:\n            new_d[k] = d[k]\n    return new_d","n_lines":7,"__index_level_0__":1397,"repair":""}
{"submission_id":22399,"func_code":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k, v in d:\n        if k not in new_d:\n            new_d[k] = v\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for k, v in d:\n        if k not in new_d:\n            new_d[k] = v\n    return new_d","n_lines":7,"__index_level_0__":1398,"repair":""}
{"submission_id":1984,"func_code":"def swap_unique_keys_values(d):\n    v = list(d.values())\n    for k in v:\n        if v.count(d[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_1', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_1', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    v = list(d.values())\n    for k in v:\n        if v.count(d[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":7,"__index_level_0__":1399,"repair":""}
{"submission_id":19643,"func_code":"def swap_unique_keys_values(d):\n    v = list(d.values())\n    for k in v:\n        if v.count(v[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_1', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_1', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    v = list(d.values())\n    for k in v:\n        if v.count(v[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":7,"__index_level_0__":1400,"repair":""}
{"submission_id":30,"func_code":"def swap_unique_keys_values(d):\n    val = list(d.values())\n    for char in val:\n        if char.count() > 1:\n            del val[char]\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    val = list(d.values())\n    for char in val:\n        if char.count() > 1:\n            del val[char]\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}","n_lines":10,"__index_level_0__":1401,"repair":""}
{"submission_id":26999,"func_code":"def swap_unique_keys_values(d):\n    val = list(d.values())\n    for char in val:\n        if count(char) > 1:\n            del val[char]\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    val = list(d.values())\n    for char in val:\n        if count(char) > 1:\n            del val[char]\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}","n_lines":10,"__index_level_0__":1402,"repair":""}
{"submission_id":816,"func_code":"def swap_unique_keys_values(d):\n    keys = list(d.keys())\n    values = list(d.values())\n    newD = {}\n    for i in range(len(keys)):\n        if values.count(values[i]) == 1:\n            newD[keys[i]] = values[i]\n    return newD","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7d63d843-7e5d-4c24-a378-1056c311dfd2","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    keys = list(d.keys())\n    values = list(d.values())\n    newD = {}\n    for i in range(len(keys)):\n        if values.count(values[i]) == 1:\n            newD[keys[i]] = values[i]\n    return newD","n_lines":8,"__index_level_0__":1404,"repair":""}
{"submission_id":12600,"func_code":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for key in unique_values:\n        new_d[key] = d[key]\n    return unique_values","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for key in unique_values:\n        new_d[key] = d[key]\n    return unique_values","n_lines":7,"__index_level_0__":1405,"repair":""}
{"submission_id":19947,"func_code":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for key in unique_values:\n        new_d[key] = d[key]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for key in unique_values:\n        new_d[key] = d[key]\n    return new_d","n_lines":7,"__index_level_0__":1406,"repair":""}
{"submission_id":29465,"func_code":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for v in unique_values:\n        new_d[key] = d[key]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f278f0d6-3389-497b-a30b-f0d8ecebb7e1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    unique_values = list(set(d.values()))\n    d = {v: k for k, v in list(d.items())}\n    new_d = {}\n    for v in unique_values:\n        new_d[key] = d[key]\n    return new_d","n_lines":7,"__index_level_0__":1407,"repair":""}
{"submission_id":28123,"func_code":"def swap_unique_keys_values(x):\n    sorx = sorted(d.items, reverse=True)\n    x1 = {}\n    x2 = {}\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    sorx = sorted(d.items, reverse=True)\n    x1 = {}\n    x2 = {}\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1408,"repair":""}
{"submission_id":10665,"func_code":"def swap_unique_keys_values(x):\n    sorx = sorted(x.items, reverse=True)\n    x1 = {}\n    x2 = {}\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    sorx = sorted(x.items, reverse=True)\n    x1 = {}\n    x2 = {}\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1409,"repair":""}
{"submission_id":30347,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    print(l)\n    for key, value in list(s.items()):\n        if key in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    print(l)\n    for key, value in list(s.items()):\n        if key in l:\n            new_dict[value] = key\n    return new_dict","n_lines":9,"__index_level_0__":1420,"repair":""}
{"submission_id":33151,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    print(l)\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    print(l)\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","n_lines":9,"__index_level_0__":1421,"repair":""}
{"submission_id":35186,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    for key, value in list(s.items()):\n        if key in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    for key, value in list(s.items()):\n        if key in l:\n            new_dict[value] = key\n    return new_dict","n_lines":8,"__index_level_0__":1422,"repair":""}
{"submission_id":34331,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] == 1]\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","n_lines":8,"__index_level_0__":1423,"repair":""}
{"submission_id":7158,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] < 2]\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] < 2]\n    for key, value in list(s.items()):\n        if s[key] in l:\n            new_dict[value] = key\n    return new_dict","n_lines":8,"__index_level_0__":1424,"repair":""}
{"submission_id":30632,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] < 2]\n    for key, value in list(s.items()):\n        if s[key] not in l:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    c = Counter(list(s.values()))\n    l = [k for k, v in list(s.items()) if c[v] < 2]\n    for key, value in list(s.items()):\n        if s[key] not in l:\n            new_dict[value] = key\n    return new_dict","n_lines":8,"__index_level_0__":1425,"repair":""}
{"submission_id":12822,"func_code":"def swap_unique_keys_values(dic):\n    new = {}\n    new = {val: key for key, val in list(dic.items())}\n    return new","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c4832969-41c4-4f49-a5b9-3475e4308c10","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='val', ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    new = {}\n    new = {val: key for key, val in list(dic.items())}\n    return new","n_lines":4,"__index_level_0__":1426,"repair":""}
{"submission_id":12803,"func_code":"def swap_unique_keys_values(d):\n    nd = {}\n    dset = set(d.items())\n    d = dict(dset)\n    for k, v in list(d.items()):\n        nd[v] = k\n    return nd","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"05bc0114-9d34-4210-bb9b-07af403e11ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    nd = {}\n    dset = set(d.items())\n    d = dict(dset)\n    for k, v in list(d.items()):\n        nd[v] = k\n    return nd","n_lines":7,"__index_level_0__":1427,"repair":""}
{"submission_id":15493,"func_code":"def swap_unique_keys_values(d):\n    nd = {}\n    dset = set(d.items())\n    return dict(dset)","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"05bc0114-9d34-4210-bb9b-07af403e11ed","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    nd = {}\n    dset = set(d.items())\n    return dict(dset)","n_lines":4,"__index_level_0__":1428,"repair":""}
{"submission_id":18306,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    seen = set()\n    for key in d:\n        seen += d[key]\n    for key in d:\n        if d[key] in seen:\n            new_d[d[key]] = key\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    seen = set()\n    for key in d:\n        seen += d[key]\n    for key in d:\n        if d[key] in seen:\n            new_d[d[key]] = key\n    return new_d","n_lines":9,"__index_level_0__":1429,"repair":""}
{"submission_id":13099,"func_code":"def swap_unique_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    addthese = set()\n    for keys, values in list(dictionary_descriptor.items()):\n        addthese.update(values, keys)\n        new_dictionary[addthese[values]] = addthese[keys]\n    return new_dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    addthese = set()\n    for keys, values in list(dictionary_descriptor.items()):\n        addthese.update(values, keys)\n        new_dictionary[addthese[values]] = addthese[keys]\n    return new_dictionary","n_lines":7,"__index_level_0__":1430,"repair":""}
{"submission_id":16932,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    old = sorted(d.items())\n    for pair in old:\n        if pair[1] not in new_dict:\n            new_dict[pair[1]] = pair[0]\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7c3b55b1-74b7-4570-8484-5a4354d497aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    old = sorted(d.items())\n    for pair in old:\n        if pair[1] not in new_dict:\n            new_dict[pair[1]] = pair[0]\n    return new_dict","n_lines":7,"__index_level_0__":1431,"repair":""}
{"submission_id":987,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(x.items, reverse=True)\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(x.items, reverse=True)\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1432,"repair":""}
{"submission_id":23707,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(d.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), reverse=True)\n    for keys, values in sorx2:\n        if values != 'N':\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(d.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), reverse=True)\n    for keys, values in sorx2:\n        if values != 'N':\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1433,"repair":"def swap_unique_keys_values(x):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        x1 = {}\n    \n        d = x\n        x2 = {}\n        sorx = sorted(list(d.items()), reverse=True)\n        for keys, values in sorx:\n            if values not in x1:\n                x1[values] = keys\n            else:\n                x1[values] = 'N'\n        sorx2 = sorted(list(x1.items()), reverse=True)\n        for keys, values in sorx2:\n            if values != 'N':\n                x2[keys] = values\n        return x2"}
{"submission_id":25649,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if v not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if v != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1434,"repair":""}
{"submission_id":30661,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v in d2:\n            d2[v] = 'N'\n        else:\n            d2[v] = k\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v in d2:\n            d2[v] = 'N'\n        else:\n            d2[v] = k\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d2","n_lines":14,"__index_level_0__":1435,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        d2 = {}\n        d3 = {}\n        ds = sorted(list(d.items()), reverse=True)\n        for k, v in ds:\n            if v in d2:\n                d2[v] = 'N'\n            else:\n                d2[v] = k\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n    \n        return d3"}
{"submission_id":32106,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    d2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='ds2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    d2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","n_lines":14,"__index_level_0__":1436,"repair":""}
{"submission_id":20717,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d2","n_lines":14,"__index_level_0__":1437,"repair":""}
{"submission_id":23451,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[k] = v\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k, v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","n_lines":14,"__index_level_0__":1438,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        d2 = {}\n        d3 = {}\n        ds = sorted(list(d.items()), reverse=True)\n        for k, v in ds:\n    \n            if v not in d2:\n                d2[v] = k\n            else:\n                d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3"}
{"submission_id":36051,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[v] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1439,"repair":""}
{"submission_id":15498,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f15a871d-61c5-494f-8886-91e213b59201","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","n_lines":14,"__index_level_0__":1440,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        d2 = {}\n        d3 = {}\n    \n        for k,v in d.items():\n            if v not in d2:\n                d2[v] = k\n            else:\n                d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k,v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3"}
{"submission_id":39177,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), revers=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1441,"repair":""}
{"submission_id":8344,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k_v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"df3b8d82-7372-4e43-b692-9ab72c754509","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n    ds2 = sorted(list(d2.items()), reverse=True)\n    for k_v in ds2:\n        if v != 'N':\n            d3[k] = v\n    return d3","n_lines":14,"__index_level_0__":1442,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        d2 = {}\n        d3 = {}\n        ds = sorted(list(d.items()), reverse=True)\n        for k, v in ds:\n            if v not in d2:\n                d2[v] = k\n            else:\n                d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n    \n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3"}
{"submission_id":8193,"func_code":"def swap_unique_keys_values(d):\n    swap1 = {}\n    swap2 = {}\n    swapsorted1 = sorted(list(d.items()), reverse=True)\n    for k, v in swapsorted1:\n        if v not in swap1:\n            swap1[v] = k\n        else:\n            swap1[v] = 'N'\n    swapsorted2 = sorted(list(swap1.items()), reverse=True)\n    for k, v in ar2:\n        if v != 'N':\n            swap2[k] = v\n    return swap2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"60b76a41-ddf8-4d27-a286-8da8c4e298cd","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='ar2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    swap1 = {}\n    swap2 = {}\n    swapsorted1 = sorted(list(d.items()), reverse=True)\n    for k, v in swapsorted1:\n        if v not in swap1:\n            swap1[v] = k\n        else:\n            swap1[v] = 'N'\n    swapsorted2 = sorted(list(swap1.items()), reverse=True)\n    for k, v in ar2:\n        if v != 'N':\n            swap2[k] = v\n    return swap2","n_lines":14,"__index_level_0__":1443,"repair":"def swap_unique_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    swap1 = {}\n    swap2 = {}\n    swapsorted1 = sorted(list(d.items()), reverse=True)\n    for k, v in swapsorted1:\n        if v not in swap1:\n            swap1[v] = k\n        else:\n            swap1[v] = 'N'\n    swapsorted2 = sorted(list(swap1.items()), reverse=True)\n    for k, v in swapsorted2:\n        if v != 'N':\n            swap2[k] = v\n    return swap2"}
{"submission_id":29397,"func_code":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), reverse=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c0d569cd-4374-4e65-8e98-e814031fb3ca","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(x):\n    x1 = {}\n    x2 = {}\n    sorx = sorted(list(x.items()), reverse=True)\n    for keys, values in sorx:\n        if values not in x1:\n            x1[values] = keys\n        else:\n            x1[values] = 'N'\n    sorx2 = sorted(list(x1.items()), reverse=True)\n    for keys, values in sorx2:\n        if values != sorx2:\n            x2[keys] = values\n    return x2","n_lines":14,"__index_level_0__":1444,"repair":""}
{"submission_id":6338,"func_code":"def swap_unique_keys_values(d):\n    a = {}\n    b = {}\n    c = sorted(list(d.items()), reverse=True)\n    for k, v in c:\n        if v not in b:\n            b[v] = k\n        else:\n            b[v] = 'A'\n    e = sorted(list(a.items()), reverse=True)\n    for k, v in e:\n        if v != 'A':\n            b = v\n    return b","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"919f743b-c8d6-4955-bb0f-9ca7c9bbe1be","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='A'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='A')]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    a = {}\n    b = {}\n    c = sorted(list(d.items()), reverse=True)\n    for k, v in c:\n        if v not in b:\n            b[v] = k\n        else:\n            b[v] = 'A'\n    e = sorted(list(a.items()), reverse=True)\n    for k, v in e:\n        if v != 'A':\n            b = v\n    return b","n_lines":14,"__index_level_0__":1445,"repair":""}
{"submission_id":30738,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    sortd = sorted(list(d.items()), reverse=True)\n    return sortd","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9d69cd84-adaa-42a8-9530-416762b34c13","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    sortd = sorted(list(d.items()), reverse=True)\n    return sortd","n_lines":5,"__index_level_0__":1446,"repair":""}
{"submission_id":9704,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for wards in bad:\n        if wards not in bad:\n            end.update(wards)\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for wards in bad:\n        if wards not in bad:\n            end.update(wards)\n    return {v: k for k, v in list(d.items())}","n_lines":13,"__index_level_0__":1447,"repair":""}
{"submission_id":40600,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for wards in bad:\n        if wards not in bad:\n            end.update(wards)\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for wards in bad:\n        if wards not in bad:\n            end.update(wards)\n    return {v: k for k, v in list(wards.items())}","n_lines":13,"__index_level_0__":1448,"repair":""}
{"submission_id":13296,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(end.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(end.items())}","n_lines":13,"__index_level_0__":1450,"repair":""}
{"submission_id":3834,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return bad","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return bad","n_lines":13,"__index_level_0__":1451,"repair":""}
{"submission_id":40282,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","n_lines":10,"__index_level_0__":1452,"repair":"def swap_unique_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[v]\n        else:\n            wards[v] = k\n    return {k: v for k, v in list(wards.items())}"}
{"submission_id":14555,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[v]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[v]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","n_lines":10,"__index_level_0__":1453,"repair":"def swap_unique_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[v]\n        else:\n            wards[v] = k\n    return {k: v for k, v in list(wards.items())}"}
{"submission_id":6861,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k, v]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_4', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k, v]\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(wards.items())}","n_lines":10,"__index_level_0__":1454,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        wards = {}\n    \n        for k, v in list(d.items()):\n            if v in wards:\n                del wards[v]\n            else:\n                wards[v] = k\n        return {k: v for k, v in list(wards.items())}"}
{"submission_id":19424,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            bad[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            bad[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(wards.items())}","n_lines":13,"__index_level_0__":1455,"repair":""}
{"submission_id":31761,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            bad[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(end.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            bad[k] = v\n    for k, v in list(wards.items()):\n        if v not in bad:\n            end[k] = v\n    return {v: k for k, v in list(end.items())}","n_lines":13,"__index_level_0__":1456,"repair":""}
{"submission_id":42019,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del wards[k]\n    return {v: k for k, v in list(wards.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    bad = {}\n    end = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del wards[k]\n    return {v: k for k, v in list(wards.items())}","n_lines":10,"__index_level_0__":1457,"repair":"def swap_unique_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[v] = k\n        elif v in wards:\n            del wards[v]\n    return {k: v for k, v in list(wards.items())}"}
{"submission_id":8456,"func_code":"def swap_unique_keys_values(d):\n    d_swap = {}\n    d_tmp = {}\n    for x in d:\n        d_swap[d[x]] = x\n    return d_swap","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"71d3efb1-0433-44ad-83f0-224949653177","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d_swap = {}\n    d_tmp = {}\n    for x in d:\n        d_swap[d[x]] = x\n    return d_swap","n_lines":6,"__index_level_0__":1458,"repair":""}
{"submission_id":29597,"func_code":"def swap_unique_keys_values(d):\n    seen = {}\n    new_d = {}\n    for k in d:\n        seen[k] += 1\n    for item in seen:\n        if d[item] == 1:\n            new_d[item] = True\n    for k in new_d:\n        for key in d:\n            if k in d:\n                new_d[k] = d[key]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    seen = {}\n    new_d = {}\n    for k in d:\n        seen[k] += 1\n    for item in seen:\n        if d[item] == 1:\n            new_d[item] = True\n    for k in new_d:\n        for key in d:\n            if k in d:\n                new_d[k] = d[key]\n    return new_d","n_lines":13,"__index_level_0__":1459,"repair":""}
{"submission_id":34152,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    for k, v in list(d.items()):\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'X'\n    print(d2)","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"0964a543-93db-460b-a0c5-d0c94fea250f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='X'))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = {}\n    for k, v in list(d.items()):\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'X'\n    print(d2)","n_lines":9,"__index_level_0__":1460,"repair":""}
{"submission_id":21083,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    h = {}\n    for k, v in sorted(list(d.items()), reverse=True):\n        if v in e:\n            e[k] = v\n        else:\n            e[k] = 'n'\n    for k, v in sorted(list(e.items()), reverse=True):\n        if v != 'n':\n            h[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Constant(value='n'))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='n')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    h = {}\n    for k, v in sorted(list(d.items()), reverse=True):\n        if v in e:\n            e[k] = v\n        else:\n            e[k] = 'n'\n    for k, v in sorted(list(e.items()), reverse=True):\n        if v != 'n':\n            h[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":12,"__index_level_0__":1461,"repair":""}
{"submission_id":34599,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    h = {}\n    for k, v in d:\n        if v in e:\n            e[k] = v\n        else:\n            e[k] = 'n'\n    for k, v in e:\n        if v != 'n':\n            h[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Constant(value='n'))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='n')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    h = {}\n    for k, v in d:\n        if v in e:\n            e[k] = v\n        else:\n            e[k] = 'n'\n    for k, v in e:\n        if v != 'n':\n            h[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":12,"__index_level_0__":1462,"repair":""}
{"submission_id":37639,"func_code":"def swap_unique_keys_values(d):\n    d1 = {}\n    new_dict = {}\n    for k, v in d:\n        if d[v] not in d1:\n            d1[v] = k\n        else:\n            d1[v] = ''\n    for k, v in d1:\n        if v != '':\n            new_dict[k] = v\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"6a72520c-4c39-4c03-b7cf-5550dbde3147","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=''))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d1 = {}\n    new_dict = {}\n    for k, v in d:\n        if d[v] not in d1:\n            d1[v] = k\n        else:\n            d1[v] = ''\n    for k, v in d1:\n        if v != '':\n            new_dict[k] = v\n    return new_dict","n_lines":12,"__index_level_0__":1463,"repair":""}
{"submission_id":26603,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = []\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = kd\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f15a871d-61c5-494f-8886-91e213b59201","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='kd', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = []\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = kd\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","n_lines":14,"__index_level_0__":1464,"repair":""}
{"submission_id":1349,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = []\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"f15a871d-61c5-494f-8886-91e213b59201","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    d3 = []\n    ds = sorted(list(d.items()), reverse=True)\n    for k, v in ds:\n        if v not in d2:\n            d2[v] = k\n        else:\n            d2[v] = 'N'\n        ds2 = sorted(list(d2.items()), reverse=True)\n        for k, v in ds2:\n            if v != 'N':\n                d3[k] = v\n        return d3","n_lines":14,"__index_level_0__":1465,"repair":""}
{"submission_id":26672,"func_code":"def swap_unique_keys_values(d):\n    swp_d = {}\n    nums = []\n    final_nums = []\n    dic = {}\n    for lines in d:\n        nums.append(str(d[lines]))\n        swp_d[d[lines]] = lines\n    for lines in nums:\n        if nums.count(lines) == 1:\n            final_nums.append(int(lines))\n    for words in final_nums:\n        dic[words] = swp_d[words]\n    return dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"142cacda-ba1b-469c-9b25-8603a78324c9","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    swp_d = {}\n    nums = []\n    final_nums = []\n    dic = {}\n    for lines in d:\n        nums.append(str(d[lines]))\n        swp_d[d[lines]] = lines\n    for lines in nums:\n        if nums.count(lines) == 1:\n            final_nums.append(int(lines))\n    for words in final_nums:\n        dic[words] = swp_d[words]\n    return dic","n_lines":14,"__index_level_0__":1466,"repair":""}
{"submission_id":35568,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","n_lines":13,"__index_level_0__":1473,"repair":""}
{"submission_id":8069,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","n_lines":13,"__index_level_0__":1474,"repair":""}
{"submission_id":11220,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(d[key])\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(d[key])\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","n_lines":13,"__index_level_0__":1475,"repair":""}
{"submission_id":2885,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(d[key])\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if d[key] in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(d[key])\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if d[key] in unique_values:\n            new_dict[unique_values[key]] = key\n    return new_dict","n_lines":13,"__index_level_0__":1476,"repair":""}
{"submission_id":41107,"func_code":"def swap_unique_keys_values(n):\n    dic = {}\n    values = []\n    no_uni = []\n    for key in n:\n        if n[key] in values:\n            no_uni.append(n[key])\n        else:\n            values, append(n[key])\n    for key in n:\n        if not n[key] in no_uni:\n            dic[n[key]] = key\n    return dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"16011fd4-f5e2-4c2c-b014-86692ff746d5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Expr(value=Tuple(elts=[Name(id='x_2', ctx=Load()), Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(n):\n    dic = {}\n    values = []\n    no_uni = []\n    for key in n:\n        if n[key] in values:\n            no_uni.append(n[key])\n        else:\n            values, append(n[key])\n    for key in n:\n        if not n[key] in no_uni:\n            dic[n[key]] = key\n    return dic","n_lines":13,"__index_level_0__":1477,"repair":"def swap_unique_keys_values(n):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        dic = {}\n        values = []\n    \n        def append(value):\n            values.append(value)\n        \n        no_uni = []\n        for key in n:\n            if n[key] in values:\n                no_uni.append(n[key])\n            else:\n                values, append(n[key])\n        for key in n:\n            if not n[key] in no_uni:\n                dic[n[key]] = key\n        return dic"}
{"submission_id":30763,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    not_unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n        else:\n            not unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[Expr(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    not_unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n        else:\n            not unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","n_lines":12,"__index_level_0__":1478,"repair":""}
{"submission_id":35984,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    not_unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n        else:\n            not unique.append(key)\n    for keys in unique:\n        if not keys in unique:\n            dictionary[d[keys]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[Expr(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    not_unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n        else:\n            not unique.append(key)\n    for keys in unique:\n        if not keys in unique:\n            dictionary[d[keys]] = keys\n    return dictionary","n_lines":13,"__index_level_0__":1479,"repair":""}
{"submission_id":16920,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    keys = []\n    values = []\n    for key, value in list(d.items()):\n        keys.append(value)\n        values.append(key)\n    return keys, values","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c007cbe7-350c-4111-aa1b-fca93c97d7f3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    keys = []\n    values = []\n    for key, value in list(d.items()):\n        keys.append(value)\n        values.append(key)\n    return keys, values","n_lines":8,"__index_level_0__":1480,"repair":""}
{"submission_id":35848,"func_code":"def swap_unique_keys_values(d):\n    q = {}\n    a = []\n    for key in d:\n        value = d[key]\n        if value not in a:\n            q[value] = key\n            a.append(value)\n    print(a)\n    return q","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    q = {}\n    a = []\n    for key in d:\n        value = d[key]\n        if value not in a:\n            q[value] = key\n            a.append(value)\n    print(a)\n    return q","n_lines":10,"__index_level_0__":1481,"repair":""}
{"submission_id":27794,"func_code":"def swap_unique_keys_values(d):\n    q = {}\n    a = []\n    for key in d:\n        value = d[key]\n        if value not in a:\n            q[value] = key\n            a.append(value)\n    return q","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"b799d072-e18e-40e6-96cb-77c78c9e2a0f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    q = {}\n    a = []\n    for key in d:\n        value = d[key]\n        if value not in a:\n            q[value] = key\n            a.append(value)\n    return q","n_lines":9,"__index_level_0__":1482,"repair":""}
{"submission_id":31992,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    seen = []\n    for key in d:\n        seen.append(d[key])\n    for key in d:\n        if d[key] in set(seen):\n            new_d[d[key]] = key\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    seen = []\n    for key in d:\n        seen.append(d[key])\n    for key in d:\n        if d[key] in set(seen):\n            new_d[d[key]] = key\n    return new_d","n_lines":9,"__index_level_0__":1483,"repair":""}
{"submission_id":24872,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    vv = []\n    for k in d:\n        vv.append(d[k])\n    for num in vv:\n        for k in d:\n            if not vv.count(num) > 1:\n                if d[k] == num:\n                    new_d[k] = num\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    vv = []\n    for k in d:\n        vv.append(d[k])\n    for num in vv:\n        for k in d:\n            if not vv.count(num) > 1:\n                if d[k] == num:\n                    new_d[k] = num\n    return new_d","n_lines":11,"__index_level_0__":1484,"repair":""}
{"submission_id":13427,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if key in unique:\n            unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if key in unique:\n            unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","n_lines":9,"__index_level_0__":1485,"repair":""}
{"submission_id":21516,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if key not in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if key not in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1486,"repair":""}
{"submission_id":41323,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[0]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[0]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1487,"repair":""}
{"submission_id":31710,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if d[key] in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if d[key] in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1488,"repair":""}
{"submission_id":2070,"func_code":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    print(deleted)\n    for item in deleted:\n        del newDick[item]","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e6a8cd93-4b6e-49db-8b16-a473b45b9a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    print(deleted)\n    for item in deleted:\n        del newDick[item]","n_lines":11,"__index_level_0__":1489,"repair":""}
{"submission_id":4677,"func_code":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    print(deleted)","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e6a8cd93-4b6e-49db-8b16-a473b45b9a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    print(deleted)","n_lines":9,"__index_level_0__":1490,"repair":""}
{"submission_id":34345,"func_code":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    for item in deleted:\n        del newDick[item]\n    print(newDick)","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e6a8cd93-4b6e-49db-8b16-a473b45b9a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    for item in deleted:\n        del newDick[item]\n    print(newDick)","n_lines":11,"__index_level_0__":1491,"repair":"def swap_unique_keys_values(dick):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        newDick = {}\n        deleted = []\n        for item in dick:\n            if dick[item] not in newDick:\n                newDick[dick[item]] = item\n            else:\n                deleted.append(dick[item])\n        for item in deleted:\n            del newDick[item]\n    \n        return newDick"}
{"submission_id":22974,"func_code":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    for item in deleted:\n        del newDick[item]","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e6a8cd93-4b6e-49db-8b16-a473b45b9a4a","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dick):\n    newDick = {}\n    deleted = []\n    for item in dick:\n        if dick[item] not in newDick:\n            newDick[dick[item]] = item\n        else:\n            deleted.append(dick[item])\n    for item in deleted:\n        del newDick[item]","n_lines":10,"__index_level_0__":1492,"repair":"def swap_unique_keys_values(dick):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        newDick = {}\n        deleted = []\n        for item in dick:\n            if dick[item] not in newDick:\n                newDick[dick[item]] = item\n            else:\n                deleted.append(dick[item])\n    \n        newDick = {k: v for k, v in newDick.items() if k not in deleted}\n    \n        return newDick"}
{"submission_id":41012,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(key)\n    for keys in unique:\n        dictionary[d[keys]] = keys\n    return dictionary","n_lines":9,"__index_level_0__":1493,"repair":""}
{"submission_id":27628,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for key in unique:\n        dictionary[d[key]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='keys', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for key in unique:\n        dictionary[d[key]] = keys\n    return dictionary","n_lines":9,"__index_level_0__":1494,"repair":""}
{"submission_id":24937,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for key in unique:\n        dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for key in unique:\n        dictionary[d[key]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1495,"repair":""}
{"submission_id":37268,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1496,"repair":""}
{"submission_id":7426,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys[0] in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys[0] in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1497,"repair":""}
{"submission_id":31406,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys[1] in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys[1] in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1498,"repair":""}
{"submission_id":10294,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        dictionary[d[key]] = keys\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        dictionary[d[key]] = keys\n    return dictionary","n_lines":9,"__index_level_0__":1499,"repair":""}
{"submission_id":20277,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        dictionary[d[keys]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        dictionary[d[keys]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1500,"repair":""}
{"submission_id":36890,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not key in unique:\n            unique.append(d[key])\n    for keys in unique:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1501,"repair":""}
{"submission_id":38537,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        dictionary[d[unique]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        dictionary[d[unique]] = key\n    return dictionary","n_lines":8,"__index_level_0__":1502,"repair":""}
{"submission_id":25866,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        dictionary[d[unique[key]]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        dictionary[d[unique[key]]] = key\n    return dictionary","n_lines":8,"__index_level_0__":1503,"repair":""}
{"submission_id":19054,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        for i in unique:\n            dictionary[i] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(key)\n        for i in unique:\n            dictionary[i] = key\n    return dictionary","n_lines":9,"__index_level_0__":1504,"repair":""}
{"submission_id":23751,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        dictionary[d[unique]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        dictionary[d[unique]] = key\n    return dictionary","n_lines":8,"__index_level_0__":1505,"repair":""}
{"submission_id":29087,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i] = key\n    return dictionary","n_lines":9,"__index_level_0__":1506,"repair":""}
{"submission_id":943,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[d[i]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[d[i]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1507,"repair":""}
{"submission_id":15558,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[0]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[0]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1508,"repair":""}
{"submission_id":18007,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[1]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[1]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1509,"repair":""}
{"submission_id":4825,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[i]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[unique[i]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1510,"repair":""}
{"submission_id":14508,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i[0]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i[0]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1511,"repair":""}
{"submission_id":19789,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i[unique]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n        for i in unique:\n            dictionary[i[unique]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1512,"repair":""}
{"submission_id":22528,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n    for keys in d:\n        if keys in unique:\n            dictionary[d[key]] = key\n    return dictionary","n_lines":10,"__index_level_0__":1513,"repair":""}
{"submission_id":3400,"func_code":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n    for i in unique:\n        dictionary[unique[i]] = key\n    return dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"07a2a74b-d2da-4f91-ba7e-5881b51fd5e4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dictionary = {}\n    unique = []\n    for key in d:\n        if not d[key] in unique:\n            unique.append(d[key])\n    for i in unique:\n        dictionary[unique[i]] = key\n    return dictionary","n_lines":9,"__index_level_0__":1514,"repair":""}
{"submission_id":35707,"func_code":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    print(a)\n    for k, v in list(dict.items()):\n        print(a.count('v'))\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    print(a)\n    for k, v in list(dict.items()):\n        print(a.count('v'))\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","n_lines":10,"__index_level_0__":1515,"repair":""}
{"submission_id":13704,"func_code":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    print(a)\n    for k, v in list(dict.items()):\n        if a.count('v') == 1:\n            dict1[k] = v\n    print(dict1)\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    print(a)\n    for k, v in list(dict.items()):\n        if a.count('v') == 1:\n            dict1[k] = v\n    print(dict1)\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","n_lines":12,"__index_level_0__":1516,"repair":""}
{"submission_id":38758,"func_code":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    for k, v in list(dict.items()):\n        if a.count('v') == 1:\n            dict1[k] = v\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    dict1 = {}\n    a = []\n    for k, v in list(dict.items()):\n        a.append(v)\n    for k, v in list(dict.items()):\n        if a.count('v') == 1:\n            dict1[k] = v\n    new_dict = {v: k for k, v in list(dict1.items())}\n    return new_dict","n_lines":10,"__index_level_0__":1517,"repair":""}
{"submission_id":2724,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    keys = [key for key in list(d.keys())]\n    values = [value for value in list(d.values())]\n    for v in list(d.values()):\n        if values.count(v) == 1:\n            new[v] = k\n    return new","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"d50d9b01-3a58-41e1-995b-b40bb031ea43","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='k', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    keys = [key for key in list(d.keys())]\n    values = [value for value in list(d.values())]\n    for v in list(d.values()):\n        if values.count(v) == 1:\n            new[v] = k\n    return new","n_lines":8,"__index_level_0__":1518,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        new = {}\n        keys = [key for key in list(d.keys())]\n        values = [value for value in list(d.values())]\n    \n        for k,v in zip(keys, values):\n            if values.count(v) == 1:\n                new[v] = k\n        return new"}
{"submission_id":6150,"func_code":"def swap_unique_keys_values(d):\n    output = {}\n    new = d\n    for key, value in list(new.items()):\n        new.pop(key, value)\n        if value not in list(new.values()):\n            output[key] = value\n    inverse = {a: b for b, a in list(output.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_0', ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_4', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    output = {}\n    new = d\n    for key, value in list(new.items()):\n        new.pop(key, value)\n        if value not in list(new.values()):\n            output[key] = value\n    inverse = {a: b for b, a in list(output.items())}\n    return inverse","n_lines":9,"__index_level_0__":1519,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        output = {}\n    \n        for key, value in d.items():\n            new = d.copy()\n            new.pop(key, value)\n            if value not in list(new.values()):\n                output[key] = value\n        inverse = {a: b for b, a in list(output.items())}\n        return inverse"}
{"submission_id":36718,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for d_tup in list(d.items()):\n        if d.values.count(d_tup[1]) == 1:\n            e[d_tup[1]] = d_tup[0]\n    return e","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9f673df6-fcfd-4d07-b0dd-1f553c38f25b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for d_tup in list(d.items()):\n        if d.values.count(d_tup[1]) == 1:\n            e[d_tup[1]] = d_tup[0]\n    return e","n_lines":6,"__index_level_0__":1520,"repair":""}
{"submission_id":35564,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for k in d:\n        v = d.has(k)\n        if v in new_dict:\n            del new_dict[v]\n        else:\n            new_dict[v] = k\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"2bb8ff82-061d-43cd-a020-a2cffad09d1e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='has', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for k in d:\n        v = d.has(k)\n        if v in new_dict:\n            del new_dict[v]\n        else:\n            new_dict[v] = k\n    return new_dict","n_lines":9,"__index_level_0__":1521,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        new_dict = {}\n        for k in d:\n    \n            v = d[k]\n            if v in new_dict:\n                del new_dict[v]\n            else:\n                new_dict[v] = k\n        return new_dict"}
{"submission_id":39699,"func_code":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        new_dic[key] = value\n    return new_dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        new_dic[key] = value\n    return new_dic","n_lines":9,"__index_level_0__":1522,"repair":""}
{"submission_id":26256,"func_code":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        new_dic[key] = dic[key]\n    return new_dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        new_dic[key] = dic[key]\n    return new_dic","n_lines":9,"__index_level_0__":1523,"repair":""}
{"submission_id":26754,"func_code":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        if key not in new_dic:\n            new_dic[key] = value\n    return new_dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"dcc424e7-96ab-4451-ad16-597d84c13c2e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    dic = {}\n    for key in d:\n        value = d[key]\n        dic[value] = key\n    new_dic = {}\n    for key in dic:\n        if key not in new_dic:\n            new_dic[key] = value\n    return new_dic","n_lines":10,"__index_level_0__":1524,"repair":""}
{"submission_id":39260,"func_code":"def swap_unique_keys_values(d):\n    d_swap = {}\n    for x in d:\n        d_swap[d[x]] = x\n        if d[x] in d_swap:\n            del d_swap[d[x]]\n    return d_swap","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"71d3efb1-0433-44ad-83f0-224949653177","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d_swap = {}\n    for x in d:\n        d_swap[d[x]] = x\n        if d[x] in d_swap:\n            del d_swap[d[x]]\n    return d_swap","n_lines":7,"__index_level_0__":1525,"repair":""}
{"submission_id":27409,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] and s not in e:\n            e[s] = d[s]\n        print(d[s])\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] and s not in e:\n            e[s] = d[s]\n        print(d[s])\n    return {v: k for k, v in list(e.items())}","n_lines":7,"__index_level_0__":1526,"repair":""}
{"submission_id":24040,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] and s not in e:\n            e[s] = d[s]\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] and s not in e:\n            e[s] = d[s]\n    return {v: k for k, v in list(e.items())}","n_lines":6,"__index_level_0__":1527,"repair":""}
{"submission_id":18713,"func_code":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        else:\n            del d[k]\n    return opposite","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        else:\n            del d[k]\n    return opposite","n_lines":8,"__index_level_0__":1528,"repair":""}
{"submission_id":15736,"func_code":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        else:\n            del opposite[k]\n    return opposite","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        else:\n            del opposite[k]\n    return opposite","n_lines":8,"__index_level_0__":1529,"repair":""}
{"submission_id":41685,"func_code":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        elif k in opposite:\n            del opposite[k]\n    return opposite","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if k not in opposite:\n            opposite[d[k]] = k\n        elif k in opposite:\n            del opposite[k]\n    return opposite","n_lines":8,"__index_level_0__":1530,"repair":""}
{"submission_id":30609,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for key in d:\n        if key not in new_dict:\n            new_dict[d[key]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for key in d:\n        if key not in new_dict:\n            new_dict[d[key]] = key\n    return new_dict","n_lines":6,"__index_level_0__":1531,"repair":""}
{"submission_id":26944,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] in d:\n            d.remove(s)\n    print(d)\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] in d:\n            d.remove(s)\n    print(d)\n    return {v: k for k, v in list(d.items())}","n_lines":7,"__index_level_0__":1532,"repair":""}
{"submission_id":14914,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del s\n    print(e)\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del s\n    print(e)\n    return {v: k for k, v in list(e.items())}","n_lines":9,"__index_level_0__":1533,"repair":""}
{"submission_id":23419,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del s\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del s\n    return {v: k for k, v in list(e.items())}","n_lines":8,"__index_level_0__":1534,"repair":""}
{"submission_id":826,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del d[s]\n    print(e)\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            del d[s]\n    print(e)\n    return {v: k for k, v in list(e.items())}","n_lines":9,"__index_level_0__":1535,"repair":""}
{"submission_id":16389,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            e.remove(s)\n    print(e)\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n        elif d[s] in e:\n            e.remove(s)\n    print(e)\n    return {v: k for k, v in list(e.items())}","n_lines":9,"__index_level_0__":1536,"repair":""}
{"submission_id":36211,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for s in d:\n        if d[s] not in e:\n            e[s] = d[s]\n    return {v: k for k, v in list(e.items())}","n_lines":6,"__index_level_0__":1537,"repair":""}
{"submission_id":32081,"func_code":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if d[k] not in opposite:\n            opposite[d[k]] = k\n        else:\n            del d[k]\n    return opposite","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    opposite = {}\n    for k in d:\n        if d[k] not in opposite:\n            opposite[d[k]] = k\n        else:\n            del d[k]\n    return opposite","n_lines":8,"__index_level_0__":1538,"repair":""}
{"submission_id":13751,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for key in d:\n        if d[key] not in new_d:\n            new_d[d[key]] = key\n        else:\n            del new_d[key]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e425d75d-4acb-48c4-b113-9d72b4603c15","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for key in d:\n        if d[key] not in new_d:\n            new_d[d[key]] = key\n        else:\n            del new_d[key]\n    return new_d","n_lines":8,"__index_level_0__":1539,"repair":""}
{"submission_id":30931,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for key in d:\n        if d[key] not in new_dict:\n            new_dict[d[key]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"6a72520c-4c39-4c03-b7cf-5550dbde3147","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for key in d:\n        if d[key] not in new_dict:\n            new_dict[d[key]] = key\n    return new_dict","n_lines":6,"__index_level_0__":1540,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        new_dict = {}\n        for key in d:\n    \n            if d[key] in new_dict:\n                new_dict[d[key]] = new_dict[d[key]]\n                del new_dict[d[key]]\n            else:\n                new_dict[d[key]] = key\n        return new_dict"}
{"submission_id":29261,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k in d:\n        if not d.count(d[k]) > 1:\n            new_d[k] = d[k]\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k in d:\n        if not d.count(d[k]) > 1:\n            new_d[k] = d[k]\n    return new_d","n_lines":6,"__index_level_0__":1541,"repair":""}
{"submission_id":6202,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        new_d[v] = k\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"75fca52d-a61c-4d91-946c-d376c5569767","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        new_d[v] = k\n    return new_d","n_lines":5,"__index_level_0__":1542,"repair":""}
{"submission_id":16291,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        d.pop(key, value)\n        if value not in list(d.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        d.pop(key, value)\n        if value not in list(d.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":8,"__index_level_0__":1543,"repair":""}
{"submission_id":40766,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s.count(s[key]) == 1:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s.count(s[key]) == 1:\n            new_dict[value] = key\n    return new_dict","n_lines":6,"__index_level_0__":1544,"repair":""}
{"submission_id":35509,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value in list(new.values()):\n            del new[key]\n        elif value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value in list(new.values()):\n            del new[key]\n        elif value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1545,"repair":""}
{"submission_id":7586,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value in list(new.values()):\n            del new[key, value]\n        elif value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value in list(new.values()):\n            del new[key, value]\n        elif value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1546,"repair":""}
{"submission_id":9742,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        else:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='bad', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        else:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1547,"repair":""}
{"submission_id":16876,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='bad', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            bad[k] = v\n        elif v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1548,"repair":""}
{"submission_id":6719,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del d[k, v]\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del d[k, v]\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1549,"repair":""}
{"submission_id":1633,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k, v]\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            del wards[k, v]\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1550,"repair":""}
{"submission_id":14561,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, None)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, None)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1551,"repair":""}
{"submission_id":40173,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, v)\n            d.pop(k, v)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, v)\n            d.pop(k, v)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":9,"__index_level_0__":1552,"repair":""}
{"submission_id":18189,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, v)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            d.pop(k, v)\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1553,"repair":""}
{"submission_id":5943,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            wards.pop([k])\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[List(elts=[Name(id='x_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v in wards:\n            wards.pop([k])\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1554,"repair":""}
{"submission_id":35476,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(d.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(d.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":7,"__index_level_0__":1555,"repair":""}
{"submission_id":4291,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(d.values()):\n            new[key] = value\n    for key, value in list(new.items()):\n        del d[key, value]\n    output = {}\n    for key, value in list(new.items()):\n        if value not in list(d.values()):\n            output[key] = value\n    inverse = {a: b for b, a in list(output.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(d.values()):\n            new[key] = value\n    for key, value in list(new.items()):\n        del d[key, value]\n    output = {}\n    for key, value in list(new.items()):\n        if value not in list(d.values()):\n            output[key] = value\n    inverse = {a: b for b, a in list(output.items())}\n    return inverse","n_lines":13,"__index_level_0__":1557,"repair":""}
{"submission_id":19105,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if v not in list(new_d.keys()):\n            new_d[v] = k\n        else:\n            0\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"97b1fa02-4c4e-425b-a371-6b1b38862a02","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Expr(value=Constant(value=0))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if v not in list(new_d.keys()):\n            new_d[v] = k\n        else:\n            0\n    return new_d","n_lines":8,"__index_level_0__":1558,"repair":""}
{"submission_id":8493,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n        else:\n            del new[key]\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n        else:\n            del new[key]\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1559,"repair":""}
{"submission_id":30221,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n        else:\n            del d2[k]\n    print(d2)\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"0964a543-93db-460b-a0c5-d0c94fea250f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n        else:\n            del d2[k]\n    print(d2)\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","n_lines":12,"__index_level_0__":1560,"repair":""}
{"submission_id":33495,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n        if value in list(new.values()):\n            del d[key]\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n        if value in list(new.values()):\n            del d[key]\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1561,"repair":""}
{"submission_id":2971,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"0964a543-93db-460b-a0c5-d0c94fea250f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","n_lines":9,"__index_level_0__":1562,"repair":""}
{"submission_id":40098,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    d3 = {}\n    for k, v in list(d2.items()):\n        if v not in list(d.values()):\n            d3[v] = k\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"0964a543-93db-460b-a0c5-d0c94fea250f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    d3 = {}\n    for k, v in list(d2.items()):\n        if v not in list(d.values()):\n            d3[v] = k\n    return d3","n_lines":10,"__index_level_0__":1563,"repair":""}
{"submission_id":21956,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":7,"__index_level_0__":1564,"repair":""}
{"submission_id":19638,"func_code":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    print(d2)\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"0964a543-93db-460b-a0c5-d0c94fea250f","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    d2 = {}\n    for k, v in list(d.items()):\n        if v not in list(d2.values()):\n            d2[k] = v\n    print(d2)\n    d3 = {}\n    for k, v in list(d2.items()):\n        d3[v] = k\n    return d3","n_lines":10,"__index_level_0__":1565,"repair":""}
{"submission_id":38687,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            print(value)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in list(new.values()):\n            print(value)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":8,"__index_level_0__":1567,"repair":""}
{"submission_id":11536,"func_code":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for k, v in list(d.items()):\n        if v not in new_dict:\n            new_dict = k\n        else:\n            del new_dict[v]\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"825987dd-47a8-4023-b124-16b318935de3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_dict = {}\n    for k, v in list(d.items()):\n        if v not in new_dict:\n            new_dict = k\n        else:\n            del new_dict[v]\n    return new_dict","n_lines":8,"__index_level_0__":1568,"repair":"def swap_unique_keys_values(d):\n    \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n    swapped={}\n    new_dict = {}\n    for k, v in list(d.items()):\n        if v not in new_dict:\n            new_dict[v] = k\n        else:\n            del new_dict[v]\n    return new_dict"}
{"submission_id":34238,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del d[k]\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del d[k]\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1569,"repair":""}
{"submission_id":37299,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del d[v]\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            del d[v]\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1570,"repair":""}
{"submission_id":6846,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            d.pop(k, v)\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n        elif v in wards:\n            d.pop(k, v)\n    return {v: k for k, v in list(d.items())}","n_lines":8,"__index_level_0__":1571,"repair":""}
{"submission_id":34508,"func_code":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in new:\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new = {}\n    for key, value in list(d.items()):\n        if value not in new:\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":7,"__index_level_0__":1572,"repair":""}
{"submission_id":26799,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if v not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":6,"__index_level_0__":1573,"repair":""}
{"submission_id":21798,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if v not in new_d:\n            new_d[v] = k\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"5aa80855-56ed-43aa-9b33-19faef108ec0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if v not in new_d:\n            new_d[v] = k\n    return new_d","n_lines":6,"__index_level_0__":1574,"repair":""}
{"submission_id":16160,"func_code":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if {k, v} not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"e4629340-a577-4a87-bbfb-8adf98c283ef","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Set(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())]), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    wards = {}\n    for k, v in list(d.items()):\n        if {k, v} not in wards:\n            wards[k] = v\n    return {v: k for k, v in list(d.items())}","n_lines":6,"__index_level_0__":1575,"repair":""}
{"submission_id":39149,"func_code":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if d[k] in new_d:\n            del new_d[k]\n        else:\n            new_d[v] = k\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"d0af1b08-7254-49f0-8cc4-d63a85c9199d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    new_d = {}\n    for k, v in list(d.items()):\n        if d[k] in new_d:\n            del new_d[k]\n        else:\n            new_d[v] = k\n    return new_d","n_lines":8,"__index_level_0__":1576,"repair":""}
{"submission_id":42385,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s[key] not in s:\n            new_dict[value] = key\n    for key, value in new_dict:\n        if new_dict[key] in s:\n            del new_dict[key]\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s[key] not in s:\n            new_dict[value] = key\n    for key, value in new_dict:\n        if new_dict[key] in s:\n            del new_dict[key]\n    return new_dict","n_lines":9,"__index_level_0__":1577,"repair":""}
{"submission_id":7774,"func_code":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s[key] not in new_dict:\n            new_dict[value] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c3a18502-e93d-4fc5-ab00-d42531abe362","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(s):\n    new_dict = {}\n    for key, value in list(s.items()):\n        if s[key] not in new_dict:\n            new_dict[value] = key\n    return new_dict","n_lines":6,"__index_level_0__":1578,"repair":""}
{"submission_id":22498,"func_code":"def swap_unique_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    for keys, values in list(dictionary_descriptor.items()):\n        try:\n            new_dictionary[values] = keys\n        except KeyError:\n            pass\n    return new_dictionary","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c2ac2f07-625e-4a88-84b0-2a916b646959","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dictionary_descriptor):\n    new_dictionary = {}\n    for keys, values in list(dictionary_descriptor.items()):\n        try:\n            new_dictionary[values] = keys\n        except KeyError:\n            pass\n    return new_dictionary","n_lines":8,"__index_level_0__":1579,"repair":""}
{"submission_id":24505,"func_code":"def swap_unique_keys_values(d):\n    e = {}\n    for left, right in d:\n        if right not in e:\n            e[left] = right\n    return {v: k for k, v in list(e.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"9dea5530-0f82-4127-b25f-20c784224a03","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    e = {}\n    for left, right in d:\n        if right not in e:\n            e[left] = right\n    return {v: k for k, v in list(e.items())}","n_lines":6,"__index_level_0__":1580,"repair":""}
{"submission_id":28754,"func_code":"def swap_unique_keys_values(d):\n    b = {}\n    return {v: k for k, v in list(d.items())}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"a758f933-ec7a-444d-b3d2-f685ac9d9563","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    b = {}\n    return {v: k for k, v in list(d.items())}","n_lines":3,"__index_level_0__":1581,"repair":""}
{"submission_id":19073,"func_code":"def swap_unique_keys_values(d):\n    inv_map = {a: b for b, a in list(d.items())}\n    return inv_map","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    inv_map = {a: b for b, a in list(d.items())}\n    return inv_map","n_lines":3,"__index_level_0__":1582,"repair":""}
{"submission_id":4386,"func_code":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items()) if v.count() == 1}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items()) if v.count() == 1}\n    return inv","n_lines":3,"__index_level_0__":1583,"repair":""}
{"submission_id":33402,"func_code":"def swap_unique_keys_values(dict):\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","n_lines":3,"__index_level_0__":1584,"repair":""}
{"submission_id":13657,"func_code":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    d = []\n    for k in list(inv.keys()):\n        d.append(k)\n    for k in d:\n        if d.count(k) > 1:\n            del inv[k]\n            del inv[k]\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    d = []\n    for k in list(inv.keys()):\n        d.append(k)\n    for k in d:\n        if d.count(k) > 1:\n            del inv[k]\n            del inv[k]\n    return inv","n_lines":10,"__index_level_0__":1585,"repair":""}
{"submission_id":1143,"func_code":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    d = []\n    for k in list(inv.keys()):\n        d.append(k)\n    for k in d:\n        if d.count(k) > 1:\n            del inv[k]\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    d = []\n    for k in list(inv.keys()):\n        d.append(k)\n    for k in d:\n        if d.count(k) > 1:\n            del inv[k]\n    return inv","n_lines":9,"__index_level_0__":1586,"repair":""}
{"submission_id":23744,"func_code":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    for k in list(inv.keys()):\n        if list(inv.keys()).count(inv[k]) > 1:\n            del inv[k]\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    inv = {v: k for k, v in list(d.items())}\n    for k in list(inv.keys()):\n        if list(inv.keys()).count(inv[k]) > 1:\n            del inv[k]\n    return inv","n_lines":6,"__index_level_0__":1587,"repair":""}
{"submission_id":42203,"func_code":"def swap_unique_keys_values(d):\n    seen = []\n    unseen = []\n    for v in list(d.keys()):\n        va = d[v]\n        if va in unseen:\n            seen.append(va)\n        else:\n            unseen.append(va)\n        out = {v: k for k, v in list(d.items()) if v in unseen}\n    return out","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"6bdfefac-1fa3-44c6-b066-9e1536e0210e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='unseen', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='unseen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='unseen', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unseen', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    seen = []\n    unseen = []\n    for v in list(d.keys()):\n        va = d[v]\n        if va in unseen:\n            seen.append(va)\n        else:\n            unseen.append(va)\n        out = {v: k for k, v in list(d.items()) if v in unseen}\n    return out","n_lines":11,"__index_level_0__":1588,"repair":""}
{"submission_id":18590,"func_code":"def swap_unique_keys_values(d):\n    a = []\n    d_2 = {}\n    for entry in list(d.items()):\n        swap = entry[::-1]\n        a.append(swap)\n    for k, v in a:\n        d_2[k] = v\n    return d_2","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"213d8254-d887-4b88-8234-2f2edbe536aa","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    a = []\n    d_2 = {}\n    for entry in list(d.items()):\n        swap = entry[::-1]\n        a.append(swap)\n    for k, v in a:\n        d_2[k] = v\n    return d_2","n_lines":9,"__index_level_0__":1589,"repair":"def swap_unique_keys_values(d):\n        \"\"\"Swap the keys of a dictionary with its unique values.\"\"\"\n        a = []\n        d_2 = {}\n        for entry in list(d.items()):\n            swap = entry[::-1]\n            a.append(swap)\n    \n        for entry in a:\n            key, value = entry\n            if key not in d_2:\n                d_2[key] = value\n            else:\n                d_2[key] = d_2[key]\n                del d_2[key]\n        return d_2"}
{"submission_id":18884,"func_code":"def swap_unique_keys_values(d):\n    l = []\n    new_d = {}\n    for k in d:\n        if d[k] not in l:\n            new_d[d[k]] = k\n            l.append(d[k])\n    return new_d","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"4a1f2726-b713-40f0-b544-9de55d617a12","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    l = []\n    new_d = {}\n    for k in d:\n        if d[k] not in l:\n            new_d[d[k]] = k\n            l.append(d[k])\n    return new_d","n_lines":8,"__index_level_0__":1590,"repair":""}
{"submission_id":9370,"func_code":"def swap_unique_keys_values(d):\n    seen = []\n    new = {}\n    for key, value in list(d.items()):\n        if value not in seen:\n            seen.append(value)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    seen = []\n    new = {}\n    for key, value in list(d.items()):\n        if value not in seen:\n            seen.append(value)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1591,"repair":""}
{"submission_id":37153,"func_code":"def swap_unique_keys_values(d):\n    seen = []\n    new = {}\n    for key, value in list(d.items()):\n        if value not in seen:\n            value.append(seen)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"831aaa20-0b62-4198-b323-52fc0aa8363b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    seen = []\n    new = {}\n    for key, value in list(d.items()):\n        if value not in seen:\n            value.append(seen)\n            new[key] = value\n    inverse = {a: b for b, a in list(new.items())}\n    return inverse","n_lines":9,"__index_level_0__":1592,"repair":""}
{"submission_id":11131,"func_code":"def swap_unique_keys_values(d):\n    keys = []\n    values = []\n    dic = {}\n    for k, v in list(d.items()):\n        keys.append(k)\n        values.append(v)\n    i = 0\n    while i < len(values) and values[i] not in values:\n        dic[values[i]] = keys[i]\n        i = i + 1\n    return dic","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"bda058db-eb82-407a-b3b2-8f24355f1fa5","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    keys = []\n    values = []\n    dic = {}\n    for k, v in list(d.items()):\n        keys.append(k)\n        values.append(v)\n    i = 0\n    while i < len(values) and values[i] not in values:\n        dic[values[i]] = keys[i]\n        i = i + 1\n    return dic","n_lines":12,"__index_level_0__":1601,"repair":""}
{"submission_id":14056,"func_code":"def swap_unique_keys_values(d):\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    unique_values = []\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","n_lines":12,"__index_level_0__":1606,"repair":""}
{"submission_id":22071,"func_code":"def swap_unique_keys_values(d):\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unique_values', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='unique_values', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if values.count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","n_lines":11,"__index_level_0__":1613,"repair":""}
{"submission_id":21515,"func_code":"def swap_unique_keys_values(d):\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unique_values', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='unique_values', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    values = []\n    for key in d:\n        values.append(key)\n    for value in values:\n        if count(value) < 2:\n            unique_values.append(value)\n    for key in d:\n        if key in unique_values:\n            new_dict[key[unique_values]] = key\n    return new_dict","n_lines":11,"__index_level_0__":1614,"repair":""}
{"submission_id":72,"func_code":"def swap_unique_keys_values(d):\n    unique = []\n    for k in d:\n        if d[k] not in unique:\n            unique.append(d[k])\n        elif d[k] in unique:\n            unique.remove(d[k])\n    opposite = {}\n    for k in d:\n        if k in unique:\n            opposite[d[k]] = k\n    return opposite","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"14e87307-1c4a-4225-9151-a02ef086f467","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    unique = []\n    for k in d:\n        if d[k] not in unique:\n            unique.append(d[k])\n        elif d[k] in unique:\n            unique.remove(d[k])\n    opposite = {}\n    for k in d:\n        if k in unique:\n            opposite[d[k]] = k\n    return opposite","n_lines":12,"__index_level_0__":1615,"repair":""}
{"submission_id":4760,"func_code":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","n_lines":8,"__index_level_0__":1616,"repair":""}
{"submission_id":37989,"func_code":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        c[dic[letter]] = letter\n    return c","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        c[dic[letter]] = letter\n    return c","n_lines":10,"__index_level_0__":1617,"repair":""}
{"submission_id":18807,"func_code":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","n_lines":11,"__index_level_0__":1618,"repair":""}
{"submission_id":20917,"func_code":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            print(a.index(file))\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"7d992268-b79a-4106-8fbb-4f53742d117d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dic):\n    a, b, c = [], [], {}\n    for file in dic:\n        if file in a:\n            print(a.index(file))\n            a.pop(a.index(file))\n        else:\n            a.append(file)\n    for letter in a:\n        if letter not in c:\n            c[dic[letter]] = letter\n    return c","n_lines":12,"__index_level_0__":1619,"repair":""}
{"submission_id":18924,"func_code":"def swap_unique_keys_values(d):\n    for k in list(d.keys()):\n        if list(d.values()).count(d[k]) > 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    for k in list(d.keys()):\n        if list(d.values()).count(d[k]) > 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":6,"__index_level_0__":1620,"repair":""}
{"submission_id":17477,"func_code":"def swap_unique_keys_values(d):\n    for k in list(d.values()):\n        if list(d.values()).count(d[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    for k in list(d.values()):\n        if list(d.values()).count(d[k]) != 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":6,"__index_level_0__":1621,"repair":""}
{"submission_id":3429,"func_code":"def swap_unique_keys_values(dict):\n    for k in dict:\n        print(k)\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    for k in dict:\n        print(k)\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","n_lines":5,"__index_level_0__":1622,"repair":""}
{"submission_id":33805,"func_code":"def swap_unique_keys_values(d):\n    for k in list(inv.keys()):\n        if list(d.values()).count(d[k]) > 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    for k in list(inv.keys()):\n        if list(d.values()).count(d[k]) > 1:\n            del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":6,"__index_level_0__":1623,"repair":""}
{"submission_id":38850,"func_code":"def swap_unique_keys_values(dict):\n    for k, v in list(dict.items()):\n        print(v)\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"24b328b2-2b24-43bc-9468-d9ba1d7df521","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(dict):\n    for k, v in list(dict.items()):\n        print(v)\n    new_dict = {v: k for k, v in list(dict.items())}\n    return new_dict","n_lines":5,"__index_level_0__":1624,"repair":""}
{"submission_id":39888,"func_code":"def swap_unique_keys_values(d):\n    if list(d.values()).count(d[k]) != 1 in list(d.keys()):\n        del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"8f0fb5da-2965-4add-800c-347702711f78","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq(), In()], comparators=[Constant(value=1), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    if list(d.values()).count(d[k]) != 1 in list(d.keys()):\n        del d[k]\n    inv = {v: k for k, v in list(d.items())}\n    return inv","n_lines":5,"__index_level_0__":1625,"repair":""}
{"submission_id":18509,"func_code":"def swap_unique_keys_values(d):\n    return {t[1]: t[0] for t in list(d.items()) if list(d.values()).count(d\n        [1]) == 1}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"c7fa847c-561b-4652-9a01-05f954e6c8df","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    return {t[1]: t[0] for t in list(d.items()) if list(d.values()).count(d\n        [1]) == 1}","n_lines":3,"__index_level_0__":1626,"repair":""}
{"submission_id":867,"func_code":"def swap_unique_keys_values(d):\n    return {[(b, a) for a, b in list(d.items()) if list(d.values()).count(b\n        ) == 1]}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Set(elts=[ListComp(elt=Tuple(elts=[Name(id='b', ctx=Load()), Name(id='a', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    return {[(b, a) for a, b in list(d.items()) if list(d.values()).count(b\n        ) == 1]}","n_lines":3,"__index_level_0__":1627,"repair":""}
{"submission_id":15869,"func_code":"def swap_unique_keys_values(d):\n    return {(b, a) for a, b in list(d.items()) if list(d.values()).count(b) ==\n        1}","assignment_id":"swap_unique_keys_values","func_name":"swap_unique_keys_values","description":"Swap the keys of a dictionary with its unique values.","test":"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}","correct":false,"user":"54e7d279-e8ef-49c1-8aea-de3ac0b230cf","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=SetComp(elt=Tuple(elts=[Name(id='b', ctx=Load()), Name(id='a', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","representative":"def swap_unique_keys_values(d):\n    return {(b, a) for a, b in list(d.items()) if list(d.values()).count(b) ==\n        1}","n_lines":3,"__index_level_0__":1628,"repair":""}
{"submission_id":3811,"func_code":"def union(a, b, c):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b, c):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","n_lines":11,"__index_level_0__":1629,"repair":""}
{"submission_id":29658,"func_code":"def union(a, b):\n    a = a - b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"f1f904a5-bcf8-461e-8792-f0a8d0db3f47","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a = a - b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","n_lines":12,"__index_level_0__":1630,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = set()\n    unioned = []\n    for number in a:\n        if number not in seen:\n            unioned.append(number)\n            seen.add(number)\n    for number in b:\n        if number not in seen:\n            unioned.append(number)\n            seen.add(number)\n    return unioned"}
{"submission_id":18930,"func_code":"def union(a, b):\n    a = [1, 2, 3, 4]\n    b = [3, 4, 5, 6]\n    return a, b","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6)], ctx=Load())), Return(value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a = [1, 2, 3, 4]\n    b = [3, 4, 5, 6]\n    return a, b","n_lines":4,"__index_level_0__":1631,"repair":""}
{"submission_id":15381,"func_code":"def union(a, b):\n    a = []\n    b = []\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a = []\n    b = []\n    return c","n_lines":4,"__index_level_0__":1632,"repair":""}
{"submission_id":14399,"func_code":"def union(a, b):\n    a = []\n    b = []\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a = []\n    b = []\n    return result","n_lines":4,"__index_level_0__":1633,"repair":""}
{"submission_id":33628,"func_code":"def union(a, b):\n    a = []\n    b = []\n    return a, b","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a = []\n    b = []\n    return a, b","n_lines":4,"__index_level_0__":1634,"repair":""}
{"submission_id":35975,"func_code":"def union(a, b):\n    result = a + b\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='s', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    return result","n_lines":6,"__index_level_0__":1635,"repair":""}
{"submission_id":21294,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = sys.stdin.readline()\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = sys.stdin.readline()\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","n_lines":11,"__index_level_0__":1636,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":2010,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = results[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='results', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = results[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","n_lines":11,"__index_level_0__":1637,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for a in a:\n        if a not in s:\n            s.append(a)\n    for b in b:\n        if b not in s:\n            s.append(b)\n    return s"}
{"submission_id":26545,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","n_lines":11,"__index_level_0__":1638,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":31472,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < len(line):\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return result","n_lines":11,"__index_level_0__":1639,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for x in a:\n        if x not in s:\n            s.append(x)\n    for x in b:\n        if x not in s:\n            s.append(x)\n    return s"}
{"submission_id":16165,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < line:\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_5', ctx=Load())]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < line:\n        while i < len(a) and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","n_lines":11,"__index_level_0__":1640,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for l in a:\n        if l not in s:\n            s.append(l)\n    for l in b:\n        if l not in s:\n            s.append(l)\n    return s"}
{"submission_id":24098,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < line:\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_5', ctx=Load())]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while 0 < line:\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return line.rstrip()","n_lines":11,"__index_level_0__":1641,"repair":""}
{"submission_id":14597,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while i < len(a):\n        seen[a[i]] = True\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while i < len(a):\n        seen[a[i]] = True\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return","n_lines":12,"__index_level_0__":1642,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        result = a + b\n        s = []\n        i = 0\n    \n        while i < len(result):\n            if result[i] not in s:\n                s.append(result[i])\n            i += 1\n        return s \n        return"}
{"submission_id":10977,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while i < len(a):\n        s[a[i]] = True\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    line = result[i]\n    while i < len(a):\n        s[a[i]] = True\n        while i < a and s[i] != line:\n            i = i + 1\n        if i == len(s):\n            s.append(line)\n    return","n_lines":12,"__index_level_0__":1643,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return(list(s))"}
{"submission_id":16154,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    if i == len(s):\n        s.append(line)\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    if i == len(s):\n        s.append(line)\n    return result","n_lines":9,"__index_level_0__":1644,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":2584,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    if i == len(s):\n        s.append(result[i])\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    if i == len(s):\n        s.append(result[i])\n    return result","n_lines":9,"__index_level_0__":1645,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":20682,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    return result","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a) and a[i] == s:\n        i = i + 1\n    return result","n_lines":7,"__index_level_0__":1646,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":40175,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a):\n        s[a[i]] = True\n        i = i + 1\n    if a[i] in s:\n        s.append()\n    return","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a):\n        s[a[i]] = True\n        i = i + 1\n    if a[i] in s:\n        s.append()\n    return","n_lines":10,"__index_level_0__":1647,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":41421,"func_code":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a):\n        s[a[i]] = True\n        i = i + 1\n    return","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    result = a + b\n    s = []\n    i = 0\n    while i < len(a):\n        s[a[i]] = True\n        i = i + 1\n    return","n_lines":8,"__index_level_0__":1648,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":37459,"func_code":"def union(a, b):\n    s = a + b\n    return set(s)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"5ba5010e-c0ac-4560-9fa6-aadbc278c3f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    s = a + b\n    return set(s)","n_lines":3,"__index_level_0__":1649,"repair":""}
{"submission_id":21613,"func_code":"def union(a, b):\n    c = a + b\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a + b\n    return c","n_lines":3,"__index_level_0__":1650,"repair":""}
{"submission_id":21377,"func_code":"def union(a, b):\n    x = a + b\n    while 0 < len(x):\n        i = 0\n        while i < len(x) and x[i] != x:\n            i = i + 1\n        if i == len(x):\n            d[x[i]] = True\n    print(union([1, 2, 3], [3, 4, 5]))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    x = a + b\n    while 0 < len(x):\n        i = 0\n        while i < len(x) and x[i] != x:\n            i = i + 1\n        if i == len(x):\n            d[x[i]] = True\n    print(union([1, 2, 3], [3, 4, 5]))","n_lines":9,"__index_level_0__":1651,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for x in a:\n        if x not in s:\n            s.append(x)\n    for x in b:\n        if x not in s:\n            s.append(x)\n    return s"}
{"submission_id":24281,"func_code":"def union(a, b):\n    x = a + b\n    while 0 < len(x):\n        i = 0\n        while i < len(x) and x[i] != x:\n            i = i + 1\n    if i == len(x):\n        d[x[i]] = True\n    print(union([1, 2, 3], [3, 4, 5]))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c45598e5-3acc-4052-b18a-228b6bd842f6","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    x = a + b\n    while 0 < len(x):\n        i = 0\n        while i < len(x) and x[i] != x:\n            i = i + 1\n    if i == len(x):\n        d[x[i]] = True\n    print(union([1, 2, 3], [3, 4, 5]))","n_lines":9,"__index_level_0__":1652,"repair":""}
{"submission_id":28103,"func_code":"def union(a, b):\n    c = a and b\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a and b\n    return c","n_lines":3,"__index_level_0__":1653,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union_lst = []\n    for x in a:\n        if x not in union_lst:\n            union_lst.append(x)\n    for y in b:\n        if y not in union_lst:\n            union_lst.append(y)\n    return union_lst"}
{"submission_id":1375,"func_code":"def union(a, b):\n    c = a or b\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"99d129a4-97af-42ac-a543-23b9157331f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a or b\n    return c","n_lines":3,"__index_level_0__":1654,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    merged = a + b\n    unique = []\n    i = 0\n    while i < len(merged):\n        if merged[i] not in unique:\n            unique.append(merged[i])\n        i += 1\n    return unique"}
{"submission_id":22825,"func_code":"def union(a, b):\n    c = set(a + b)\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"058b18f6-cf34-4afc-8b4e-0f7705be27f0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = set(a + b)\n    return c","n_lines":3,"__index_level_0__":1655,"repair":""}
{"submission_id":42128,"func_code":"def union(a, b):\n    A = 'end'\n    i = ''\n    c = []\n    while i != A:\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        else:\n            i = A\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='end')), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    A = 'end'\n    i = ''\n    c = []\n    while i != A:\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        else:\n            i = A\n    return c","n_lines":12,"__index_level_0__":1656,"repair":""}
{"submission_id":16486,"func_code":"def union(a, b):\n    i = 0\n    d = {}\n    while i < len(a):\n        d[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if b[k] not in d:\n                d[b[k]] = True\n            k = k + 1\n        return d","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    d = {}\n    while i < len(a):\n        d[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if b[k] not in d:\n                d[b[k]] = True\n            k = k + 1\n        return d","n_lines":12,"__index_level_0__":1657,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        i = 0\n        d = {}\n    \n        while i < len(a):\n            if a[i] not in d:\n                d[a[i]] = a[i:]\n            i = i + 1\n    \n        i = 0\n        while i < len(b):\n            if b[i] not in d:\n                d[b[i]] = a[i:]\n            i = i + 1\n    \n        return list(d.keys())"}
{"submission_id":20824,"func_code":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in dic:\n                dic[b[j]] = True\n            j = j + 1\n        return dic","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in dic:\n                dic[b[j]] = True\n            j = j + 1\n        return dic","n_lines":12,"__index_level_0__":1658,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        i = 0\n        dic = {}\n        while i < len(a):\n            dic[a[i]] = True\n            i = i + 1\n    \n        j = 0\n        while j < len(b):\n            dic[b[j]] = True\n            j = j + 1\n    \n        return list(dic.keys())"}
{"submission_id":13634,"func_code":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in dic:\n                dic[b[j]] = True\n            j = j + 1\n    return dic","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in dic:\n                dic[b[j]] = True\n            j = j + 1\n    return dic","n_lines":12,"__index_level_0__":1659,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    \n    dic = {}\n    for i in a:\n        dic[i] = True\n    for j in b:\n        dic[j] = True\n    return list(dic.keys())"}
{"submission_id":23132,"func_code":"def union(a, b):\n    i = 0\n    d = {}\n    while i < len(a):\n        d[a[i]] = True\n        i = i + 1\n        print(d)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    d = {}\n    while i < len(a):\n        d[a[i]] = True\n        i = i + 1\n        print(d)","n_lines":7,"__index_level_0__":1660,"repair":""}
{"submission_id":4099,"func_code":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in dic:\n            dic[b[j]] = True\n        j = j + 1\n    return dic","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3bb099c4-4248-4efd-bfe2-3c423b916ce0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    dic = {}\n    while i < len(a):\n        dic[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in dic:\n            dic[b[j]] = True\n        j = j + 1\n    return dic","n_lines":12,"__index_level_0__":1661,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    dic = {}\n    for i in a:\n        dic[i] = True\n    for i in b:\n        dic[i] = True\n    return list(dic.keys())"}
{"submission_id":39775,"func_code":"def union(a, b):\n    i = 0\n    c = {}\n    while i < len(a):\n        c.append(a[i])\n        if b[i] not in c:\n            c.append(b[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = {}\n    while i < len(a):\n        c.append(a[i])\n        if b[i] not in c:\n            c.append(b[i])\n        i = i + 1\n    return c","n_lines":9,"__index_level_0__":1662,"repair":""}
{"submission_id":18265,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a) and i < len(c):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a) and i < len(c):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1663,"repair":""}
{"submission_id":13636,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a) + len(b):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a) + len(b):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1664,"repair":""}
{"submission_id":12372,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(6):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=6)], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(6):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1665,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        i = 0\n        c = []\n    \n        while i < len(a):\n            if a[i] not in c:\n                c.append(a[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(b):\n            if b[i] not in c:\n                c.append(b[i])\n            i = i + 1\n    \n        return c"}
{"submission_id":3906,"func_code":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n        return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n        return seen","n_lines":12,"__index_level_0__":1666,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = {}\n    for x in a:\n        if x not in seen:\n            seen[x] = True\n    for y in b:\n        if y not in seen:\n            seen[y] = True\n    return list(seen.keys())"}
{"submission_id":1573,"func_code":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n    return seen","n_lines":12,"__index_level_0__":1667,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = []\n    for i in a:\n        if i not in seen:\n            seen.append(i)\n    for j in b:\n        if j not in seen:\n            seen.append(j)\n    return seen"}
{"submission_id":40093,"func_code":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n    return seen","n_lines":12,"__index_level_0__":1668,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = []\n    for i in a:\n        if i not in seen:\n            seen.append(i)\n    for j in b:\n        if j not in seen:\n            seen.append(j)\n    return seen"}
{"submission_id":11820,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        c.append(a[i])\n        if b[i] not in c:\n            c.append(b[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        c.append(a[i])\n        if b[i] not in c:\n            c.append(b[i])\n        i = i + 1\n    return c","n_lines":9,"__index_level_0__":1669,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        i = 0\n        c = []\n    \n        while i < len(a):\n            if a[i] not in c:\n                c.append(a[i])\n            i = i + 1\n    \n        i = 0\n        while i < len(b):\n            if b[i] not in c:\n                c.append(b[i])\n            i = i + 1\n        return c"}
{"submission_id":22922,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            c = a, b\n            return c\n            i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            c = a, b\n            return c\n            i = i + 1","n_lines":8,"__index_level_0__":1670,"repair":""}
{"submission_id":8649,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            i = i + 1\n    return c","n_lines":8,"__index_level_0__":1671,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = set()\n    result = []\n    for element in a:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n    for element in b:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n    return list(result)"}
{"submission_id":36082,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            return c\n            i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            return c\n            i = i + 1","n_lines":8,"__index_level_0__":1672,"repair":""}
{"submission_id":11641,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1673,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    s = []\n    for i in a:\n        if i not in s:\n            s.append(i)\n    for i in b:\n        if i not in s:\n            s.append(i)\n    return s"}
{"submission_id":33475,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if b[i] not in c:\n            c.append(b[i])\n        elif a[i] not in c:\n            c.append(a[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(a):\n        if b[i] not in c:\n            c.append(b[i])\n        elif a[i] not in c:\n            c.append(a[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1674,"repair":""}
{"submission_id":26088,"func_code":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        if not a[i] in a:\n            seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ce889881-69dd-4396-aceb-e6f7dddc2c14","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    seen = []\n    while i < len(a):\n        if not a[i] in a:\n            seen[a[i]] = True\n        i = i + 1\n        k = 0\n        while k < len(b):\n            if not b[k] in b:\n                seen[b[k]] = True\n            k = k + 1\n    return seen","n_lines":13,"__index_level_0__":1675,"repair":""}
{"submission_id":10847,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(c):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < len(c):\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1676,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    res=[]\n    for i in a:\n        if i not in res:\n            res.append(i)\n    for i in b:\n        if i not in res:\n            res.append(i)\n    return res"}
{"submission_id":20030,"func_code":"def union(a, b):\n    i = 0\n    c = []\n    while i < 6:\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=6)]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    c = []\n    while i < 6:\n        if a[i] not in c:\n            c.append(a[i])\n        elif c[i] not in c:\n            c.append(c[i])\n        i = i + 1\n    return c","n_lines":10,"__index_level_0__":1677,"repair":""}
{"submission_id":4849,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a) and a[i] != v:\n        i = i + 1\n    return i < len(a)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='v', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a) and a[i] != v:\n        i = i + 1\n    return i < len(a)","n_lines":5,"__index_level_0__":1678,"repair":""}
{"submission_id":40003,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a) and a[i] != b:\n        i = i + 1\n    return i < len(a)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"2a1a0a7b-975b-4463-96bb-4f52900ce463","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a) and a[i] != b:\n        i = i + 1\n    return i < len(a)","n_lines":5,"__index_level_0__":1679,"repair":""}
{"submission_id":31,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a + b):\n        if a[i] not in seena:\n            sys.stdout.write(a[i])\n            seen[a[i]] = True\n        elif b[i] not in seenb:\n            sys.stdout.wrtie(b[i])\n            seen[b[i]] = True\n        i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seena', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seenb', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='wrtie', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a + b):\n        if a[i] not in seena:\n            sys.stdout.write(a[i])\n            seen[a[i]] = True\n        elif b[i] not in seenb:\n            sys.stdout.wrtie(b[i])\n            seen[b[i]] = True\n        i = i + 1","n_lines":10,"__index_level_0__":1680,"repair":""}
{"submission_id":4213,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a + b):\n        if a[i] not in seena:\n            c.append(a[i])\n        elif b[i] not in seenb:\n            c.append(a[i])\n        i = i + 1\n    print(c)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seena', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seenb', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a + b):\n        if a[i] not in seena:\n            c.append(a[i])\n        elif b[i] not in seenb:\n            c.append(a[i])\n        i = i + 1\n    print(c)","n_lines":9,"__index_level_0__":1681,"repair":""}
{"submission_id":1933,"func_code":"def union(a, b):\n    i = 0\n    while i < len(lines):\n        if lines[i] not in seen:\n            sys.stdout.write(lines[i])\n            seen[lines[i]] = True\n        i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(lines):\n        if lines[i] not in seen:\n            sys.stdout.write(lines[i])\n            seen[lines[i]] = True\n        i = i + 1","n_lines":7,"__index_level_0__":1682,"repair":""}
{"submission_id":8086,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c = a.append(b[i])\n        i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c = a.append(b[i])\n        i = i + 1\n    return c","n_lines":6,"__index_level_0__":1683,"repair":""}
{"submission_id":42485,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='c', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","n_lines":11,"__index_level_0__":1684,"repair":""}
{"submission_id":7030,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c.appened(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='appened', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        c.appened(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","n_lines":11,"__index_level_0__":1685,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union = []\n    for i in a:\n        if i not in union:\n            union.append(i)\n    for i in b:\n        if i not in union:\n            union.append(i)\n    return union"}
{"submission_id":6730,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            c = (a, b) - (a + b)\n            return c\n            i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()), op=Sub(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            c = (a, b) - (a + b)\n            return c\n            i = i + 1","n_lines":7,"__index_level_0__":1686,"repair":""}
{"submission_id":9001,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            c = a, b\n            return c\n            i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            c = a, b\n            return c\n            i = i + 1","n_lines":7,"__index_level_0__":1687,"repair":""}
{"submission_id":35684,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            a.append(c)\n            i = i + 1\n    return c","n_lines":7,"__index_level_0__":1688,"repair":""}
{"submission_id":24929,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            print(a, b)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e5dedf13-336d-484f-81bc-d7898f0f002e","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a != b:\n            print(a, b)","n_lines":5,"__index_level_0__":1689,"repair":""}
{"submission_id":3836,"func_code":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            sys.stdout.write(a[i])\n            seen[a[i]] = True\n        i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"2a5e3eed-41c7-46e6-9bee-3acc21c1f81b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            sys.stdout.write(a[i])\n            seen[a[i]] = True\n        i = i + 1","n_lines":7,"__index_level_0__":1690,"repair":""}
{"submission_id":7593,"func_code":"def union(a, b):\n    d = {}\n    i = 0\n    while i < len(lines):\n        d = {a, b}\n    return d","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"0ea9000e-74e5-4eea-8653-1bfeeae4aab1","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Set(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    d = {}\n    i = 0\n    while i < len(lines):\n        d = {a, b}\n    return d","n_lines":6,"__index_level_0__":1691,"repair":""}
{"submission_id":16706,"func_code":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        c[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            c[b[i]] = True\n            i = i + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='seen', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        c[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            c[b[i]] = True\n            i = i + 1\n    return c","n_lines":12,"__index_level_0__":1692,"repair":""}
{"submission_id":16555,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while k < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='k', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while k < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","n_lines":12,"__index_level_0__":1693,"repair":""}
{"submission_id":211,"func_code":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    h = 0\n    while i < len(b):\n        un[b[h]] = True\n        h = h + 1\n    print(un)","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    h = 0\n    while i < len(b):\n        un[b[h]] = True\n        h = h + 1\n    print(un)","n_lines":11,"__index_level_0__":1694,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    ans = []\n    for i in a:\n        if i not in ans:\n            ans.append(i)\n    for j in b:\n        if j not in ans:\n            ans.append(j)\n    return ans"}
{"submission_id":1565,"func_code":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    h = 0\n    while i < len(b):\n        un[b[h]] = True\n        h = h + 1\n    return un","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    h = 0\n    while i < len(b):\n        un[b[h]] = True\n        h = h + 1\n    return un","n_lines":11,"__index_level_0__":1695,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union = []\n    for x in a:\n        if x not in union:\n            union.append(x)\n    for y in b:\n        if y not in union:\n            union.append(y)\n    return union"}
{"submission_id":9768,"func_code":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(b):\n        if not b[j] in un:\n            un[b[j]] = True\n        j = j + 1\n    return un","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"3aed57e0-c2a2-49b2-afaf-23d3d77478fb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    un = {}\n    i = 0\n    while i < len(a):\n        un[a[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(b):\n        if not b[j] in un:\n            un[b[j]] = True\n        j = j + 1\n    return un","n_lines":12,"__index_level_0__":1696,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        un = {}\n        i = 0\n        while i < len(a):\n            un[a[i]] = True\n            i = i + 1\n        j = 0\n    \n        while j < len(b):\n            un[b[j]] = True\n            j = j + 1\n    \n        return list(un.keys())"}
{"submission_id":2797,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n            k = k + 1\n        return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"7c4a70b0-f238-44c3-98e9-fba759a5438b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n            k = k + 1\n        return seen","n_lines":12,"__index_level_0__":1697,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            seen[a[i]] = True\n            i = i + 1\n    \n        for b in b:\n            if b not in seen:\n                seen[b] = True\n    \n        return list(seen.keys())"}
{"submission_id":28968,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n        return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n        return seen","n_lines":12,"__index_level_0__":1698,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            seen[a[i]] = True\n            i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in seen:\n                seen[b[j]] = True\n            j = j + 1\n    \n        return list(seen.keys())"}
{"submission_id":36285,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e5f35cd7-8337-4a68-bda3-4164a982feae","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","n_lines":12,"__index_level_0__":1699,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            seen[a[i]] = True\n            i = i + 1\n        j = 0\n        while j < len(b):\n            if not b[j] in seen:\n                seen[b[j]] = True\n            j = j + 1\n    \n        return list(seen.keys())"}
{"submission_id":28948,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n        return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6618fe7e-6fd3-499b-a742-8d68ec712ad3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while k < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n        return seen","n_lines":12,"__index_level_0__":1700,"repair":""}
{"submission_id":25461,"func_code":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        c[a[i]] = True\n    i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in c:\n            c[b[k]] = True\n        k = k + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"db184e8e-e02b-4772-b74b-547b88d21933","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        c[a[i]] = True\n    i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in c:\n            c[b[k]] = True\n        k = k + 1\n    return c","n_lines":12,"__index_level_0__":1701,"repair":""}
{"submission_id":2293,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = TRue\n        i = i + 1\n    k = 0\n    while i < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"4490d043-a9e0-48aa-a62c-ddcc67ed7fba","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='TRue', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        seen[a[i]] = TRue\n        i = i + 1\n    k = 0\n    while i < len(b):\n        if not b[k] in seen:\n            seen[b[k]] = True\n        k = k + 1\n    return seen","n_lines":12,"__index_level_0__":1702,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union = []\n    for x in a:\n        if x not in union:\n            union.append(x)\n    for y in b:\n        if y not in union:\n            union.append(y)\n    return union"}
{"submission_id":15140,"func_code":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        sys.stdout.write(a[i])\n        c[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            sys.stdout.write(b[i])\n            c[b[i]] = True\n            i = i + 1\n            print(c)\n    if __name__ == '__main__':\n        print(union([1, 2, 3], [3, 4, 5]))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='seen', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = {}\n    i = 0\n    while i < len(a):\n        sys.stdout.write(a[i])\n        c[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            sys.stdout.write(b[i])\n            c[b[i]] = True\n            i = i + 1\n            print(c)\n    if __name__ == '__main__':\n        print(union([1, 2, 3], [3, 4, 5]))","n_lines":16,"__index_level_0__":1703,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        c = {}\n    \n        for i in a:\n            if i in c:\n                c[i] += 1\n            else:\n                c[i] = 1\n        for i in b:\n            if i in c:\n                c[i] += 1\n            else:\n                c[i] = 1\n    \n        return list(c.keys())"}
{"submission_id":38101,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        sys.stdout.write(a[i])\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            sys.stdout.write(b[i])\n            seen[b[i]] = True\n            i = i + 1\n            print(seen)\n    if __name__ == '__main__':\n        print(union([1, 2, 3], [3, 4, 5]))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        sys.stdout.write(a[i])\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            sys.stdout.write(b[i])\n            seen[b[i]] = True\n            i = i + 1\n            print(seen)\n    if __name__ == '__main__':\n        print(union([1, 2, 3], [3, 4, 5]))","n_lines":16,"__index_level_0__":1704,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n    \n        for element in a:\n            if element not in seen:\n                seen[element] = 1\n            else:\n                seen[element] += 1\n        \n        for element in b:\n            if element not in seen:\n                seen[element] = 1\n            else:\n                seen[element] += 1\n    \n        return [x for x in seen.keys()]"}
{"submission_id":8014,"func_code":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[j] not in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"18ee9049-5f05-43b2-ac53-518e3b23c3c3","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[j] not in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","n_lines":13,"__index_level_0__":1706,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        i = 0\n        while i < len(a):\n            if a[i] not in seen:\n                seen[a[i]] = True\n            i = i + 1\n        j = 0\n        while j < len(b):\n            if b[j] not in seen:\n                seen[b[j]] = True\n            j = j + 1\n    \n        return list(seen.keys())"}
{"submission_id":7156,"func_code":"def union(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","n_lines":12,"__index_level_0__":1707,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        c = []\n    \n        for a in a:\n            if a not in seen:\n                seen[a] = 1\n                c.append(a)\n        for b in b:\n            if b not in seen:\n                seen[b] = 1\n                c.append(b)\n        return c"}
{"submission_id":25658,"func_code":"def union(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            seen[b[i]] = True\n            i = i + 1\n    for c in seen:\n        return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"639d0a36-d89c-469e-a1ae-4cadc99d8827","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    i = 0\n    while i < len(seen):\n        if b[i] not in seen:\n            seen[b[i]] = True\n            i = i + 1\n    for c in seen:\n        return c","n_lines":14,"__index_level_0__":1708,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = {}\n        c = []\n    \n        for e in a:\n                if e not in seen:\n                        seen[e] = 1\n                        c.append(e)\n        for e in b:\n                if e not in seen:\n                        seen[e] = 1\n                        c.append(e)\n        return c"}
{"submission_id":27006,"func_code":"def union(a, b):\n    c = []\n    c = a - b\n    seen = {}\n    i = 0\n    while i < len(c):\n        if lines(c) not in seen:\n            sys.stdout.write(lines[c])\n        i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e380b6f8-84c6-4978-a85b-78c22ace6b9b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='lines', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    c = a - b\n    seen = {}\n    i = 0\n    while i < len(c):\n        if lines(c) not in seen:\n            sys.stdout.write(lines[c])\n        i = i + 1","n_lines":9,"__index_level_0__":1709,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = {}\n    for i in a:\n        if i not in seen:\n            seen[i] = 1\n    for j in b:\n        if j not in seen:\n            seen[j] = 1\n    return list(seen.keys())"}
{"submission_id":5129,"func_code":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[k] not in b:\n            seen[b[k]] = True\n        j = j + 1\n    return","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[k] not in b:\n            seen[b[k]] = True\n        j = j + 1\n    return","n_lines":12,"__index_level_0__":1710,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = []\n    \n        for i in a:\n                if i not in seen:\n                        seen.append(i)\n    \n        for i in b:\n                if i not in seen:\n                        seen.append(i)\n    \n        return seen"}
{"submission_id":20273,"func_code":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[k] in b:\n            seen[b[k]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[k] in b:\n            seen[b[k]] = True\n        j = j + 1\n    return seen","n_lines":12,"__index_level_0__":1711,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = []\n    for x in a:\n        if x not in seen:\n            seen.append(x)\n    for y in b:\n        if y not in seen:\n            seen.append(y)\n    return seen"}
{"submission_id":28928,"func_code":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in b:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in b:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","n_lines":12,"__index_level_0__":1712,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        seen = []\n    \n        for e in a:\n            if e in seen:\n                continue\n            else:\n                seen.append(e)\n    \n        for e in b:\n            if e in seen:\n                continue\n            else:\n                seen.append(e)\n    \n        return seen"}
{"submission_id":37475,"func_code":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9de68f60-663e-4929-b3e2-88948f90a669","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    seen = []\n    i = 0\n    while i < len(a):\n        seen[a[i]] = True\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if not b[j] in seen:\n            seen[b[j]] = True\n        j = j + 1\n    return seen","n_lines":12,"__index_level_0__":1713,"repair":""}
{"submission_id":9458,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[i] not in a:\n            c.append(b[i])\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    j = 0\n    while j < len(b):\n        if b[i] not in a:\n            c.append(b[i])\n    return c","n_lines":11,"__index_level_0__":1714,"repair":""}
{"submission_id":7277,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","n_lines":12,"__index_level_0__":1715,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        c = []\n    \n        for i in a:\n            if i not in c:\n                c.append(i)\n        for i in b:\n            if i not in c:\n                c.append(i)\n        return c"}
{"submission_id":19456,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n        p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n        p = p + 1\n    return c","n_lines":12,"__index_level_0__":1716,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    temp = []\n    for i in a:\n        if i not in temp:\n            temp.append(i)\n    for j in b:\n        if j not in temp:\n            temp.append(j)\n    return temp"}
{"submission_id":23888,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"dcc2a3d3-d90d-4640-9797-7d037bff9027","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n        p = p + 1\n    return c","n_lines":12,"__index_level_0__":1717,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        c = []\n        i = 0\n    \n        while i < len(a):\n            if a[i] not in c:\n                c.append(a[i])\n            i = i + 1\n        p = 0\n        while p < len(b):\n            if b[p] not in c:\n                c.append(b[p])\n            p = p + 1\n        return c"}
{"submission_id":19600,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in a:\n            c.append(b[k])\n        k = k + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e84d5440-bfc2-41cd-a020-f2cd55cb79b4","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.append(a[i])\n        i = i + 1\n    k = 0\n    while k < len(b):\n        if not b[k] in a:\n            c.append(b[k])\n        k = k + 1\n    return c","n_lines":12,"__index_level_0__":1718,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        c = []\n    \n        for i in range(len(a)):\n            if a[i] not in c:\n                c.append(a[i])\n    \n        for i in range(len(b)):\n            if b[i] not in c:\n                c.append(b[i])\n        return c"}
{"submission_id":6276,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.appened(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='appened', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        c.appened(a[i])\n        i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in a:\n            c.append(b[p])\n            p = p + 1\n    return c","n_lines":12,"__index_level_0__":1719,"repair":""}
{"submission_id":13566,"func_code":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in c:\n            c.append(a[i])\n            i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n            p = p + 1\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"9cf41e84-15c1-4c2d-90e2-497206e45e8b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in c:\n            c.append(a[i])\n            i = i + 1\n    p = 0\n    while p < len(b):\n        if b[p] not in c:\n            c.append(b[p])\n            p = p + 1\n    return c","n_lines":13,"__index_level_0__":1720,"repair":""}
{"submission_id":12338,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        answer.append(x[i])\n        check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return answer","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        answer.append(x[i])\n        check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return answer","n_lines":15,"__index_level_0__":1721,"repair":""}
{"submission_id":6135,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        elif not y[i] in check:\n            answer.append(y[i])\n            check[y[i]] = True\n        i = i + 1\n    return answer","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        elif not y[i] in check:\n            answer.append(y[i])\n            check[y[i]] = True\n        i = i + 1\n    return answer","n_lines":13,"__index_level_0__":1722,"repair":"def union(x, y):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        answer = []\n        check = {}\n        i = 0\n    \n        for j in x:\n                if j not in check:\n                        answer.append(j)\n                        check[j] = i\n                        i += 1\n        for j in y:\n                if j not in check:\n                        answer.append(j)\n                        check[j] = i\n                        i += 1\n        return answer"}
{"submission_id":10684,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        elif not y[i] in check:\n            answer.append(y[i])\n            check[y[i]] = True\n        i = i + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        elif not y[i] in check:\n            answer.append(y[i])\n            check[y[i]] = True\n        i = i + 1","n_lines":12,"__index_level_0__":1723,"repair":"def union(x, y):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        answer = []\n        check = {}\n        i = 0\n    \n        while i < len(x):\n            if x[i] not in check:\n                answer.append(x[i])\n                check[x[i]] = True\n            i = i + 1\n\n        i = 0\n        while i < len(y):\n            if y[i] not in check:\n                answer.append(y[i])\n                check[y[i]] = True\n            i = i + 1\n\n        return answer"}
{"submission_id":11485,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return answer","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return answer","n_lines":16,"__index_level_0__":1724,"repair":"def union(x, y):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        answer = []\n        check = {}\n        i = 0\n    \n        while i < len(x):\n            if not x[i] in check:\n                answer.append(x[i])\n                check[x[i]] = True\n            i = i + 1\n        i = 0\n        while i < len(y):\n            if not y[i] in check:\n                answer.append(y[i])\n                check[y[i]] = True\n            i = i + 1\n        return answer"}
{"submission_id":38286,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return check","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check[x[i]] = True\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check[y[j]] = True\n        j = j + 1\n    return check","n_lines":16,"__index_level_0__":1725,"repair":"def union(x, y):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        answer = []\n        check = {}\n        i = 0\n        while i < len(x):\n            if not x[i] in check:\n                answer.append(x[i])\n                check[x[i]] = True\n            i = i + 1\n        j = 0\n    \n        while j < len(y):\n            if not y[j] in check:\n                answer.append(y[j])\n                check[y[j]] = True\n            j = j + 1\n        return answer"}
{"submission_id":21940,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check.append(x[i])\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check.append(y[j])\n        j = j + 1\n    return answer","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check.append(x[i])\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check.append(y[j])\n        j = j + 1\n    return answer","n_lines":16,"__index_level_0__":1726,"repair":"def union(x, y):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        answer = []\n    \n        for x in x:\n                if x not in answer:\n                        answer.append(x)\n    \n        for x in y:\n                if x not in answer:\n                        answer.append(x)\n    \n        return answer"}
{"submission_id":4781,"func_code":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check.append(x[i])\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check.append(y[j])\n        j = j + 1","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def union(x, y):\n    answer = []\n    check = {}\n    i = 0\n    while i < len(x):\n        if not x[i] in check:\n            answer.append(x[i])\n            check.append(x[i])\n        i = i + 1\n    j = 0\n    while i < len(y):\n        if not y[j] in check:\n            answer.append(y[j])\n            check.append(y[j])\n        j = j + 1","n_lines":15,"__index_level_0__":1727,"repair":""}
{"submission_id":34021,"func_code":"def union(a, b):\n    c = a, b\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a, b\n    return c","n_lines":3,"__index_level_0__":1728,"repair":""}
{"submission_id":22637,"func_code":"def union(a, b):\n    a not in b\n    c = a + b\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"ac8b6b8f-d93c-46e5-8736-44e36e620908","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    a not in b\n    c = a + b\n    return c","n_lines":4,"__index_level_0__":1729,"repair":""}
{"submission_id":28369,"func_code":"def union(a, b):\n    return a + b","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"557b99ed-3c48-4070-b887-de4b2d06ac8d","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    return a + b","n_lines":2,"__index_level_0__":1731,"repair":""}
{"submission_id":40234,"func_code":"def union(a, b):\n    return a and b","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"99d129a4-97af-42ac-a543-23b9157331f8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    return a and b","n_lines":2,"__index_level_0__":1732,"repair":""}
{"submission_id":28207,"func_code":"def union(a, b):\n    return list(set(a) | set(b))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"7c4a70b0-f238-44c3-98e9-fba759a5438b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    return list(set(a) | set(b))","n_lines":2,"__index_level_0__":1733,"repair":""}
{"submission_id":37806,"func_code":"def union(a, b):\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"5c105474-42d8-4a95-a311-034a93c693c8","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    return c","n_lines":2,"__index_level_0__":1734,"repair":""}
{"submission_id":33726,"func_code":"def union(a, b):\n    union = a + b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = a + b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","n_lines":12,"__index_level_0__":1735,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = {}\n    c = []\n    i = 0\n    while i < len(a):\n        if a[i] not in seen:\n            seen[a[i]] = True\n            c.append(a[i])\n        i = i + 1\n    i = 0\n    while i < len(b):\n        if b[i] not in seen:\n            seen[b[i]] = True\n            c.append(b[i])\n        i = i + 1\n    return c"}
{"submission_id":38180,"func_code":"def union(a, b):\n    union = a + b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(union):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = a + b\n    seen = {}\n    c = []\n    i = 0\n    while i < len(union):\n        if a[i] not in seen:\n            seen[a[i]] = True\n        i = i + 1\n    for number in seen:\n        c.append(number)\n    return c","n_lines":12,"__index_level_0__":1736,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = {}\n    c = []\n    for i in a:\n        if i not in seen:\n            seen[i] = True\n    for j in b:\n        if j not in seen:\n            seen[j] = True\n    for i in seen:\n        c.append(i)\n    return c"}
{"submission_id":41863,"func_code":"def union(a, b):\n    union = a + b\n    return sorted(sets.union(a, b))","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sets', ctx=Load()), attr='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = a + b\n    return sorted(sets.union(a, b))","n_lines":3,"__index_level_0__":1737,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    temp = []\n    for i in a:\n        if i not in temp:\n            temp.append(i)\n    for i in b:\n        if i not in temp:\n            temp.append(i)\n    return temp"}
{"submission_id":8586,"func_code":"def union(a, b):\n    union = a + b\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = a + b\n    return union","n_lines":3,"__index_level_0__":1738,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    res=[]\n    for x in a:\n        if x not in res:\n            res.append(x)\n    for y in b:\n        if y not in res:\n            res.append(y)\n    return res"}
{"submission_id":30261,"func_code":"def union(a, b):\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","n_lines":11,"__index_level_0__":1739,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        union = []\n    \n        for i in range(len(a)):\n            if a[i] not in union:\n                union.append(a[i])\n        \n        for i in range(len(b)):\n            if b[i] not in union:\n                union.append(b[i])\n        return union"}
{"submission_id":35336,"func_code":"def union(a, b):\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        for number in seen:\n            union.append(number)\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] or b[i] not in seen:\n            seen[a[i]] = True\n            seen[b[i]] = True\n        for number in seen:\n            union.append(number)\n    return union","n_lines":10,"__index_level_0__":1740,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    temp = []\n    for x in a:\n        if x not in temp:\n            temp.append(x)\n    for y in b:\n        if y not in temp:\n            temp.append(y)\n    return temp"}
{"submission_id":15933,"func_code":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","n_lines":12,"__index_level_0__":1741,"repair":"def union(f1con, f2con):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        union = []\n    \n        for i in f1con:\n            if i not in union:\n                union.append(i)\n        for i in f2con:\n            if i not in union:\n                union.append(i)\n        return union"}
{"submission_id":13018,"func_code":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    union = sorted(list(dict(union)))\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    union = sorted(list(dict(union)))\n    return union","n_lines":12,"__index_level_0__":1742,"repair":"def union(f1con, f2con):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union = []\n    for f in f1con:\n        if f not in union:\n            union.append(f)\n    for f in f2con:\n        if f not in union:\n            union.append(f)\n    return union"}
{"submission_id":16591,"func_code":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","n_lines":12,"__index_level_0__":1743,"repair":"def union(f1con, f2con):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        union = []\n    \n        for i in f1con:\n            if i not in union:\n                union.append(i)\n        for i in f2con:\n            if i not in union:\n                union.append(i)\n        return union"}
{"submission_id":12340,"func_code":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    unionorg = {}\n    i = 0\n    while i != len(union):\n        unionorg[union[i]] = True\n        i = i + 1\n    return '\/n', unionorg","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Tuple(elts=[Constant(value='\/n'), Name(id='x_4', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(f1con, f2con):\n    union = []\n    i = 0\n    while i != len(f1con):\n        union.append(f1con[i])\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        union.append(f2con[i])\n        i = i + 1\n    unionorg = {}\n    i = 0\n    while i != len(union):\n        unionorg[union[i]] = True\n        i = i + 1\n    return '\/n', unionorg","n_lines":16,"__index_level_0__":1748,"repair":"def union(f1con, f2con):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        union = []\n    \n        for a in f1con:\n                if a not in union:\n                        union.append(a)\n        for b in f2con:\n                if b not in union:\n                        union.append(b)\n        return union"}
{"submission_id":41359,"func_code":"def union(a, b):\n    c = a + b\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if c[i] not in seen:\n            seen[c[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a + b\n    union = []\n    i = 0\n    while i < len(a) and i < len(b):\n        if c[i] not in seen:\n            seen[c[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","n_lines":11,"__index_level_0__":1749,"repair":"def union(a, b):\n        \"\"\"Merge two lists into a single one.\"\"\"\n        c = a + b\n        union = []\n    \n        for i in c:\n            if i not in union:\n                union.append(i)\n        return union"}
{"submission_id":7629,"func_code":"def union(a, b):\n    c = a + b\n    union = []\n    i = 0\n    while i < len(c):\n        if c[i] not in seen:\n            seen[c[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"b588e248-0a0b-40c1-ad90-f9fc1d050dd0","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(a, b):\n    c = a + b\n    union = []\n    i = 0\n    while i < len(c):\n        if c[i] not in seen:\n            seen[c[i]] = True\n        i = i + 1\n    for number in seen:\n        union.append(number)\n    return union","n_lines":11,"__index_level_0__":1750,"repair":"def union(a, b):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    seen = {}\n    union = []\n    for i in a:\n        if i in seen:\n            continue\n        else:\n            union.append(i)\n            seen[i] = True\n    for i in b:\n        if not i in seen:\n            union.append(i)\n    return union"}
{"submission_id":13471,"func_code":"def union(f1con, f2con):\n    d1 = {}\n    union = []\n    i = 0\n    while i != len(f1con):\n        line = f1con[i]\n        d1[line] = True\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        line = f2con[i]\n        if line in list(d1.keys()):\n            union.append(line)\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","assignment_id":"union","func_name":"union","description":"Merge two lists into a single one.","test":"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]","correct":false,"user":"c601c339-f2b7-4564-a96b-2de852eabb7b","academic_year":2017,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def union(f1con, f2con):\n    d1 = {}\n    union = []\n    i = 0\n    while i != len(f1con):\n        line = f1con[i]\n        d1[line] = True\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        line = f2con[i]\n        if line in list(d1.keys()):\n            union.append(line)\n        i = i + 1\n    union = sorted(list(set(union)))\n    return union","n_lines":16,"__index_level_0__":1751,"repair":"def union(f1con, f2con):\n    \"\"\"Merge two lists into a single one.\"\"\"\n    union = []\n    i = 0\n    while i != len(f1con):\n        line = f1con[i]\n        if line not in union:\n            union.append(line)\n        i = i + 1\n    i = 0\n    while i != len(f2con):\n        line = f2con[i]\n        if line not in union:\n            union.append(line)\n        i = i + 1\n    return union"}
