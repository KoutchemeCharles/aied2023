{"submission_id":4956,"func_code":"def listeDecroissante(scores):\n    i = 0\n    ok = True\n    while i < len(scores) - 1 and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    i = 0\n    ok = True\n    while i < len(scores) - 1 and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return res","n_lines":8,"__index_level_0__":0,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        i = 0\n        ok = True\n        while i < len(scores) - 1 and ok:\n            if scores[i] < scores[i + 1]:\n                ok = False\n            i += 1\n    \n        return ok"}
{"submission_id":2785,"func_code":"def listeDecroissante(scores):\n    i = 0\n    res = True\n    while i < len(scores) - 1:\n        if scores[i] < scores[i + 1]:\n            res = False\n    i = i + 1\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    i = 0\n    res = True\n    while i < len(scores) - 1:\n        if scores[i] < scores[i + 1]:\n            res = False\n    i = i + 1\n    return res","n_lines":8,"__index_level_0__":1,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        i = 0\n        res = True\n        while i < len(scores) - 1:\n            if scores[i] < scores[i + 1]:\n                res = False\n    \n            i = i + 1\n        return res"}
{"submission_id":590,"func_code":"def listeDecroissante(scores):\n    i = 0\n    ok = True\n    while i < len(scores):\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    i = 0\n    ok = True\n    while i < len(scores):\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return ok","n_lines":8,"__index_level_0__":2,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        i = 0\n        ok = True\n    \n        while i < len(scores) - 1:\n            if scores[i] < scores[i + 1]:\n                ok = False\n            i += 1\n        return ok"}
{"submission_id":272,"func_code":"def listeDecroissante(scores):\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > scores[i + 1]:\n            return True\n        else:\n            return False\n    i = i + 1","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > scores[i + 1]:\n            return True\n        else:\n            return False\n    i = i + 1","n_lines":8,"__index_level_0__":3,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] < scores[i + 1]:\n            return False\n        else:\n            i = i + 1\n    return True"}
{"submission_id":1313,"func_code":"def listeDecroissante(scores):\n    A = False\n    res = A\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[1 + i]:\n            res = A\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    A = False\n    res = A\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[1 + i]:\n            res = A\n    return res","n_lines":9,"__index_level_0__":4,"repair":""}
{"submission_id":5273,"func_code":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[1 + i]:\n            res = True\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[1 + i]:\n            res = True\n    return res","n_lines":8,"__index_level_0__":5,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    if len(scores) == 0:\n        return True\n    \n    aux = scores[0]\n    for i in range(1, len(scores)):\n        if scores[i] > aux:\n            return False\n        aux = scores[i]\n    return True"}
{"submission_id":2026,"func_code":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[i + 1]:\n            res = True\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[i + 1]:\n            res = True\n    return res","n_lines":8,"__index_level_0__":6,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        res = False\n        if scores == []:\n            res = True\n    \n        else:\n            if sorted(scores)[::-1] == scores:\n                res = True\n    \n        return res"}
{"submission_id":1169,"func_code":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores)):\n        if scores[i] > scores[1 + i]:\n            res = True\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores)):\n        if scores[i] > scores[1 + i]:\n            res = True\n    return res","n_lines":8,"__index_level_0__":7,"repair":""}
{"submission_id":2390,"func_code":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores)):\n        if scores[i] < scores[1 - i]:\n            res = True\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in range(len(scores)):\n        if scores[i] < scores[1 - i]:\n            res = True\n    return res","n_lines":8,"__index_level_0__":8,"repair":""}
{"submission_id":234,"func_code":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in scores:\n        if scores[i] > scores[i + 1]:\n            res = True\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = False\n    if scores == []:\n        res = True\n    for i in scores:\n        if scores[i] > scores[i + 1]:\n            res = True\n    return res","n_lines":8,"__index_level_0__":9,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    return sorted(scores)[::-1] == scores"}
{"submission_id":3149,"func_code":"def listeDecroissante(scores):\n    ok = False\n    while i < len(liste) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n        return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = False\n    while i < len(liste) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n        return ok","n_lines":8,"__index_level_0__":10,"repair":""}
{"submission_id":3017,"func_code":"def listeDecroissante(scores):\n    ok = False\n    while i < len(liste) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = False\n    while i < len(liste) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n    return ok","n_lines":8,"__index_level_0__":11,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    return sorted(scores, key=lambda x: -x) == scores"}
{"submission_id":3373,"func_code":"def listeDecroissante(scores):\n    ok = False\n    while i < len(scores) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = False\n    while i < len(scores) and not ok:\n        if liste[i] > liste[i + 1]:\n            res = True\n        else:\n            res = ok\n    return ok","n_lines":8,"__index_level_0__":12,"repair":""}
{"submission_id":3987,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    if len(scores) > 1:\n        while i < len(scores) - 1 and ok:\n            if scores[i] > scores[i + 1]:\n                ok = False\n            i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    if len(scores) > 1:\n        while i < len(scores) - 1 and ok:\n            if scores[i] > scores[i + 1]:\n                ok = False\n            i = i + 1\n    return ok","n_lines":9,"__index_level_0__":13,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    ok = True\n    for i in range(len(scores) - 1):\n        if scores[i] < scores[i + 1]:\n            ok = False\n    return ok"}
{"submission_id":2795,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    if len(scores) > 1:\n        while i < len(scores) - 1:\n            if scores[i] > scores[i + 1]:\n                ok = False\n            i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    if len(scores) > 1:\n        while i < len(scores) - 1:\n            if scores[i] > scores[i + 1]:\n                ok = False\n            i = i + 1\n    return ok","n_lines":9,"__index_level_0__":14,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    return sorted(scores)[::-1] == scores"}
{"submission_id":906,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(lscore) - 1 and ok:\n        if lscore[i] <= lscore[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lscore', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='lscore', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='lscore', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(lscore) - 1 and ok:\n        if lscore[i] <= lscore[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":15,"repair":""}
{"submission_id":5478,"func_code":"def listeDecroissante(scores):\n    c = True\n    i = 0\n    while i < len(score) - 1 and c:\n        if score[i] < score[i + 1]:\n            c = False\n        i = i + 1\n    return c","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='score', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='score', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    c = True\n    i = 0\n    while i < len(score) - 1 and c:\n        if score[i] < score[i + 1]:\n            c = False\n        i = i + 1\n    return c","n_lines":8,"__index_level_0__":16,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    return all(scores[i]>scores[i+1] for i in range(len(scores)-1))"}
{"submission_id":2141,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1 and ok:\n        if scores[i] > scores[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1 and ok:\n        if scores[i] > scores[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":17,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n        i = 0\n        while i < len(scores) - 1 and ok:\n    \n            if scores[i] > scores[i + 1]:\n                ok = True\n            else:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":1463,"func_code":"def listeDecroissante(scores):\n    res = True\n    i = 0\n    while i < len(scores) - 1 and res:\n        if scores[i] <= scores[i + 1]:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = True\n    i = 0\n    while i < len(scores) - 1 and res:\n        if scores[i] <= scores[i + 1]:\n            res = False\n    return res","n_lines":7,"__index_level_0__":18,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        res = True\n    \n        for i in range(len(scores) - 1):\n            if scores[i] <= scores[i + 1]:\n                res = False\n        return res"}
{"submission_id":487,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n        i += 1\n    return ok","n_lines":8,"__index_level_0__":19,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                ok = False\n                break\n        \n        return ok"}
{"submission_id":3834,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) and ok:\n        if scores[i] < scores[i + 1]:\n            ok = False\n    return ok","n_lines":7,"__index_level_0__":20,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        for i in range(len(scores) - 1):\n            if scores[i] < scores[i + 1]:\n                ok = False\n        return ok"}
{"submission_id":5642,"func_code":"def listeDecroissante(scores):\n    res = True\n    i = 0\n    while i < len(score) - 1:\n        if score[i] < score[i + 1]:\n            return False\n        i = i + 1\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='score', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='score', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = True\n    i = 0\n    while i < len(score) - 1:\n        if score[i] < score[i + 1]:\n            return False\n        i = i + 1\n    return res","n_lines":8,"__index_level_0__":21,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        res = True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                return False\n        return True"}
{"submission_id":1226,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > score[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > score[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":22,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                ok = False\n                break\n        return ok"}
{"submission_id":359,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > score[i + 1]:\n            ok = False\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > score[i + 1]:\n            ok = False\n    return ok","n_lines":7,"__index_level_0__":23,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                ok = False\n                break\n        return ok"}
{"submission_id":979,"func_code":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > scores[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    i = 0\n    while i < len(scores) - 1:\n        if scores[i] > scores[i + 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":24,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        for i in range(len(scores) - 1, 0, -1):\n            if scores[i] > scores[i-1]:\n                ok = False\n                break\n        return ok"}
{"submission_id":4174,"func_code":"def listeDecroissante(scores):\n    res = True\n    x = score[0]\n    for elem in score:\n        if x < elem:\n            res = False\n        x = elem\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='score', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='score', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = True\n    x = score[0]\n    for elem in score:\n        if x < elem:\n            res = False\n        x = elem\n    return res","n_lines":8,"__index_level_0__":25,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        res = True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                res = False\n        return res"}
{"submission_id":1470,"func_code":"def listeDecroissante(scores):\n    res = True\n    x = scores[0]\n    for elem in scores:\n        if x < elem:\n            res = False\n        x = elem\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = True\n    x = scores[0]\n    for elem in scores:\n        if x < elem:\n            res = False\n        x = elem\n    return res","n_lines":8,"__index_level_0__":26,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    return sorted(scores, reverse=True) == scores"}
{"submission_id":4981,"func_code":"def listeDecroissante(scores):\n    res = True\n    if len(scores) == 0:\n        return res\n    else:\n        x = True\n        i = 0\n        while i < len(scores) and x:\n            if scores[i] < scores[i + 1]:\n                x = False\n            i = i + 1\n        return x","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = True\n    if len(scores) == 0:\n        return res\n    else:\n        x = True\n        i = 0\n        while i < len(scores) and x:\n            if scores[i] < scores[i + 1]:\n                x = False\n            i = i + 1\n        return x","n_lines":12,"__index_level_0__":27,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        res = True\n        if len(scores) == 0:\n            return res\n    \n        for i in range(len(scores)):\n            x = False\n            for j in range(i+1, len(scores)):\n                if scores[j] > scores[i]:\n                    x = True\n                    break\n            \n            if x == True:\n                res = not res\n                break\n        return res"}
{"submission_id":3838,"func_code":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] > liste[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] > liste[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","n_lines":8,"__index_level_0__":28,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    for i in range(len(scores) - 1, 0, -1):\n        if scores[i] > scores[i-1]:\n            return False\n    return True"}
{"submission_id":134,"func_code":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] > liste[i + 1]:\n            res = ok\n        else:\n            res = Faux\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='Faux', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] > liste[i + 1]:\n            res = ok\n        else:\n            res = Faux\n    return res","n_lines":8,"__index_level_0__":29,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        ok = True\n    \n        if len(scores) <= 1:\n            return True\n    \n        for i in range(1, len(scores)):\n            if scores[i] > scores[i-1]:\n                return False\n    \n        return True"}
{"submission_id":4661,"func_code":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] >= liste[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if liste[i] >= liste[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","n_lines":8,"__index_level_0__":30,"repair":""}
{"submission_id":3704,"func_code":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if scores[i] >= scores[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if scores[i] >= scores[i + 1]:\n            res = ok\n        else:\n            res = False\n    return res","n_lines":8,"__index_level_0__":31,"repair":""}
{"submission_id":4902,"func_code":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if scores[i] >= scores[i + 1]:\n            res = ok\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    ok = True\n    while i < len(scores) and ok:\n        if scores[i] >= scores[i + 1]:\n            res = ok\n    return res","n_lines":6,"__index_level_0__":32,"repair":""}
{"submission_id":2829,"func_code":"def listeDecroissante(scores):\n    res = []\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[i + 1]:\n            res = True\n        else:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    res = []\n    for i in range(len(scores) - 1):\n        if scores[i] > scores[i + 1]:\n            res = True\n        else:\n            res = False\n    return res","n_lines":8,"__index_level_0__":33,"repair":"def listeDecroissante(scores):\n    \"\"\"Check whether a list is sorted in descending order.\"\"\"\n    \n    if len(scores) < 2:\n        return True\n    else:\n        for i in range(len(scores) - 1):\n            if scores[i] > scores[i + 1]:\n                res = True\n            else:\n                res = False\n        return res"}
{"submission_id":3859,"func_code":"def listeDecroissante(scores):\n    scorePrec = scores[0]\n    ok = True\n    i = 1\n    while i < len(scores) and ok:\n        if scorePrec <= scores[i]:\n            ok = False\n            i += 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False)), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    scorePrec = scores[0]\n    ok = True\n    i = 1\n    while i < len(scores) and ok:\n        if scorePrec <= scores[i]:\n            ok = False\n            i += 1\n    return ok","n_lines":9,"__index_level_0__":34,"repair":""}
{"submission_id":1712,"func_code":"def listeDecroissante(scores):\n    scorePrec = scores[0]\n    ok = True\n    i = 1\n    while i < len(scores) and ok:\n        if scorePrec <= scores[i]:\n            ok = False\n        i += 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    scorePrec = scores[0]\n    ok = True\n    i = 1\n    while i < len(scores) and ok:\n        if scorePrec <= scores[i]:\n            ok = False\n        i += 1\n    return ok","n_lines":9,"__index_level_0__":35,"repair":""}
{"submission_id":98,"func_code":"def listeDecroissante(scores):\n    for i in range(len(scores)):\n        if scores[i] < scores[i + 1]:\n            return False\n        else:\n            return True","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    for i in range(len(scores)):\n        if scores[i] < scores[i + 1]:\n            return False\n        else:\n            return True","n_lines":6,"__index_level_0__":36,"repair":""}
{"submission_id":5385,"func_code":"def listeDecroissante(scores):\n    if scores == [] or res == True:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] <= scores[i + 1]:\n            res = False\n    return res","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    if scores == [] or res == True:\n        res = True\n    for i in range(len(scores) - 1):\n        if scores[i] <= scores[i + 1]:\n            res = False\n    return res","n_lines":7,"__index_level_0__":37,"repair":""}
{"submission_id":4733,"func_code":"def listeDecroissante(scores):\n    if len(scores) == 0:\n        ok = True\n    else:\n        ok = True\n        i = 0\n        while i < len(scores) and ok:\n            if scores[i] < scores[i + 1]:\n                ok = False\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    if len(scores) == 0:\n        ok = True\n    else:\n        ok = True\n        i = 0\n        while i < len(scores) and ok:\n            if scores[i] < scores[i + 1]:\n                ok = False\n    return ok","n_lines":10,"__index_level_0__":38,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        if len(scores) == 0:\n            ok = True\n        else:\n            ok = True\n            i = 0\n    \n            for i in range(len(scores) - 1):\n                if scores[i] < scores[i + 1]:\n                    ok = False\n        return ok"}
{"submission_id":229,"func_code":"def listeDecroissante(scores):\n    if scores == []:\n        ok = True\n    else:\n        scorePrec = scores[0]\n        ok = True\n        i = 1\n        while i < len(scores) and ok:\n            if scorePrec <= scores[i]:\n                ok = False\n            i += 1\n    return ok","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    if scores == []:\n        ok = True\n    else:\n        scorePrec = scores[0]\n        ok = True\n        i = 1\n        while i < len(scores) and ok:\n            if scorePrec <= scores[i]:\n                ok = False\n            i += 1\n    return ok","n_lines":12,"__index_level_0__":39,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        if scores == []:\n            ok = True\n        else:\n            scorePrec = scores[0]\n            ok = True\n            i = 1\n            while i < len(scores) and ok:\n    \n                if scorePrec>scores[i]:\n                    scorePrec = scores[i]\n                else:\n                    ok = False\n                i += 1\n        return ok"}
{"submission_id":1743,"func_code":"def listeDecroissante(scores):\n    if scores == []:\n        return True\n    else:\n        for i in range(len(scores)):\n            if scores[i] < scores[i + 1]:\n                return False\n            else:\n                return True","assignment_id":"decreasing_list","func_name":"listeDecroissante","description":"Check whether a list is sorted in descending order.","test":"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True","correct":false,"normalized":"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def listeDecroissante(scores):\n    if scores == []:\n        return True\n    else:\n        for i in range(len(scores)):\n            if scores[i] < scores[i + 1]:\n                return False\n            else:\n                return True","n_lines":9,"__index_level_0__":40,"repair":"def listeDecroissante(scores):\n        \"\"\"Check whether a list is sorted in descending order.\"\"\"\n        if scores == []:\n            return True\n        else:\n    \n            return all(scores[i] > scores[i + 1] for i in range(len(scores) - 1))"}
{"submission_id":1136,"func_code":"def motPalindrome(mot):\n    res = 0\n    ok = True\n    while i < len(mot) and ok:\n        if mot[i] != mot[-i - 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = 0\n    ok = True\n    while i < len(mot) and ok:\n        if mot[i] != mot[-i - 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":363,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        res = 0\n    \n        i = 0\n        ok = True\n        while i < len(mot) and ok:\n            if mot[i] != mot[-i - 1]:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":4455,"func_code":"def motPalindrome(mot):\n    res = False\n    i = 0\n    while i < len(mot) and not res:\n        if mot[i] == mot[-1 - i]:\n            res = True\n        i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = False\n    i = 0\n    while i < len(mot) and not res:\n        if mot[i] == mot[-1 - i]:\n            res = True\n        i += 1\n    return res","n_lines":8,"__index_level_0__":365,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    \n    res=mot[::-1]==mot\n    if res==True:\n        return True\n    else:\n        return res"}
{"submission_id":989,"func_code":"def motPalindrome(mot):\n    B = False\n    A = True\n    c = A\n    while i < len(mot) \/ 2 and c:\n        if mot[i] == mot[len(mot) - i]:\n            c = A\n        else:\n            c = B\n    if c == A:\n        return A\n    else:\n        return B","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='i', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    B = False\n    A = True\n    c = A\n    while i < len(mot) \/ 2 and c:\n        if mot[i] == mot[len(mot) - i]:\n            c = A\n        else:\n            c = B\n    if c == A:\n        return A\n    else:\n        return B","n_lines":13,"__index_level_0__":368,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    l = len(mot)\n    for i in range(l\/\/2):\n        if mot[i]!=mot[l-i-1]:\n            return False\n    return True"}
{"submission_id":4886,"func_code":"def motPalindrome(mot):\n    A = False\n    res = A\n    if mot[0] == mot[-1]:\n        res = True\n    else:\n        res = A\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = False\n    res = A\n    if mot[0] == mot[-1]:\n        res = True\n    else:\n        res = A\n    return res","n_lines":8,"__index_level_0__":369,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    ans = mot[::-1] == mot\n    return ans"}
{"submission_id":4823,"func_code":"def motPalindrome(mot):\n    res = False\n    if mot(0) == mot(-1):\n        res = True\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = False\n    if mot(0) == mot(-1):\n        res = True\n    return res","n_lines":5,"__index_level_0__":370,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        res = False\n    \n        if mot == mot[::-1]:\n                res = True\n        return res"}
{"submission_id":3131,"func_code":"def motPalindrome(mot):\n    res = False\n    if mot == '':\n        res = True\n    else:\n        mot2 = ''\n        for i in mot:\n            mot2 = i + mot2\n        if mot1 == mot2:\n            res = True\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='mot1', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = False\n    if mot == '':\n        res = True\n    else:\n        mot2 = ''\n        for i in mot:\n            mot2 = i + mot2\n        if mot1 == mot2:\n            res = True\n    return res","n_lines":11,"__index_level_0__":371,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    mot1 = mot\n    res = False\n    if len(mot1) > len(mot):\n        res = True\n    else:\n        if mot == '':\n            res = True\n        else:\n            mot2 = ''\n            for i in mot:\n                mot2 = i + mot2\n            if mot1 == mot2:\n                res = True\n        return res"}
{"submission_id":5119,"func_code":"def motPalindrome(mot):\n    res = False\n    if mot[0] == mot[-1]:\n        res = True\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = False\n    if mot[0] == mot[-1]:\n        res = True\n    return res","n_lines":5,"__index_level_0__":372,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    mot = mot.lower()\n    mot = mot.replace(' ', '')\n    return mot == mot[::-1]"}
{"submission_id":4142,"func_code":"def motPalindrome(mot):\n    palindrome = True\n    i = 0\n    j = len(mot) - 1\n    i = 0\n    while i < j and palindrome:\n        if mot[i] != mot[j]:\n            palindrome = False\n    i = i + 1\n    j = j - 1\n    return palindrome","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    palindrome = True\n    i = 0\n    j = len(mot) - 1\n    i = 0\n    while i < j and palindrome:\n        if mot[i] != mot[j]:\n            palindrome = False\n    i = i + 1\n    j = j - 1\n    return palindrome","n_lines":11,"__index_level_0__":373,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        palindrome = True\n        i = 0\n        j = len(mot) - 1\n        i = 0\n        while i < j and palindrome:\n            if mot[i] != mot[j]:\n                palindrome = False\n    \n            i += 1\n            j -= 1\n        return palindrome"}
{"submission_id":3416,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    return ok","n_lines":5,"__index_level_0__":374,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    mot = mot.lower()\n    return mot == mot[::-1]"}
{"submission_id":2359,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = True\n        else:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = True\n        else:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","n_lines":12,"__index_level_0__":375,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < len(mot) and ok:\n    \n            if mot[i]==mot[j]:\n                ok = True\n            else:\n                ok = False\n            i = i + 1\n            j = j - 1\n        return ok"}
{"submission_id":5572,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = true\n        else:\n            ok = true\n        i = i + 1\n        j = j - 1\n    return None","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = true\n        else:\n            ok = true\n        i = i + 1\n        j = j - 1\n    return None","n_lines":12,"__index_level_0__":376,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n    \n        while i < j:\n            if mot[i]!=mot[j]:\n                ok = False\n                break\n            i = i+1\n            j = j-1\n        return ok"}
{"submission_id":1865,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = true\n        else:\n            ok = true\n        i = i + 1\n        j = j - 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i == j:\n            ok = true\n        else:\n            ok = true\n        i = i + 1\n        j = j - 1\n    return ok","n_lines":12,"__index_level_0__":377,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < len(mot) and ok:\n    \n            if mot[i] != mot[j]:\n                ok = False\n            i = i + 1\n            j = j - 1\n        return ok"}
{"submission_id":3482,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i != j:\n            ok = False\n        i = i + 1\n        j = j + 1\n    if i == j:\n        ok = True\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i != j:\n            ok = False\n        i = i + 1\n        j = j + 1\n    if i == j:\n        ok = True\n    return ok","n_lines":12,"__index_level_0__":378,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n    \n        while i < j:\n            if mot[i] != mot[j]:\n                ok = False\n            i = i + 1\n            j = j - 1\n        if i == j:\n            ok = True\n        return ok"}
{"submission_id":3143,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i != j:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if i != j:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","n_lines":10,"__index_level_0__":379,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < len(mot) and ok:\n    \n            if mot[i]!=mot[j]:\n                ok = False\n            j = j - 1\n            i = i + 1\n        return ok"}
{"submission_id":3851,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if mot[i] != mot[j]:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < len(mot) and ok:\n        if mot[i] != mot[j]:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","n_lines":10,"__index_level_0__":380,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < len(mot) and ok:\n    \n            if mot[i]!=mot[j]:\n                ok = False\n    \n            i = i + 1\n            j = j - 1\n    \n        if ok:\n            return True\n        else:\n            return False"}
{"submission_id":2338,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < j and ok:\n        if i == j:\n            ok = True\n        else:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < j and ok:\n        if i == j:\n            ok = True\n        else:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","n_lines":12,"__index_level_0__":381,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < j and ok:\n    \n            if mot[i] == mot[j]:\n                ok = True\n            else:\n                ok = False\n            i = i + 1\n            j = j - 1\n        return ok"}
{"submission_id":5352,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < j and ok:\n        if mot[i] != mot[j]:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    j = len(mot) - 1\n    while i < j and ok:\n        if mot[i] != mot[j]:\n            ok = False\n        i = i + 1\n        j = j + 1\n    return ok","n_lines":10,"__index_level_0__":382,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        ok = True\n        i = 0\n        j = len(mot) - 1\n        while i < j and ok:\n            if mot[i] != mot[j]:\n                ok = False\n    \n            i += 1\n            j -= 1\n        return ok"}
{"submission_id":1817,"func_code":"def motPalindrome(mot):\n    A = True\n    i = 0\n    trouve = False\n    res = A\n    while i < len(mot) \/ 2 and not trouve:\n        if mot[i] == mot[-i - 1]:\n            i += 1\n            trouve = A\n    if trouve:\n        res = A\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), UnaryOp(op=Not(), operand=Name(id='x_3', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    i = 0\n    trouve = False\n    res = A\n    while i < len(mot) \/ 2 and not trouve:\n        if mot[i] == mot[-i - 1]:\n            i += 1\n            trouve = A\n    if trouve:\n        res = A\n    return res","n_lines":12,"__index_level_0__":383,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    mot = mot.lower()\n    if len(mot) != len(mot):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot[-i - 1]:\n            return False\n    return True"}
{"submission_id":2640,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    return ok","n_lines":4,"__index_level_0__":384,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    mot = mot.lower()\n    return mot==mot[::-1]"}
{"submission_id":2070,"func_code":"def motPalindrome(mot):\n    res = True\n    i = 0\n    while i < len(mot) \/ 2 and res == True:\n        if mot[i] != mot[len(l) - i - 1]:\n            res = False\n        i = i + 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = True\n    i = 0\n    while i < len(mot) \/ 2 and res == True:\n        if mot[i] != mot[len(l) - i - 1]:\n            res = False\n        i = i + 1\n    return res","n_lines":8,"__index_level_0__":385,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        res = True\n    \n        for i in range(len(mot)):\n            l = mot\n            if mot[i] != mot[len(l) - i - 1]:\n                res = False\n            i = i + 1\n        return res"}
{"submission_id":3850,"func_code":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    while i < len(mot) \/\/ 2 and ok:\n        if mot[i] != mot[-i - 1]:\n            ok = False\n        i += 1\n        return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    ok = True\n    i = 0\n    while i < len(mot) \/\/ 2 and ok:\n        if mot[i] != mot[-i - 1]:\n            ok = False\n        i += 1\n        return ok","n_lines":8,"__index_level_0__":386,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    ok = True\n    i = 0\n    while i < len(mot) and ok:\n        if mot[i] != mot[-i - 1]:\n            ok = False\n        i += 1\n    return ok"}
{"submission_id":4694,"func_code":"def motPalindrome(mot):\n    res = True\n    i = 0\n    while i < len(mot) \/\/ 2 and res:\n        if mot[i] != mot[-i - 1]:\n            res = False\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    res = True\n    i = 0\n    while i < len(mot) \/\/ 2 and res:\n        if mot[i] != mot[-i - 1]:\n            res = False\n    return res","n_lines":7,"__index_level_0__":387,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        res = True\n        i = 0\n    \n        for i in range(len(mot)-1):\n            if mot[i] != mot[-i - 1]:\n                res = False\n        return res"}
{"submission_id":1899,"func_code":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res == A:\n            if mot[i \/\/ 2] == mot[-i \/\/ 2]:\n                res = A\n                i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res == A:\n            if mot[i \/\/ 2] == mot[-i \/\/ 2]:\n                res = A\n                i += 1\n    return res","n_lines":12,"__index_level_0__":390,"repair":"def motPalindrome(mot):\n    \"\"\"Check whether a word is a palindrome.\"\"\"\n    A = list(mot)\n    for i in range(len(A)-1):\n        if A[i] != A[len(A)-i-1]:\n            return False\n    return True"}
{"submission_id":2500,"func_code":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res == A:\n            if mot[i] == mot[-i]:\n                res = A\n            i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res == A:\n            if mot[i] == mot[-i]:\n                res = A\n            i += 1\n    return res","n_lines":12,"__index_level_0__":392,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        A = True\n        if len(mot) == 0:\n            res = A\n        else:\n            res = A\n            i = 0\n            while i < len(mot) and res == A:\n    \n                res = mot[i] == mot[len(mot)-i-1]\n                i += 1\n        return res"}
{"submission_id":3666,"func_code":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-i - 1]:\n                res = A\n            i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-i - 1]:\n                res = A\n            i += 1\n    return res","n_lines":12,"__index_level_0__":393,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        A = True\n        if len(mot) == 0:\n            res = A\n        else:\n            res = A\n    \n        for i in range(len(mot)-1,-1,-1):\n            if mot[i]!=mot[len(mot)-i-1]:\n                res = False\n                break\n        if res:\n            return True\n        return res"}
{"submission_id":3038,"func_code":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-1]:\n                res = A\n            i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-1]:\n                res = A\n            i += 1\n    return res","n_lines":12,"__index_level_0__":394,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        A = True\n        if len(mot) == 0:\n            res = A\n        else:\n            res = A\n            i = 0\n    \n            for char in mot:\n                if char != mot[len(mot)-i-1]:\n                    res = False\n                    break\n                \n                i += 1\n        return res"}
{"submission_id":1882,"func_code":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-i]:\n                res = A\n            i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    A = True\n    if len(mot) == 0:\n        res = A\n    else:\n        res = A\n        i = 0\n        while i < len(mot) and res:\n            if mot[i] == mot[-i]:\n                res = A\n            i += 1\n    return res","n_lines":12,"__index_level_0__":395,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        A = True\n        if len(mot) == 0:\n            res = A\n        else:\n            res = A\n            i = 0\n            while i < len(mot) and res:\n    \n                res = mot[i] == mot[len(mot)-i-1]\n                i += 1\n        return res"}
{"submission_id":694,"func_code":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        res = True\n        i = 0\n        while i < len(mot) \/\/ 2 and res:\n            if mot[i] != mot[-(i + 1)]:\n                res = False\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        res = True\n        i = 0\n        while i < len(mot) \/\/ 2 and res:\n            if mot[i] != mot[-(i + 1)]:\n                res = False\n    return res","n_lines":10,"__index_level_0__":396,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        if len(mot) == 0:\n            res = True\n        else:\n            res = True\n            i = 0\n    \n            for i in range(1, len(mot)):\n                if mot[i] != mot[-(i + 1)]:\n                    res = False\n        return res"}
{"submission_id":1198,"func_code":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        res = True\n        i = 0\n        while i < len(mot) and res:\n            res = mot[i] == mot[-1]\n            i += 1\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        res = True\n        i = 0\n        while i < len(mot) and res:\n            res = mot[i] == mot[-1]\n            i += 1\n    return res","n_lines":10,"__index_level_0__":397,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        if len(mot) == 0:\n            res = True\n        else:\n            res = True\n            i = 0\n            while i < len(mot) and res:\n    \n                if mot[i]!=mot[len(mot)-i-1]:\n                    res = False\n                i += 1\n        return res"}
{"submission_id":5639,"func_code":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        ok = True\n        i = 0\n        while i < len(mot) and ok:\n            ok = mot[i] == mot[-1]\n            i += 1\n        res = ok\n    return res","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        ok = True\n        i = 0\n        while i < len(mot) and ok:\n            ok = mot[i] == mot[-1]\n            i += 1\n        res = ok\n    return res","n_lines":11,"__index_level_0__":398,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        if len(mot) == 0:\n            res = True\n        else:\n            ok = True\n            i = 0\n    \n            while i < len(mot):\n                if mot[i] != mot[len(mot) - i - 1]:\n                    ok = False\n                    break\n                i += 1\n            res = ok\n        return res"}
{"submission_id":2688,"func_code":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        ok = True\n        i = 0\n        while i < len(mot) and ok:\n            ok = mot[i] == mot[-1]\n            i += 1\n    return ok","assignment_id":"is_palindrome","func_name":"motPalindrome","description":"Check whether a word is a palindrome.","test":"assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False","correct":false,"normalized":"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def motPalindrome(mot):\n    if len(mot) == 0:\n        res = True\n    else:\n        ok = True\n        i = 0\n        while i < len(mot) and ok:\n            ok = mot[i] == mot[-1]\n            i += 1\n    return ok","n_lines":10,"__index_level_0__":399,"repair":"def motPalindrome(mot):\n        \"\"\"Check whether a word is a palindrome.\"\"\"\n        if len(mot) == 0:\n            res = True\n    \n        ok = True\n        for i in range(0,len(mot)):\n            if mot[i]!=mot[len(mot)-i-1]:\n                ok = False\n        return ok"}
{"submission_id":813,"func_code":"def maximum(x, y, z):\n    if x >= y and x >= z:\n        maxi = x\n    if y >= x and y >= z:\n        maxi = y\n    if z >= x and z >= y:\n        maxi = z\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(x, y, z):\n    if x >= y and x >= z:\n        maxi = x\n    if y >= x and y >= z:\n        maxi = y\n    if z >= x and z >= y:\n        maxi = z\n    return maxi","n_lines":8,"__index_level_0__":69,"repair":""}
{"submission_id":222,"func_code":"def maximum(liste):\n    liste: 0\n    res = 0\n    for i in range(len(liste)):\n        if res > len(liste):\n            res = len(liste)\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='x_0', ctx=Store()), annotation=Constant(value=0), simple=1), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    liste: 0\n    res = 0\n    for i in range(len(liste)):\n        if res > len(liste):\n            res = len(liste)\n        return res","n_lines":7,"__index_level_0__":70,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        liste: 0\n    \n        if len(liste) == 0:\n            return None\n        else:\n            res = max(liste)\n            return res"}
{"submission_id":2582,"func_code":"def maximum(liste):\n    liste: 0\n    res = 0\n    for i in range(len(liste)):\n        if res < len(liste):\n            res = len(liste)\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='x_0', ctx=Store()), annotation=Constant(value=0), simple=1), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    liste: 0\n    res = 0\n    for i in range(len(liste)):\n        if res < len(liste):\n            res = len(liste)\n        return res","n_lines":7,"__index_level_0__":71,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    maximum = None\n    for i in range(len(liste)):\n        if maximum is None or liste[i] > maximum:\n            maximum = liste[i]\n    return maximum"}
{"submission_id":2116,"func_code":"def maximum(liste):\n    res = l(0)\n    for x in liste:\n        if x > res:\n            res = x\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[Constant(value=0)], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = l(0)\n    for x in liste:\n        if x > res:\n            res = x\n    return res","n_lines":6,"__index_level_0__":72,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for x in liste:\n            if x > res:\n                res = x\n        return res"}
{"submission_id":5591,"func_code":"def maximum(liste):\n    res = l(1)\n    for x in liste:\n        if x > res:\n            res = x\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[Constant(value=1)], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = l(1)\n    for x in liste:\n        if x > res:\n            res = x\n    return res","n_lines":6,"__index_level_0__":73,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for x in liste:\n            if x > res:\n                res = x\n        return res"}
{"submission_id":460,"func_code":"def maximum(liste):\n    max = len(1, liste)\n    for i in range(len(liste)):\n        if i > max:\n            max = i\n    return None","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = len(1, liste)\n    for i in range(len(liste)):\n        if i > max:\n            max = i\n    return None","n_lines":6,"__index_level_0__":74,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        return max(liste)"}
{"submission_id":2873,"func_code":"def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1, n):\n        if lise[i] >= maxi:\n            maxi = liste[i]\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_1', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='lise', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1, n):\n        if lise[i] >= maxi:\n            maxi = liste[i]\n    return maxi","n_lines":7,"__index_level_0__":75,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    lise = liste[:]\n    n = len(lise)\n    if n==0:\n        return None\n    else:\n        maxi = liste[0]\n        for i in range(1, n):\n            if lise[i] >= maxi:\n                maxi = liste[i]\n        return maxi"}
{"submission_id":1054,"func_code":"def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1, n):\n        if liste[i] >= maxi:\n            maxi = liste[i]\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_1', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1, n):\n        if liste[i] >= maxi:\n            maxi = liste[i]\n    return maxi","n_lines":7,"__index_level_0__":76,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        n = len(liste)\n        maxi = liste[0]\n        for i in range(1, n):\n            if liste[i] >= maxi:\n                maxi = liste[i]\n        return maxi"}
{"submission_id":1851,"func_code":"def maximum(liste):\n    res = liste([0])\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste([0])\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":77,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":3725,"func_code":"def maximum(liste):\n    res = liste([1])\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste([1])\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":78,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    res = None\n    if liste:\n        res = max(liste)\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":1979,"func_code":"def maximum(liste):\n    res = ''\n    for i in range(len(liste)):\n        if res < liste[i]:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = ''\n    for i in range(len(liste)):\n        if res < liste[i]:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":79,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n        return res"}
{"submission_id":643,"func_code":"def maximum(liste):\n    max = ''\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = ''\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":80,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in range(0, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":2807,"func_code":"def maximum(liste):\n    res = 'None'\n    for elem in liste:\n        res = res > elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 'None'\n    for elem in liste:\n        res = res > elem\n    return res","n_lines":5,"__index_level_0__":81,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    \n    if len(liste) == 1:\n        return liste[0]\n    \n    if len(liste) > 1:\n        res = max(liste)\n        for e in liste:\n            if e > res:\n                res = e\n        return res"}
{"submission_id":1565,"func_code":"def maximum(liste):\n    res = 'None'\n    for elem in liste:\n        if elem > res:\n            res = res + elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 'None'\n    for elem in liste:\n        if elem > res:\n            res = res + elem\n    return res","n_lines":6,"__index_level_0__":82,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for e in liste:\n            if e > res:\n                res = e\n        return res"}
{"submission_id":5226,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","n_lines":6,"__index_level_0__":83,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    maximum = None\n    for elem in liste:\n        if maximum is None or elem > maximum:\n            maximum = elem\n    return maximum"}
{"submission_id":4204,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + len(liste)[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + len(liste)[i]\n    return res","n_lines":5,"__index_level_0__":84,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    liste.sort()\n    \n    return liste[-1]"}
{"submission_id":4400,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + lenliste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='lenliste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + lenliste[i]\n    return res","n_lines":5,"__index_level_0__":85,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":5246,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n        if res < i:\n            res = i\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n        if res < i:\n            res = i\n        return res","n_lines":7,"__index_level_0__":86,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    \n    return max(liste)"}
{"submission_id":5484,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return None","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return None","n_lines":5,"__index_level_0__":87,"repair":""}
{"submission_id":2936,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return len","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='len', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return len","n_lines":5,"__index_level_0__":88,"repair":""}
{"submission_id":1615,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return liste","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return liste","n_lines":5,"__index_level_0__":89,"repair":""}
{"submission_id":2119,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":90,"repair":""}
{"submission_id":5309,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res < i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res < i\n    return res","n_lines":5,"__index_level_0__":91,"repair":""}
{"submission_id":1640,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = liste[i]\n        if res < i:\n            res = i\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = liste[i]\n        if res < i:\n            res = i\n        return res","n_lines":7,"__index_level_0__":92,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste == []:\n        return None\n\n    if len(liste) == 0:\n        return None\n\n    return max(liste)"}
{"submission_id":2246,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res == res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        res == res + liste[i]\n    return res","n_lines":5,"__index_level_0__":93,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n\n    return None"}
{"submission_id":1410,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if elem > res:\n            res = res + elem\n        else:\n            res = 'None'\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None'))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if elem > res:\n            res = res + elem\n        else:\n            res = 'None'\n    return res","n_lines":8,"__index_level_0__":94,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    else:\n        return None"}
{"submission_id":3601,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if res < elem(liste):\n            res = elem(liste)\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='elem', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='elem', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if res < elem(liste):\n            res = elem(liste)\n        return res","n_lines":6,"__index_level_0__":95,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    elem = lambda liste: max(liste)\n    if liste:\n        res = elem(liste)\n        while liste:\n            if res < elem(liste):\n                res = elem(liste)\n            return res"}
{"submission_id":2969,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if res < i:\n            res = i\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if res < i:\n            res = i\n        return res","n_lines":6,"__index_level_0__":96,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    # implement your code here\n    \n    if liste:\n        \n        return max(liste)\n    else:\n        return None"}
{"submission_id":3661,"func_code":"def maximum(l):\n    res = 0\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    res = 0\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","n_lines":6,"__index_level_0__":97,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if l:\n        res = l[0]\n        for i in l:\n            if res < i:\n                res = i\n        return res"}
{"submission_id":475,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > 0:\n            res = res + liste[i]\n        else:\n            res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > 0:\n            res = res + liste[i]\n        else:\n            res = None\n    return res","n_lines":8,"__index_level_0__":98,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    largest = None\n    for num in liste:\n        if largest is None or num > largest:\n            largest = num\n    return largest"}
{"submission_id":4079,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n        else:\n            res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n        else:\n            res = None\n    return res","n_lines":8,"__index_level_0__":99,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    # your code here\n    if len(liste) == 0:\n        return None\n\n    if len(liste) == 1:\n        return liste[0]\n\n    \n    return max(liste)"}
{"submission_id":4420,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":100,"repair":""}
{"submission_id":4765,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":101,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":2585,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i]:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i]:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":102,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res =  max(liste)\n        return res"}
{"submission_id":4569,"func_code":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='res', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":103,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":4027,"func_code":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n        max = max\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n        max = max\n    return max","n_lines":7,"__index_level_0__":104,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n            max = max\n        return max"}
{"submission_id":5481,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","n_lines":8,"__index_level_0__":105,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        if len(liste) == 0:\n            res = None\n        return res"}
{"submission_id":4830,"func_code":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":106,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in range(0, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":3512,"func_code":"def maximum(liste):\n    max = 0\n    for elem in range(1, len(liste)):\n        if len[liste] > max:\n            max = l[liste]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for elem in range(1, len(liste)):\n        if len[liste] > max:\n            max = l[liste]\n    return max","n_lines":6,"__index_level_0__":107,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l = liste\n    if len(l)==0:\n        return None\n    else:\n        if len(l)==1:\n            return l[0]\n        else:\n            max = l[0]\n            for e in l[1:]:\n                if e>max:\n                    max = e\n            return max"}
{"submission_id":1759,"func_code":"def maximum(liste):\n    res = 0\n    for i in range(1, len(liste)):\n        if list[i] > res:\n            res = list[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in range(1, len(liste)):\n        if list[i] > res:\n            res = list[i]\n    return res","n_lines":6,"__index_level_0__":108,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    elif len(liste)==1:\n        return liste[0]\n    else:\n        res = liste[0]\n        for i in range(1,len(liste)):\n            if liste[i]>res:\n                res = liste[i]\n        return res"}
{"submission_id":1178,"func_code":"def maximum(liste):\n    maxi = 0\n    for i in range(1, len(liste)):\n        if list[i] > res:\n            res = list[i]\n        return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxi = 0\n    for i in range(1, len(liste)):\n        if list[i] > res:\n            res = list[i]\n        return maxi","n_lines":6,"__index_level_0__":109,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":3553,"func_code":"def maximum(liste):\n    max = 0\n    for elem in range(1, len(liste)):\n        if liste[elem] > max:\n            max = liste[elem]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for elem in range(1, len(liste)):\n        if liste[elem] > max:\n            max = liste[elem]\n    return max","n_lines":6,"__index_level_0__":110,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for elem in range(1, len(liste)):\n            if liste[elem] > max:\n                max = liste[elem]\n        return max"}
{"submission_id":2626,"func_code":"def maximum(liste):\n    maxi = 0\n    for v in range(liste):\n        if v > maxi:\n            maxi = v\n        return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxi = 0\n    for v in range(liste):\n        if v > maxi:\n            maxi = v\n        return maxi","n_lines":6,"__index_level_0__":111,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":598,"func_code":"def maximum(liste):\n    res = 0\n    for i in liste:\n        res = res + i\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for i in liste:\n        res = res + i\n        if res < i:\n            res = i\n    return res","n_lines":7,"__index_level_0__":112,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in liste:\n            if res < i:\n                res = i\n        return res"}
{"submission_id":3434,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        res = res > elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        res = res > elem\n    return res","n_lines":5,"__index_level_0__":113,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    \n    return max(liste)"}
{"submission_id":102,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if liste > elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if liste > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":114,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":1297,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":115,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    return None"}
{"submission_id":5298,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem(liste):\n            res = elem(liste)\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem(liste):\n            res = elem(liste)\n        return res","n_lines":6,"__index_level_0__":116,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    elem=lambda l: max(l)\n    if liste:\n        res = elem(liste)\n        while liste:\n            if res < elem(liste):\n                res = elem(liste)\n            return res"}
{"submission_id":5475,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n        return res","n_lines":6,"__index_level_0__":117,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    res=None\n    for elem in liste:\n        if res is None:\n            res = elem\n        elif elem > res:\n            res = elem\n    return res"}
{"submission_id":4014,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":118,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":951,"func_code":"def maximum(liste):\n    res = 0\n    for elen in liste:\n        if elen > 0:\n            res = elen\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elen in liste:\n        if elen > 0:\n            res = elen\n    return res","n_lines":6,"__index_level_0__":119,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    largest = None\n    \n    for number in liste:\n        if largest is None or number > largest:\n            largest = number\n    \n    return largest"}
{"submission_id":3606,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = res + elem\n        else:\n            res = 'None'\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None'))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = res + elem\n        else:\n            res = 'None'\n    return res","n_lines":8,"__index_level_0__":120,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    # Your code goes here\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":4696,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    for elem in liste:\n        if elem < 0:\n            res = 0\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    for elem in liste:\n        if elem < 0:\n            res = 0\n    return res","n_lines":9,"__index_level_0__":122,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":1315,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    for elem in liste:\n        if elem < 0:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    for elem in liste:\n        if elem < 0:\n            res = elem\n    return res","n_lines":9,"__index_level_0__":123,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    if len(liste) == 1:\n        return liste[0]\n    \n    res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res"}
{"submission_id":2144,"func_code":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":124,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":324,"func_code":"def maximum(liste):\n    max = 0\n    for i in max:\n        if i > max:\n            max = i\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    for i in max:\n        if i > max:\n            max = i\n    return max","n_lines":6,"__index_level_0__":125,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    else:\n        return None"}
{"submission_id":4574,"func_code":"def maximum(liste):\n    res = 0\n    for elen in liste[1]:\n        if elen > res:\n            res = elen\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    for elen in liste[1]:\n        if elen > res:\n            res = elen\n    return res","n_lines":6,"__index_level_0__":126,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n\n    return max(liste)"}
{"submission_id":5357,"func_code":"def maximum(liste):\n    res = 0\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","n_lines":9,"__index_level_0__":127,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":4212,"func_code":"def maximum(liste):\n    max = 0\n    if elem > max in liste:\n        max = elem\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    if elem > max in liste:\n        max = elem\n    return max","n_lines":5,"__index_level_0__":128,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    else:\n        max = liste[0]\n        for num in liste:\n            if num > max:\n                max = num\n        return max"}
{"submission_id":3004,"func_code":"def maximum(liste):\n    max = 0\n    if i > max in liste:\n        max = elem\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = 0\n    if i > max in liste:\n        max = elem\n    return max","n_lines":5,"__index_level_0__":129,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    return max(liste)"}
{"submission_id":208,"func_code":"def maximum(liste):\n    res = 0\n    if i in range(len(liste)):\n        res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    if i in range(len(liste)):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":130,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n\n    return max(liste)"}
{"submission_id":3673,"func_code":"def maximum(liste):\n    res = 0\n    if maximum in range(len(liste)):\n        res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='maximum', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    if maximum in range(len(liste)):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":131,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":4398,"func_code":"def maximum(liste):\n    res = 0\n    if liste in range(len(liste)):\n        res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 0\n    if liste in range(len(liste)):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":132,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    return max(liste)"}
{"submission_id":3947,"func_code":"def maximum(liste):\n    res = 12\n    for i in liste:\n        if liste < res:\n            res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 12\n    for i in liste:\n        if liste < res:\n            res = max\n    return res","n_lines":6,"__index_level_0__":133,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)"}
{"submission_id":436,"func_code":"def maximum(liste):\n    res = 12\n    for i in liste:\n        if res < liste:\n            res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 12\n    for i in liste:\n        if res < liste:\n            res = max\n    return res","n_lines":6,"__index_level_0__":134,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    largest = None\n    \n    for number in liste:\n        if largest is None or number > largest:\n            largest = number\n    return largest"}
{"submission_id":3997,"func_code":"def maximum(liste):\n    res = 25\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return 25","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=25)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=25))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = 25\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return 25","n_lines":5,"__index_level_0__":135,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    \n    return max(liste)"}
{"submission_id":3336,"func_code":"def maximum(l):\n    res = None\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    res = None\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","n_lines":6,"__index_level_0__":136,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(l) == 0:\n        return None\n    else:\n        res = l[0]\n        for i in l:\n            if res < i:\n                res = i\n        return res"}
{"submission_id":3593,"func_code":"def maximum(l):\n    res = None\n    for i in range(1, len(l)):\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    res = None\n    for i in range(1, len(l)):\n        if res < i:\n            res = i\n    return res","n_lines":6,"__index_level_0__":137,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(l)==0:\n        return None\n    \n    return max(l)"}
{"submission_id":2173,"func_code":"def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res","n_lines":6,"__index_level_0__":138,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":3332,"func_code":"def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res[-1]","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res[-1]","n_lines":6,"__index_level_0__":139,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste == []:\n        return None\n    else:\n        if len(liste) > 0:\n            liste.sort()\n            res = liste\n        return res[-1]"}
{"submission_id":5346,"func_code":"def maximum(liste):\n    res = []\n    for x in liste:\n        if x > res:\n            res = x\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = []\n    for x in liste:\n        if x > res:\n            res = x\n    return res","n_lines":6,"__index_level_0__":140,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for x in liste:\n            if x > res:\n                res = x\n        return res"}
{"submission_id":2956,"func_code":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        res = res < i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        res = res < i\n    return res","n_lines":5,"__index_level_0__":141,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    \n    return max(liste)"}
{"submission_id":2810,"func_code":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        res = i < res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        res = i < res\n    return res","n_lines":5,"__index_level_0__":142,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for num in liste:\n            if num > res:\n                res = num\n        return res"}
{"submission_id":341,"func_code":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        if liste[i]:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = max\n    for i in range(len(liste)):\n        if liste[i]:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":143,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = max(liste)\n        return res"}
{"submission_id":4047,"func_code":"def maximum(liste):\n    max = o\n    if elem > max in liste:\n        max = elem\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='o', ctx=Load())), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = o\n    if elem > max in liste:\n        max = elem\n    return max","n_lines":5,"__index_level_0__":144,"repair":""}
{"submission_id":976,"func_code":"def maximum(liste):\n    res = liste\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":145,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    \n    return None"}
{"submission_id":2589,"func_code":"def maximum(liste):\n    res = l[0]\n    for i in range(len(liste)):\n        if l[i] > res:\n            res = l[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = l[0]\n    for i in range(len(liste)):\n        if l[i] > res:\n            res = l[i]\n    return res","n_lines":6,"__index_level_0__":146,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    if len(liste) == 1:\n        return liste[0]\n    \n    \n    \n    \n    return max(liste)"}
{"submission_id":720,"func_code":"def maximum(liste):\n    max = l[0]\n    for i in range(0, len(liste)):\n        if max < i:\n            max = i\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = l[0]\n    for i in range(0, len(liste)):\n        if max < i:\n            max = i\n    return max","n_lines":6,"__index_level_0__":147,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in liste:\n            if max < i:\n                max = i\n        return max"}
{"submission_id":4635,"func_code":"def maximum(liste):\n    max = l[0]\n    for i in range(0, len(liste)):\n        if max < l[0]:\n            max = l[0]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = l[0]\n    for i in range(0, len(liste)):\n        if max < l[0]:\n            max = l[0]\n    return max","n_lines":6,"__index_level_0__":148,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":2860,"func_code":"def maximum(liste):\n    res = l[0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = l[0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":149,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste = sorted(liste)\n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":4626,"func_code":"def maximum(liste):\n    max = l[0]\n    for x in liste:\n        if x > max:\n            max = x\n        return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = l[0]\n    for x in liste:\n        if x > max:\n            max = x\n        return max","n_lines":6,"__index_level_0__":150,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n\n    return None"}
{"submission_id":3165,"func_code":"def maximum(liste):\n    max = l[1]\n    for x in liste:\n        if x > max:\n            max = x\n        return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = l[1]\n    for x in liste:\n        if x > max:\n            max = x\n        return max","n_lines":6,"__index_level_0__":151,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        return max(liste)"}
{"submission_id":4598,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in len(liste):\n        if max < liste(i):\n            max = liste(i)\n        elif max > liste(i):\n            max = max\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in len(liste):\n        if max < liste(i):\n            max = liste(i)\n        elif max > liste(i):\n            max = max\n    return max","n_lines":8,"__index_level_0__":152,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    liste.sort()\n    \n    if len(liste)==0:\n        return None\n    elif len(liste)==1:\n        return liste[0]\n    \n    return max(liste)"}
{"submission_id":2252,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in len(liste):\n        if res < liste[i]:\n            max = liste[i]\n        return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in len(liste):\n        if res < liste[i]:\n            max = liste[i]\n        return max","n_lines":6,"__index_level_0__":153,"repair":""}
{"submission_id":3094,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in list(range(4)):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=4)], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in list(range(4)):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","n_lines":9,"__index_level_0__":154,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    elif len(liste) == 1:\n        return liste[0]\n    else:\n        res = liste[0]\n        for n in liste:\n            if n > res:\n                res = n\n        return res"}
{"submission_id":748,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in list(range(i)):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in list(range(i)):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","n_lines":9,"__index_level_0__":155,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    maximum = liste[0]\n    for element in liste:\n        if element > maximum:\n            maximum = element\n    return maximum"}
{"submission_id":3366,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in list(range):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Name(id='range', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in list(range):\n        if res < list(i):\n            res = list(i)\n    else:\n        if lis(i) < res:\n            res = res\n    return res","n_lines":9,"__index_level_0__":156,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = max(liste)\n        for e in liste:\n            if e > res:\n                res = res\n        return res"}
{"submission_id":3129,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        res = res < i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        res = res < i\n    return res","n_lines":5,"__index_level_0__":157,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    \n    if liste:\n        res = liste[0]\n        for n in liste[1:]:\n            if n > res:\n                res = n\n        return res"}
{"submission_id":4192,"func_code":"def maximum(l):\n    res = l[0]\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    res = l[0]\n    for i in range(len(l)):\n        if res < i:\n            res = i\n    return res","n_lines":6,"__index_level_0__":158,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    l = sorted(l)\n    if l:\n        res = l[0]\n        for i in l:\n            if res < i:\n                res = i\n        return res"}
{"submission_id":4941,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if i >= res:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if i >= res:\n            res = i\n    return res","n_lines":6,"__index_level_0__":159,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":5077,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":160,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = res + liste[i]\n        return res"}
{"submission_id":572,"func_code":"def maximum(liste):\n    maxi = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > maxi:\n            maxi = elem\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxi = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > maxi:\n            maxi = elem\n    return maxi","n_lines":6,"__index_level_0__":161,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n\n    \n    else:\n        maxi = liste[0]\n        for i in range(1, len(liste)):\n            elem = liste[i]\n            if liste[i] > maxi:\n                maxi = elem\n        return maxi"}
{"submission_id":1577,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":162,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":2918,"func_code":"def maximum(liste):\n    maxVal = liste[0]\n    for i in range(0, len(liste) + 1):\n        if liste[i] > maxVal:\n            maxVal = liste[i]\n    return maxVal","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxVal = liste[0]\n    for i in range(0, len(liste) + 1):\n        if liste[i] > maxVal:\n            maxVal = liste[i]\n    return maxVal","n_lines":6,"__index_level_0__":163,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        maxVal = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > maxVal:\n                maxVal = liste[i]\n        return maxVal"}
{"submission_id":4793,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = l[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = l[i]\n    return max","n_lines":6,"__index_level_0__":164,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste==[]:\n        return None\n    \n    return max(liste)"}
{"submission_id":3425,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","n_lines":8,"__index_level_0__":165,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(len(liste)-1):\n            if liste[i] > liste[i+1]:\n                res = liste[i]\n        if len(liste) == 0:\n            res = None\n        return res"}
{"submission_id":3539,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":166,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":5436,"func_code":"def maximum(l):\n    max = l[0]\n    for i in range(0, len(l)):\n        if l[i] > res:\n            res = l[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    max = l[0]\n    for i in range(0, len(l)):\n        if l[i] > res:\n            res = l[i]\n    return res","n_lines":6,"__index_level_0__":167,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if l:\n        res = l[0]\n        for i in range(len(l)):\n            if l[i] > res:\n                res = l[i]\n        return res"}
{"submission_id":708,"func_code":"def maximum(l):\n    res = l[0]\n    for i in range(1, len(l)):\n        if i == None:\n            res = None\n        elif res < i:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    res = l[0]\n    for i in range(1, len(l)):\n        if i == None:\n            res = None\n        elif res < i:\n            res = i\n    return res","n_lines":8,"__index_level_0__":168,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if l:\n        res = l[0]\n        for e in l:\n            if e > res:\n                res = e\n        return res"}
{"submission_id":723,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(1, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(1, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","n_lines":8,"__index_level_0__":169,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) > 0:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        if len(liste) == 0:\n            res = None\n        return res"}
{"submission_id":1432,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":170,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":4434,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(list):\n        if res < i:\n            return i\n    else:\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(list):\n        if res < i:\n            return i\n    else:\n        return res","n_lines":7,"__index_level_0__":171,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max_elem = max(liste)\n        return max_elem\n    else:\n        return None"}
{"submission_id":1961,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(liste):\n        if res < i:\n            return i\n    else:\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(liste):\n        if res < i:\n            return i\n    else:\n        return res","n_lines":7,"__index_level_0__":172,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste = list(liste)\n    if len(liste) == 0:\n        return None\n    else:\n        res = max(liste)\n        for e in liste:\n            return res"}
{"submission_id":116,"func_code":"def maximum(liste):\n    maxi = liste[0]\n    for i in range(liste):\n        if liste[i] > maxi:\n            maxi = elem\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxi = liste[0]\n    for i in range(liste):\n        if liste[i] > maxi:\n            maxi = elem\n    return maxi","n_lines":6,"__index_level_0__":173,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        maxi = liste[0]\n        for elem in liste:\n            if elem > maxi:\n                maxi = elem\n        return maxi"}
{"submission_id":2113,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(liste):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(liste):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":174,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    \n    return None"}
{"submission_id":727,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range(i):\n        if res < i:\n            return i\n    else:\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range(i):\n        if res < i:\n            return i\n    else:\n        return res","n_lines":7,"__index_level_0__":175,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for e in liste:\n            if e > res:\n                res = e\n        else:\n            return res"}
{"submission_id":3188,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in range:\n        if res < i:\n            return i\n    else:\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='range', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in range:\n        if res < i:\n            return i\n    else:\n        return res","n_lines":7,"__index_level_0__":176,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        for i in liste:\n            if res < i:\n                return i\n        else:\n            return res"}
{"submission_id":149,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res = max\n        if res < liste:\n            res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res = max\n        if res < liste:\n            res = max\n    return res","n_lines":7,"__index_level_0__":177,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = max(liste)\n        return res"}
{"submission_id":5668,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res = max\n        if res < i:\n            res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res = max\n        if res < i:\n            res = max\n    return res","n_lines":7,"__index_level_0__":178,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in liste[1:]:\n            if i > res:\n                res = i\n        return res"}
{"submission_id":3670,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res < liste[i]\n        res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        res < liste[i]\n        res = liste[i]\n    return res","n_lines":6,"__index_level_0__":179,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":1012,"func_code":"def maximum(liste):\n    res = liste[0]\n    for c in liste:\n        if i >= res:\n            res = c\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for c in liste:\n        if i >= res:\n            res = c\n    return res","n_lines":6,"__index_level_0__":180,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for c in liste:\n            if c > res:\n                res = c\n        return res"}
{"submission_id":2568,"func_code":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":181,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    else:\n        res=None\n        for elem in liste:\n            if res==None or elem > res:\n                res = elem\n        return res"}
{"submission_id":4969,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in liste:\n        if max < liste(i):\n            max = liste(i)\n        elif max > liste(i):\n            max = max\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in liste:\n        if max < liste(i):\n            max = liste(i)\n        elif max > liste(i):\n            max = max\n    return max","n_lines":8,"__index_level_0__":182,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":82,"func_code":"def maximum(liste):\n    max = liste[0]\n    for i in liste:\n        if max < liste(i):\n            max = liste(i)\n    else:\n        if max > liste(i):\n            max = max\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[0]\n    for i in liste:\n        if max < liste(i):\n            max = liste(i)\n    else:\n        if max > liste(i):\n            max = max\n    return max","n_lines":9,"__index_level_0__":183,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)\n    else:\n        return None"}
{"submission_id":868,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < liste:\n            res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < liste:\n            res = max\n    return res","n_lines":6,"__index_level_0__":184,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        return res"}
{"submission_id":256,"func_code":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":185,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":5245,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < i:\n            return i\n    else:\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < i:\n            return i\n    else:\n        return res","n_lines":7,"__index_level_0__":186,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        for i in liste:\n            if res < i:\n                return i\n        else:\n            return res"}
{"submission_id":1649,"func_code":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < liste[i]:\n            res = liste[i]\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for i in liste:\n        if res < liste[i]:\n            res = liste[i]\n        return res","n_lines":6,"__index_level_0__":187,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste == []:\n        return None\n    \n    return max(liste)"}
{"submission_id":1303,"func_code":"def maximum(l):\n    max = l[0]\n    for x in l:\n        if x > max:\n            max = x\n        return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    max = l[0]\n    for x in l:\n        if x > max:\n            max = x\n        return max","n_lines":6,"__index_level_0__":188,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not l:\n        return None\n\n    max = l[0]\n    for x in l:\n        if x > max:\n            max = x\n    return max"}
{"submission_id":1706,"func_code":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":189,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":3354,"func_code":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem","n_lines":5,"__index_level_0__":190,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":1767,"func_code":"def maximum(liste):\n    maxi = liste[0]\n    for i in liste:\n        if i >= maxi:\n            maxi = i\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maxi = liste[0]\n    for i in liste:\n        if i >= maxi:\n            maxi = i\n    return maxi","n_lines":6,"__index_level_0__":191,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    maxi = 0\n    for maxi in liste:\n        for i in liste:\n            if i >= maxi:\n                maxi = i\n        return maxi"}
{"submission_id":634,"func_code":"def maximum(liste):\n    res = liste[0]\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if res < liste[0]:\n                res = liste[0]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if res < liste[0]:\n                res = liste[0]\n    return res","n_lines":9,"__index_level_0__":192,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)"}
{"submission_id":2746,"func_code":"def maximum(liste):\n    res = liste[0]\n    if res < liste:\n        liste = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    if res < liste:\n        liste = max\n    return res","n_lines":5,"__index_level_0__":193,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return max(liste)"}
{"submission_id":5631,"func_code":"def maximum(liste):\n    res = liste[0]\n    if res < liste:\n        res = max\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    if res < liste:\n        res = max\n    return res","n_lines":5,"__index_level_0__":194,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for e in liste:\n            if e>res:\n                res = e\n        return res"}
{"submission_id":1848,"func_code":"def maximum(liste):\n    res = liste[0]\n    if res < liste[i]:\n        res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[0]\n    if res < liste[i]:\n        res = liste[i]\n    return res","n_lines":5,"__index_level_0__":195,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    liste.sort()\n    \n    return liste[-1]"}
{"submission_id":823,"func_code":"def maximum(liste):\n    max = liste[1]\n    for i in len(liste):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[1]\n    for i in len(liste):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":196,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":1475,"func_code":"def maximum(liste):\n    res = liste[1]\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[1]\n    for i in range(0, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    if len(liste) == 0:\n        res = None\n    return res","n_lines":8,"__index_level_0__":197,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        if len(liste) == 0:\n            res = None\n        return res"}
{"submission_id":5495,"func_code":"def maximum(liste):\n    max = liste[1]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = liste[1]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":198,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":2167,"func_code":"def maximum(liste):\n    res = liste[1]\n    for x in liste:\n        if x > res:\n            res = x\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste[1]\n    for x in liste:\n        if x > res:\n            res = x\n    return res","n_lines":6,"__index_level_0__":199,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for x in liste:\n            if x > res:\n                res = x\n        return res"}
{"submission_id":1507,"func_code":"def maximum(liste):\n    res = liste, [0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = liste, [0]\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":200,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":1755,"func_code":"def maximum(liste):\n    res = -100\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=100))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = -100\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":201,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":1296,"func_code":"def maximum(liste):\n    res = -12\n    for elem in liste:\n        if res < elem:\n            res = elem\n        if elem in liste == 0:\n            res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=12))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In(), Eq()], comparators=[Name(id='x_0', ctx=Load()), Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = -12\n    for elem in liste:\n        if res < elem:\n            res = elem\n        if elem in liste == 0:\n            res = None\n    return res","n_lines":8,"__index_level_0__":202,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n            if elem in liste == 0:\n                res = None\n        return res"}
{"submission_id":958,"func_code":"def maximum(liste):\n    res = -12\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=12))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = -12\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":203,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if res < elem:\n                res = elem\n        return res"}
{"submission_id":867,"func_code":"def maximum(liste):\n    res = -50\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n        if liste[0]:\n            res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=50))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = -50\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n        if liste[0]:\n            res = None\n    return res","n_lines":8,"__index_level_0__":204,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        res = -50\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    \n        if res == -50:\n                res = None\n        return res"}
{"submission_id":2480,"func_code":"def maximum(liste):\n    res = -50\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=50))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    res = -50\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":205,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":1085,"func_code":"def maximum(liste):\n    max = -999\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=999))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    max = -999\n    for i in range(0, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":6,"__index_level_0__":206,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return max(liste)"}
{"submission_id":2428,"func_code":"def maximum(liste):\n    for i in liste:\n        res = liste([0])\n    if res < i in liste:\n        res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    for i in liste:\n        res = liste([0])\n    if res < i in liste:\n        res = liste[i]\n    return res","n_lines":6,"__index_level_0__":207,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        for i in liste:\n    \n            if i==max(liste):\n                return i"}
{"submission_id":4840,"func_code":"def maximum(liste):\n    for i in liste:\n        res = liste[0]\n    if res < i in liste:\n        res = liste(i)\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    for i in liste:\n        res = liste[0]\n    if res < i in liste:\n        res = liste(i)\n    return res","n_lines":6,"__index_level_0__":208,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        for i in liste:\n            res = liste[0]\n    \n            for i in liste:\n                if i>res:\n                    res = i\n            return res"}
{"submission_id":5453,"func_code":"def maximum(liste):\n    for i in liste:\n        res = liste[0]\n    if res < i in liste:\n        res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    for i in liste:\n        res = liste[0]\n    if res < i in liste:\n        res = liste[i]\n    return res","n_lines":6,"__index_level_0__":209,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        for i in liste:\n            res = liste[0]\n    \n            for i in liste:\n                if i > res:\n                    res = i\n            \n            return res"}
{"submission_id":1344,"func_code":"def maximum(liste):\n    for x in liste:\n        if x > res:\n            res = x\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    for x in liste:\n        if x > res:\n            res = x\n    return res","n_lines":5,"__index_level_0__":210,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        return max(liste)"}
{"submission_id":5491,"func_code":"def maximum(liste):\n    if x >= y and x >= z:\n        maxi = x\n    if y >= x and y >= z:\n        maxi = y\n    if z >= x and z >= y:\n        maxi = z\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Name(id='y', ctx=Load())]), Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Name(id='z', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Name(id='x', ctx=Load())]), Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Name(id='z', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='y', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='z', ctx=Load()), ops=[GtE()], comparators=[Name(id='x', ctx=Load())]), Compare(left=Name(id='z', ctx=Load()), ops=[GtE()], comparators=[Name(id='y', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='z', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if x >= y and x >= z:\n        maxi = x\n    if y >= x and y >= z:\n        maxi = y\n    if z >= x and z >= y:\n        maxi = z\n    return maxi","n_lines":8,"__index_level_0__":211,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    maxi = None\n    for x in liste:\n        y = x\n        z = x\n        for z in liste:\n            y = max(y, z)\n            maxi = y\n        if z >= x and z >= y:\n            maxi = z\n        return maxi"}
{"submission_id":4280,"func_code":"def maximum(liste):\n    if len(liste == 0):\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste == 0):\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","n_lines":8,"__index_level_0__":212,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = max(res,elem)\n        return res"}
{"submission_id":5087,"func_code":"def maximum(liste):\n    if len(liste):\n        res = None\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste):\n        res = None\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return res","n_lines":9,"__index_level_0__":213,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste = list(liste)\n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for ele in liste:\n            if ele > res:\n                res = ele\n        return res"}
{"submission_id":1902,"func_code":"def maximum(liste):\n    if len(liste):\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste):\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return res","n_lines":9,"__index_level_0__":214,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste = [int(i) for i in liste]\n    if liste:\n        res = liste[0]\n        for n in liste[1:]:\n            if n > res:\n                res = n\n        return res"}
{"submission_id":3173,"func_code":"def maximum(liste):\n    if len(liste):\n        res = none\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return()], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste):\n        res = none\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            res = len(liste) > res\n            res = len(liste)\n    return","n_lines":9,"__index_level_0__":215,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            res = max(res, liste[i])\n        return res"}
{"submission_id":888,"func_code":"def maximum(liste):\n    if len(list) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i + 1] > liste[i]:\n            res = liste[i + 1]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(list) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i + 1] > liste[i]:\n            res = liste[i + 1]\n    return res","n_lines":8,"__index_level_0__":216,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = max(liste)\n        return res"}
{"submission_id":1040,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","n_lines":8,"__index_level_0__":217,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste[1:]:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":688,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = liste\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = liste\n    return res","n_lines":8,"__index_level_0__":218,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = max(res, elem)\n        return res"}
{"submission_id":3857,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = elem\n    return res","n_lines":8,"__index_level_0__":219,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste.sort()\n    if len(liste) == 0:\n        return None\n    else:\n        if len(liste)==1:\n            res = liste[0]\n        for elem in liste:\n            res = elem\n        return res"}
{"submission_id":3281,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res > liste\n        res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_0', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res > liste\n        res = elem\n    return res","n_lines":9,"__index_level_0__":220,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n        res = liste[0]\n        for e in liste[1:]:\n            if e > res:\n                res = e\n        return res"}
{"submission_id":2643,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res < liste\n        res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n    for elem in liste:\n        res < liste\n        res = elem\n    return res","n_lines":9,"__index_level_0__":221,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = max(res, elem)\n        return res"}
{"submission_id":3313,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":224,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            res = liste[0]\n            for i in range(len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":706,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":225,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":680,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for elem in liste:\n            if res < elem:\n                res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        for elem in liste:\n            if res < elem:\n                res = elem\n    return res","n_lines":9,"__index_level_0__":226,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        for res in liste:\n            for elem in liste:\n                if res < elem:\n                    res = elem\n        return res"}
{"submission_id":117,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":227,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = None\n    \n        for i in range(len(liste)):\n            if res is None or liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":5653,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":228,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            for i in range(len(liste)):\n                if res < liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":369,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i] > res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i] > res\n    return res","n_lines":9,"__index_level_0__":229,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":5001,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = res\n    return res","n_lines":9,"__index_level_0__":230,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = None\n    \n        for e in liste:\n            if res == None or e > res:\n                res = e\n        return res"}
{"submission_id":4580,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = None\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":231,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = liste[0]\n            for i in range(len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":933,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            res = liste[i] > res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            res = liste[i] > res\n    return res","n_lines":8,"__index_level_0__":232,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res=liste[0]\n            for i in range(1, len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":413,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if len(liste) + 1 > len(liste):\n                res = len(liste + 1)\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if len(liste) + 1 > len(liste):\n                res = len(liste + 1)\n    return res","n_lines":9,"__index_level_0__":233,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    liste = liste or []\n    if len(liste) == 0:\n        return None\n    if len(liste) == 1:\n        return liste[0]\n    else:\n        if len(liste) > 1:\n            res = max(liste)\n        else:\n            res = []\n            for i in range(len(liste)):\n                if len(liste) + 1 > len(liste):\n                    res = len(liste + 1)\n        return res"}
{"submission_id":965,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i] + 1 > liste[i]:\n                res = liste[i] + 1\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i] + 1 > liste[i]:\n                res = liste[i] + 1\n    return res","n_lines":9,"__index_level_0__":234,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not liste:\n        return None\n    \n    return max(liste)"}
{"submission_id":375,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if len(liste + 1) > len(liste):\n                res = len(liste + 1)\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if len(liste + 1) > len(liste):\n                res = len(liste + 1)\n    return res","n_lines":9,"__index_level_0__":235,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":2858,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":236,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            res = liste[0]\n            for i in range(len(liste)):\n                if res < liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":4365,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[1 + i] > liste[i]:\n                res = liste[1 + i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[1 + i] > liste[i]:\n                res = liste[1 + i]\n    return res","n_lines":9,"__index_level_0__":237,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = max(liste)\n        return res"}
{"submission_id":1443,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i + 1] > liste[i]:\n                res = liste[i + 1]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i + 1] > liste[i]:\n                res = liste[i + 1]\n    return res","n_lines":9,"__index_level_0__":238,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = []\n    \n        for i in range(len(liste) - 1):\n            if liste[i] > liste[i + 1]:\n                res = liste[i]\n                if liste[i + 1] > liste[i]:\n                    res = liste[i + 1]\n        return res"}
{"submission_id":1515,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = []\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":239,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":4061,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = range[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = range[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":240,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":4447,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(le(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return None","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(le(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return None","n_lines":9,"__index_level_0__":241,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":928,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(1, liste)):\n            if liste[i] > res:\n                res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(1, liste)):\n            if liste[i] > res:\n                res = i\n    return res","n_lines":9,"__index_level_0__":242,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in liste:\n            if i > res:\n                res = i\n        return res"}
{"submission_id":209,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return None","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return None","n_lines":9,"__index_level_0__":243,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":5118,"func_code":"def maximum(l):\n    if len(l) == 0:\n        res = None\n    else:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 0:\n        res = None\n    else:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    return res","n_lines":9,"__index_level_0__":244,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if l == []:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        res = l[0]\n        for i in range(1, len(l)):\n            if l[i] > res:\n                res = l[i]\n        return res"}
{"submission_id":3872,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i > res:\n                res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i > res:\n                res = i\n    return res","n_lines":9,"__index_level_0__":245,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in liste:\n            if i > res:\n                    res = i\n        return res"}
{"submission_id":2019,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = i\n    return res","n_lines":9,"__index_level_0__":246,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":2121,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[1]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[1]\n    return res","n_lines":9,"__index_level_0__":247,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":1511,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='max', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return max","n_lines":9,"__index_level_0__":248,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n            for i in range(1, len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n    \n        return res"}
{"submission_id":2426,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n    return res","n_lines":9,"__index_level_0__":249,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            max = None\n        else:\n            max = liste[0]\n    \n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":5311,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                res = liste[i]","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                res = liste[i]","n_lines":8,"__index_level_0__":250,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    res = liste[0]\n    for i in range(1, len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    \n    return res"}
{"submission_id":695,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(liste):\n            if liste[i] > max:\n                max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        max = None\n    else:\n        max = liste[0]\n        for i in range(liste):\n            if liste[i] > max:\n                max = liste[i]\n    return max","n_lines":9,"__index_level_0__":251,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            max = None\n        else:\n            max = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i] > max:\n                    max = liste[i]\n        return max"}
{"submission_id":3506,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if res > liste[0]:\n                res = liste[0]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if res > liste[0]:\n                res = liste[0]\n    return res","n_lines":9,"__index_level_0__":252,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in liste:\n            if i > res:\n                res = i\n        return res"}
{"submission_id":268,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if res < liste[0]:\n                res = liste[0]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if res < liste[0]:\n                res = liste[0]\n    return res","n_lines":9,"__index_level_0__":253,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for e in liste:\n            if e > res:\n                res = e\n        return res"}
{"submission_id":4744,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if liste[i] > res:\n                res = liste[1]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if liste[i] > res:\n                res = liste[1]\n    return res","n_lines":9,"__index_level_0__":254,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n            for i in liste:\n    \n                if i > res:\n                    res = i\n        return res"}
{"submission_id":1265,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste:\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":255,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":4374,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n    for i in range(len(liste)):\n        if i >= res:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n    for i in range(len(liste)):\n        if i >= res:\n            res = i\n    return res","n_lines":9,"__index_level_0__":256,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":509,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] >= res:\n            res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] >= res:\n            res = i\n    return res","n_lines":9,"__index_level_0__":257,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":4372,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1, len(liste)\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Tuple(elts=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1, len(liste)\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":258,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        for res in liste:\n            for i in range(len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":16,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        maxi = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > maxi:\n                maxi = liste[i]\n    return maxi","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        maxi = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > maxi:\n                maxi = liste[i]\n    return maxi","n_lines":9,"__index_level_0__":259,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        maxi = liste[0]\n        for i in range(1, len(liste)):\n            for i in range(len(liste)):\n                if liste[i] > maxi:\n                    maxi = liste[i]\n        return maxi"}
{"submission_id":1620,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":260,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        for max in liste:\n            for i in range(1, len(liste)):\n                if liste[i] > max:\n                    res = liste[i]\n        return res"}
{"submission_id":1968,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n    return max","n_lines":9,"__index_level_0__":261,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":1828,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in len(liste):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in len(liste):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":262,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for i in liste:\n            if i > res:\n                res = i\n        return res"}
{"submission_id":1625,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = res < liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = res < liste[i]\n    return res","n_lines":7,"__index_level_0__":263,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            res = max(res, liste[i])\n        return res"}
{"submission_id":834,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":264,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for num in liste:\n            if num > res:\n                res = num\n        return res"}
{"submission_id":1889,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[1]\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[1]\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":265,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res\n\n    else:\n        return None"}
{"submission_id":1879,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[i]\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = range[i]\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":266,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":331,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = liste[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res = liste[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":267,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[0]\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":2799,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res == range[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res == range[0]\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":268,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":4811,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res < liste[i]\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            res < liste[i]\n            res = liste[i]\n    return res","n_lines":8,"__index_level_0__":269,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n        return res"}
{"submission_id":226,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":270,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n        return res"}
{"submission_id":5349,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":271,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":2598,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if i >= res:\n                res = i\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if i >= res:\n                res = i\n    return res","n_lines":8,"__index_level_0__":272,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = liste[0]\n            for e in liste:\n                if e > res:\n                    res = e\n        return res"}
{"submission_id":5021,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":273,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        for res in liste:\n            for i in range(len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":2908,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if liste[i] > i:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(len(liste)):\n            if liste[i] > i:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":274,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res=liste[0]\n            for i in range(1, len(liste)):\n                if liste[i] > res:\n                    res = liste[i]\n            return res"}
{"submission_id":4961,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range([liste]):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[List(elts=[Name(id='x_0', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range([liste]):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":275,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = sorted(liste)[-1]\n        return res"}
{"submission_id":2064,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(liste):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(liste):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":276,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res= max(liste)\n        return res"}
{"submission_id":4908,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(liste):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in range(liste):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":277,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n    \n            return None\n        else:\n            return max(liste)"}
{"submission_id":3054,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":278,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n        res = liste[0]\n        for i in range(len(liste)):\n                if res < liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":556,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for i in liste:\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":8,"__index_level_0__":279,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            liste.reverse()\n            res = max(liste)\n        return res"}
{"submission_id":3936,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    elif i in range(liste):\n        if res < liste[i]:\n            res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    elif i in range(liste):\n        if res < liste[i]:\n            res = liste[i]\n    return res","n_lines":7,"__index_level_0__":280,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(len(liste)-1):\n            if res < liste[i]:\n                res = liste[i]\n        return res"}
{"submission_id":3190,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i] + 1 > liste[i]:\n            res = liste[i] + 1\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i] + 1 > liste[i]:\n            res = liste[i] + 1\n    return res","n_lines":8,"__index_level_0__":281,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":1702,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i + 1] > liste[i]:\n            res = liste[i + 1]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = None\n    res = []\n    for i in range(len(liste)):\n        if liste[i + 1] > liste[i]:\n            res = liste[i + 1]\n    return res","n_lines":8,"__index_level_0__":282,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        for i in range(len(liste)-1):\n            if liste[i] > liste[i+1]:\n                res = liste[i]\n\n        return res"}
{"submission_id":353,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":283,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":3016,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='max', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return max","n_lines":9,"__index_level_0__":284,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        maximum=liste[0]\n        for element in liste:\n            if element>maximum:\n                maximum=element\n        return maximum"}
{"submission_id":2152,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":285,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":402,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem\n    return res","n_lines":8,"__index_level_0__":286,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":2889,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = elem","n_lines":7,"__index_level_0__":287,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = max(res, elem)\n\n    return res"}
{"submission_id":3926,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        res = liste[0]\n    for elem in liste:\n        res = elem\n    return res","n_lines":8,"__index_level_0__":288,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            res = max(res, elem)\n        return res"}
{"submission_id":5551,"func_code":"def maximum(l):\n    if len(l) == 0:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n        return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 0:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n        return res","n_lines":9,"__index_level_0__":289,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if not l:\n        return None\n    \n    if len(l) == 1:\n        return l[0]\n    \n    return max(l)"}
{"submission_id":1336,"func_code":"def maximum(l):\n    if len(l) == 0:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 0:\n        res = l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n    return res","n_lines":9,"__index_level_0__":290,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    res=None\n    for x in l:\n        if res:\n            if x>res:\n                res = x\n        else:\n            res = x\n    return res"}
{"submission_id":4664,"func_code":"def maximum(l):\n    if len(l) == 0:\n        res == l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(l):\n    if len(l) == 0:\n        res == l[0]\n        for i in range(1, len(l)):\n            if res < i:\n                res = i\n    else:\n        res = None\n    return res","n_lines":9,"__index_level_0__":291,"repair":"def maximum(l):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(l)==0:\n        return None\n    else:\n        res = l[0]\n        for num in l[1:]:\n            if num>res:\n                res = num\n        return res"}
{"submission_id":564,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = l[0]\n        for elem in liste:\n            if elem > max:\n                max = elem\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = l[0]\n        for elem in liste:\n            if elem > max:\n                max = elem\n    return max","n_lines":9,"__index_level_0__":292,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for elem in liste:\n            if elem > max:\n                max = elem\n        return max"}
{"submission_id":3102,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n                return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n                return max","n_lines":9,"__index_level_0__":293,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":4756,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n            return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n            return max","n_lines":9,"__index_level_0__":294,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n    \n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":3214,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        return None","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    else:\n        max = liste[0]\n        return None","n_lines":6,"__index_level_0__":295,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        return max(liste)"}
{"submission_id":1678,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    max = [0]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return None\n    max = [0]\n    for i in range(1, len(liste)):\n        if liste[i] > max:\n            max = liste[i]\n    return max","n_lines":8,"__index_level_0__":296,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n        return max"}
{"submission_id":5184,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return none\n        res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='none', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return none\n        res = liste[0]\n    for elem in liste:\n        if elem > res:\n            res = elem\n    return res","n_lines":8,"__index_level_0__":297,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem > res:\n                res = elem\n        return res"}
{"submission_id":4446,"func_code":"def maximum(liste):\n    if len(liste) == 0:\n        return none\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n                return max","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if len(liste) == 0:\n        return none\n    else:\n        max = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > max:\n                max = liste[i]\n                return max","n_lines":9,"__index_level_0__":298,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    elif len(liste)==1:\n        return liste[0]\n    \n    else:\n        max=liste[0]\n        for element in liste:\n            if element>max:\n                max=element\n        return max"}
{"submission_id":4711,"func_code":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":299,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":760,"func_code":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len, liste):\n            if liste[i] > res:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        res = 0\n        for i in range(len, liste):\n            if liste[i] > res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":300,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] > res:\n                    res = liste[i]\n        return res"}
{"submission_id":2174,"func_code":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = res > liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = res > liste[i]\n    return res","n_lines":8,"__index_level_0__":301,"repair":"def maximum(liste):\n        \"\"\"Return the maximum element in a list of numbers.\"\"\"\n        if liste == 0:\n            res = None\n    \n        if liste == []:\n            res = None\n    \n        else:\n            res = max(liste)\n        return res"}
{"submission_id":2723,"func_code":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = res\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == 0:\n        res = None\n    else:\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = res\n    return res","n_lines":8,"__index_level_0__":302,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":1588,"func_code":"def maximum(liste):\n    if liste == []:\n        return None\n    else:\n        res = liste[0]\n        for i in range(0, len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n                return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == []:\n        return None\n    else:\n        res = liste[0]\n        for i in range(0, len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n                return res","n_lines":9,"__index_level_0__":303,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n        return res\n    else:\n        return None"}
{"submission_id":5670,"func_code":"def maximum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":304,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    none = float('inf')\n    for num in liste:\n        if num > none:\n            res = none\n        else:\n            res = liste[0]\n            for i in range(len(liste)):\n                if res < liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":279,"func_code":"def maximum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[1]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[1]\n        for i in range(len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":305,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)-1):\n            if liste[i] > res:\n                res = liste[i]\n        return res"}
{"submission_id":3713,"func_code":"def maximum(liste):\n    if []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=List(elts=[], ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    if []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if res < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":306,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        if len(liste) == 0:\n            return None\n        else:\n            res = liste[0]\n            for i in range(1, len(liste)):\n                if res < liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":2239,"func_code":"def maximum(liste):\n    maximum = liste[0]\n    for maximum in liste:\n        if c >= maximum:\n            maximum = c\n    return maximum","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='c', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maximum = liste[0]\n    for maximum in liste:\n        if c >= maximum:\n            maximum = c\n    return maximum","n_lines":6,"__index_level_0__":307,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        c = max(liste)\n        for maximum in liste:\n            if c >= maximum:\n                maximum = c\n        return maximum"}
{"submission_id":2442,"func_code":"def maximum(liste):\n    maximum = liste[0]\n    for maximum in liste:\n        if c >= maximum:\n            res = c\n    return res","assignment_id":"maximum","func_name":"maximum","description":"Return the maximum element in a list of numbers.","test":"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='c', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def maximum(liste):\n    maximum = liste[0]\n    for maximum in liste:\n        if c >= maximum:\n            res = c\n    return res","n_lines":6,"__index_level_0__":308,"repair":"def maximum(liste):\n    \"\"\"Return the maximum element in a list of numbers.\"\"\"\n    \n    if liste:\n        c = max(liste)\n        for maximum in liste:\n            if c >= maximum:\n                res = c\n        return res"}
{"submission_id":3963,"func_code":"def moyenne(liste):\n    res = 0\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n        if len(liste) == 0:\n            res = None\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n        if len(liste) == 0:\n            res = None\n    return res","n_lines":11,"__index_level_0__":400,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        x, y = 0, 0\n        for elem in liste:\n            y += 1\n            x = x + elem\n            res = x \/ y\n            if len(liste) == 0:\n                res = None\n        return res"}
{"submission_id":3831,"func_code":"def moyenne(liste):\n    res = 0\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n    return res","n_lines":9,"__index_level_0__":401,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        y = 0\n        x = 0\n        for elem in liste:\n            y = y + 1\n            x = x + elem\n            res = x \/ y\n        return res"}
{"submission_id":5028,"func_code":"def moyenne(liste):\n    res = 0\n    nb = 0\n    for nb in liste:\n        res = res + nb\n        nb += 1\n    moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    nb = 0\n    for nb in liste:\n        res = res + nb\n        nb += 1\n    moy = res \/ nb\n    return moy","n_lines":8,"__index_level_0__":402,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    nb = len(liste)\n    moy = 0\n    for e in liste:\n        res = 0\n        for e in liste:\n            res += e \n        moy = res \/ nb\n        return moy"}
{"submission_id":774,"func_code":"def moyenne(liste):\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    y = 0\n    x = 0\n    for elem in liste:\n        y = y + 1\n        x = x + elem\n        res = x \/ y\n    return res","n_lines":8,"__index_level_0__":403,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    liste = list(liste)\n    if len(liste) == 0:\n        return None\n    return sum(liste)\/len(liste)"}
{"submission_id":184,"func_code":"def moyenne(liste):\n    somme = 0\n    nbtermes = 0\n    for elem in liste:\n        somme = somme + elem\n        nbtermes = nbtermes + 1\n    moy = somme \/ nbtermes\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    somme = 0\n    nbtermes = 0\n    for elem in liste:\n        somme = somme + elem\n        nbtermes = nbtermes + 1\n    moy = somme \/ nbtermes\n    return moy","n_lines":8,"__index_level_0__":404,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    somme = 0\n    nbtermes = 0\n    for elem in liste:\n        for elem in liste:\n            somme = somme + elem\n            nbtermes = nbtermes + 1\n        moy = somme \/ nbtermes\n        return moy"}
{"submission_id":4697,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    res = res \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    res = res \/ cpt\n    return res","n_lines":11,"__index_level_0__":405,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    res=0\n    cpt=0\n    for i in liste:\n        if i==0:\n            return 0\n        else:\n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":3205,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","n_lines":11,"__index_level_0__":406,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    res = 0\n    for n in liste:\n        res += n\n    \n    if res==0:\n        return None\n    \n    return res\/len(liste)"}
{"submission_id":4827,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    return res \/ cpt","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        res = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    return res \/ cpt","n_lines":10,"__index_level_0__":407,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    cpt = 0\n    res = 0.0\n    \n    for x in liste:\n        if len(liste) == 0:\n            res = 0\n        else:\n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n        return res \/ cpt"}
{"submission_id":4572,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res \/ cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res \/ cpt\n    return moy","n_lines":11,"__index_level_0__":408,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        res = 0\n        cpt = 0\n    \n        if len(liste) == 0:\n            return None\n        else:\n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n        moy = res \/ cpt\n        return moy"}
{"submission_id":3658,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res \/\/ cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res \/\/ cpt\n    return moy","n_lines":11,"__index_level_0__":409,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    total = 0\n    for e in liste:\n        total += e\n    \n    return total \/ len(liste)"}
{"submission_id":4117,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return my","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='my', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return my","n_lines":11,"__index_level_0__":410,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    moy = 0\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        moy = res \/ cpt\n        return moy"}
{"submission_id":3730,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return res","n_lines":11,"__index_level_0__":411,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste == []:\n        return None\n    else:\n        \n        cpt = 0\n        res = 0.0\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":1060,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return moy","n_lines":11,"__index_level_0__":412,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    elif len(liste) == 1:\n        return liste[0]\n    \n    else:\n        cpt = 0\n        res = 0.0\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        moy = res \/ cpt\n        return moy"}
{"submission_id":19,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = None\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        moy = res * cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = None\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        moy = res * cpt\n    return moy","n_lines":11,"__index_level_0__":413,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        res = 0\n        cpt = 0\n        if len(liste) == 0:\n            moy = None\n        else:\n            for i in liste:\n                res = res + i\n    \n            cpt = cpt + 1\n            res \/= len(liste)\n            moy = res * cpt\n        return moy"}
{"submission_id":5428,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = None\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moy = None\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moy = res * cpt\n    return moy","n_lines":11,"__index_level_0__":414,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        res = 0\n        cpt = 0\n        if len(liste) == 0:\n            moy = None\n        else:\n            for i in liste:\n                res = res + i\n    \n            if cpt == 0:\n                moy = res\/len(liste)\n\n        return moy"}
{"submission_id":3422,"func_code":"def moyenne(liste):\n    somme = 0\n    for i in range(0, len(liste)):\n        somme = somme + liste[i]\n    moy = somme \/ len(liste)\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    somme = 0\n    for i in range(0, len(liste)):\n        somme = somme + liste[i]\n    moy = somme \/ len(liste)\n    return moy","n_lines":6,"__index_level_0__":415,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    somme = 0\n    for x in liste:\n        for i in range(0, len(liste)):\n            somme = somme + liste[i]\n        moy = somme \/ len(liste)\n        return moy"}
{"submission_id":5191,"func_code":"def moyenne(liste):\n    somme = 0\n    for elem in liste:\n        somme = somme + elem\n    moy = somme \/ len(liste)\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    somme = 0\n    for elem in liste:\n        somme = somme + elem\n    moy = somme \/ len(liste)\n    return moy","n_lines":6,"__index_level_0__":416,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    somme = 0\n    for elem in liste:\n        for elem in liste:\n            somme = somme + elem\n        moy = somme \/ len(liste)\n        return moy"}
{"submission_id":3518,"func_code":"def moyenne(liste):\n    res = None\n    if len(liste) > 0:\n        res = mean(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='mean', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = None\n    if len(liste) > 0:\n        res = mean(liste)\n    return res","n_lines":5,"__index_level_0__":417,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        res = None\n        if len(liste) > 0:\n    \n            avg = sum(liste)\/len(liste)\n            res = avg\n        return res"}
{"submission_id":593,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n        return res\n    else:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n        return res\n    else:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","n_lines":10,"__index_level_0__":418,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    elif len(liste) == 1:\n        return liste[0]\n    else:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/ len(liste)\n        return res"}
{"submission_id":5480,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        moy = res \/ cpt\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        moy = res \/ cpt\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    return moy","n_lines":11,"__index_level_0__":419,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    liste.sort()\n    if len(liste) == 0:\n        return None\n    else:\n        cpt = 0\n        res = 0.0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n\n            moy = res \/ cpt\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n        return moy"}
{"submission_id":2385,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        moy = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        moy = res \/ cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        moy = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        moy = res \/ cpt\n    return moy","n_lines":12,"__index_level_0__":420,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste:\n        if liste[0] == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            moy = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n            moy = res \/ cpt\n        return moy"}
{"submission_id":2728,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in len(liste):\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in len(liste):\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","n_lines":11,"__index_level_0__":421,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n    \n            for x in liste:\n                res += x\n                cpt += 1\n            res \/= cpt\n        return res"}
{"submission_id":4865,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":422,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n    \n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n            res = res \/ (cpt)\n        return res"}
{"submission_id":4173,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + i\n            cpt = cpt + 1\n    res = res % cpt\n    return res","n_lines":11,"__index_level_0__":423,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            cpt = 0\n            res = 0.0\n            for i in range(len(liste)):\n                res = res + liste[i]\n                cpt = cpt + 1\n            res = res \/ (len(liste))\n            return res"}
{"submission_id":4521,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + i\n            cpt = cpt + 1\n    moy = res % cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + i\n            cpt = cpt + 1\n    moy = res % cpt\n    return moy","n_lines":11,"__index_level_0__":424,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n    \n        for i in range(0, len(liste)):\n            res += liste[i]\/len(liste)\n        return res"}
{"submission_id":1513,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        x = 0\n        for i in range(len(liste)):\n            res = res + i\n            x = x + 1\n    moy = x % res\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        x = 0\n        for i in range(len(liste)):\n            res = res + i\n            x = x + 1\n    moy = x % res\n    return moy","n_lines":11,"__index_level_0__":425,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            x = 0\n    \n            for e in liste:\n                res += e\n                x += e\n            res \/= len(liste)\n    \n            return res"}
{"submission_id":786,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 2\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 2\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":426,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n    \n            for i in range(len(liste)):\n                res = res + liste[i]\n                cpt = cpt + 1\n    \n            res \/= cpt\n    \n            return res"}
{"submission_id":5650,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":427,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    return sum(liste)\/float(len(liste))"}
{"submission_id":3934,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res \/ cpt\n    return res","n_lines":11,"__index_level_0__":428,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n    \n            res = res \/ (cpt)\n        return res"}
{"submission_id":205,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res \/\/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res \/\/ cpt\n    return res","n_lines":11,"__index_level_0__":429,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n    \n            return res \/ cpt"}
{"submission_id":2538,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":430,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n    \n            return res \/ cpt"}
{"submission_id":2484,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = elem \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = elem \/ cpt\n    return res","n_lines":11,"__index_level_0__":431,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":4632,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        moy = res \/ cpt\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        moy = res \/ cpt\n    return moy","n_lines":11,"__index_level_0__":432,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        if liste[0] == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n            moy = res \/ cpt\n        return moy"}
{"submission_id":3450,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    res = res \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    res = res \/ cpt\n    return res","n_lines":11,"__index_level_0__":433,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":5420,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    res = res % cpt\n    return res","n_lines":11,"__index_level_0__":434,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            cpt = 0\n            res = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 1\n            res = res \/ (cpt)\n        return res"}
{"submission_id":5031,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        x = 0\n        for elem in liste:\n            res = res + elem\n            x = x + 1\n    moy = x % res\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        x = 0\n        for elem in liste:\n            res = res + elem\n            x = x + 1\n    moy = x % res\n    return moy","n_lines":11,"__index_level_0__":435,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            x = 0\n            for elem in liste:\n                res = res + elem\n                x = x + 1\n    \n            return res \/ x"}
{"submission_id":5613,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    return res \/ cpt","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n    return res \/ cpt","n_lines":10,"__index_level_0__":436,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0.0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        return res \/ cpt"}
{"submission_id":3993,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 2\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 2\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":437,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + 2\n    \n            return res\/len(liste)"}
{"submission_id":545,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":438,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + elem\n    \n            return res \/ len(liste)"}
{"submission_id":5280,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = cpt % elem\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_3', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = cpt % elem\n    return res","n_lines":11,"__index_level_0__":439,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + elem\n    \n            res = res \/ len(liste)\n        return res"}
{"submission_id":2077,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = elem \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = elem \/ cpt\n    return res","n_lines":11,"__index_level_0__":440,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        \n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":4409,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = elem % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n            res = elem % cpt\n    return res","n_lines":11,"__index_level_0__":441,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            sum = 0\n            count = 0\n            for elem in liste:\n                sum = sum + elem\n                count = count + 1\n            res = sum \/ count\n        return res"}
{"submission_id":4081,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = cpt % elem\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = cpt % elem\n    return res","n_lines":11,"__index_level_0__":442,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + elem\n    \n            return res \/ len(liste)"}
{"submission_id":651,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem \/ cpt\n    return res","n_lines":11,"__index_level_0__":443,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        cpt = 0\n        res = 0.0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":5689,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem \/\/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem \/\/ cpt\n    return res","n_lines":11,"__index_level_0__":444,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste == []:\n        return None\n    else:\n        cpt = 0\n        res = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res \/= cpt\n        return res"}
{"submission_id":4849,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + elem\n        res = elem % cpt\n    return res","n_lines":11,"__index_level_0__":445,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            cpt = 0\n            for elem in liste:\n                res = res + elem\n                cpt = cpt + elem\n    \n            res = res \/ (len(liste))\n        return res"}
{"submission_id":339,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n        cpt = cpt + 1\n    return res \/ cpt","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n        cpt = cpt + 1\n    return res \/ cpt","n_lines":10,"__index_level_0__":446,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res= 0\n        cpt = 0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        return res \/ cpt"}
{"submission_id":3914,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        moy = 0\n    for i in liste:\n        moy = moy + i\n    moy = moy \/ len(liste)\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        moy = 0\n    for i in liste:\n        moy = moy + i\n    moy = moy \/ len(liste)\n    return moy","n_lines":9,"__index_level_0__":447,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    moy = 0\n    if len(liste) == 0:\n        return None\n    else:\n        for i in liste:\n            moy = moy + i\n        moy = moy \/ len(liste)\n        return moy"}
{"submission_id":2206,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1\n        cpt = 1\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1\n        cpt = 1\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":448,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            cpt = len(liste)\n            if cpt > 1:\n                res = sum(liste) \/ cpt\n            else:\n                res = liste[0]\n                res = res % cpt\n        return res"}
{"submission_id":5218,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1\n        cpt = 1\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 1\n        cpt = 1\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":449,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        cpt = 0\n        res = 0.0\n        for elem in liste:\n            res = res + elem\n            cpt = cpt + 1\n        res = res \/ (cpt)\n        return res"}
{"submission_id":3191,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        cpt = liste[0]\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        cpt = liste[0]\n        for elem in range(len(liste)):\n            res = res + elem\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":450,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = 0\n            for x in liste:\n                res += x\/len(liste)\n        return res"}
{"submission_id":4863,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        moy = ''\n        for elem in liste:\n            res = res + elem\n            nb += 1\n        moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        moy = ''\n        for elem in liste:\n            res = res + elem\n            nb += 1\n        moy = res \/ nb\n    return moy","n_lines":12,"__index_level_0__":451,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste:\n        if liste[0]==0:\n            res = None\n        else:\n            nb = 0\n            res = 0\n            moy = ''\n            for elem in liste:\n                res = res + elem\n                nb += 1\n            moy = res \/ nb\n        return moy"}
{"submission_id":791,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        moy = ''\n        for elem in liste:\n            res = res + elem\n            nb += 1\n    moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        moy = ''\n        for elem in liste:\n            res = res + elem\n            nb += 1\n    moy = res \/ nb\n    return moy","n_lines":12,"__index_level_0__":452,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        nb = 0\n        res = 0\n        moy = ''\n        for elem in liste:\n            res = res + elem\n            nb += 1\n        moy = res \/ nb\n        return moy"}
{"submission_id":4258,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        cpt = 0\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n            cpt = cpt + 1\n            res = res % cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        cpt = 0\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n            cpt = cpt + 1\n            res = res % cpt\n    return res","n_lines":11,"__index_level_0__":453,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            cpt = 0\n            res = 0\n            for i in range(len(liste)):\n                res = res + liste[i]\n                cpt = cpt + 1\n    \n            res = res \/ cpt\n        return res"}
{"submission_id":4701,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        for elem in liste:\n            res = res + elem\n            nb += 1\n        moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        for elem in liste:\n            res = res + elem\n            nb += 1\n        moy = res \/ nb\n    return moy","n_lines":11,"__index_level_0__":454,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        if sum(liste)==0:\n            return None\n        else:\n            nb = 0\n            res = 0\n            for elem in liste:\n                res = res + elem\n                nb += 1\n            moy = res \/ nb\n        return moy"}
{"submission_id":574,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        for elem in liste:\n            res = res + elem\n        moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        nb = 0\n        res = 0\n        for elem in liste:\n            res = res + elem\n        moy = res \/ nb\n    return moy","n_lines":10,"__index_level_0__":455,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    nb = len(liste)\n    if nb==0:\n        return None\n    else:\n        if nb==1:\n            return liste[0]\n        else:\n            res = 0\n            for elem in liste:\n                res = res + elem\n            moy = res \/ nb\n        return moy"}
{"submission_id":1217,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        res = 0\n        nb = 0\n        for nb in liste:\n            res = res + nb\n            nb += 1\n        moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        res = 0\n        nb = 0\n        for nb in liste:\n            res = res + nb\n            nb += 1\n        moy = res \/ nb\n    return moy","n_lines":11,"__index_level_0__":456,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            moy = None\n        else:\n            res = 0\n            nb = 0\n    \n            for num in liste:\n                res += num\n                nb += 1\n            moy = res \/ nb\n        return moy"}
{"submission_id":2552,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","n_lines":9,"__index_level_0__":457,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            s = 0\n            for elem in liste:\n                s += elem\n    \n            res = s \/ len(liste)\n        return res"}
{"submission_id":3935,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        res = 0\n    nb = 0\n    for nb in liste:\n        res = res + nb\n        nb += 1\n    moy = res \/ nb\n    return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        moy = None\n    else:\n        res = 0\n    nb = 0\n    for nb in liste:\n        res = res + nb\n        nb += 1\n    moy = res \/ nb\n    return moy","n_lines":11,"__index_level_0__":458,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            moy = None\n        else:\n            res = 0\n        nb = 0\n    \n        for e in liste:\n            res += e\n            nb += 1\n        if nb == 0: \n            moy = None\n        else:\n            moy = res\/nb\n        return moy"}
{"submission_id":4317,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    return res","n_lines":8,"__index_level_0__":459,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            res = (sum(liste) \/ len(liste))\n        return res"}
{"submission_id":5360,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + liste\n    res = res \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + liste\n    res = res \/ len(liste)\n    return res","n_lines":8,"__index_level_0__":460,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            mean = 0\n            for i in liste:\n                mean += i\n            res = mean \/ len(liste)\n        return res"}
{"submission_id":1188,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + elem\n        res = res \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + elem\n        res = res \/ len(liste)\n    return res","n_lines":8,"__index_level_0__":461,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n    \n        else:\n            res = 0\n            for x in liste:\n                res += x\n            res = res \/ len(liste)\n        return res"}
{"submission_id":5471,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + elem\n    res = res \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = None\n    res = 0\n    for elem in liste:\n        res = res + elem\n    res = res \/ len(liste)\n    return res","n_lines":8,"__index_level_0__":462,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n    \n            return None\n        res = 0\n        for elem in liste:\n            res = res + elem\n        res = res \/ len(liste)\n        return res"}
{"submission_id":4265,"func_code":"def moyenne(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            cpt = cpt + 1\n            x = x + liste[i]\n        res = x \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) == 0:\n        res = none\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            cpt = cpt + 1\n            x = x + liste[i]\n        res = x \/ cpt\n    return res","n_lines":11,"__index_level_0__":463,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) == 0:\n    \n            return None\n        else:\n            x = 0\n            cpt = 0\n            for i in range(len(liste)):\n                cpt = cpt + 1\n                x = x + liste[i]\n            res = x \/ cpt\n        return res"}
{"submission_id":4596,"func_code":"def moyenne(liste):\n    if len(liste) != 0:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    else:\n        res = 0\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) != 0:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    else:\n        res = 0\n    return res","n_lines":9,"__index_level_0__":464,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) != 0:\n            s = 0\n            for elem in liste:\n                s += elem\n    \n            mean = s \/ len(liste)\n            return mean"}
{"submission_id":597,"func_code":"def moyenne(liste):\n    if len(liste) != 0:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    else:\n        res = None\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) != 0:\n        s = 0\n        for elem in liste:\n            s += elem\n        res = s \/\/ len(liste)\n    else:\n        res = None\n    return res","n_lines":9,"__index_level_0__":465,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if len(liste) != 0:\n            s = 0\n            for elem in liste:\n                s += elem\n    \n            res = s\/len(liste)\n        else:\n            res = None\n        return res"}
{"submission_id":4492,"func_code":"def moyenne(liste):\n    if len(liste) != 0:\n        for elem in liste:\n            num += elem\n        res = num \/ len(liste)\n        return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if len(liste) != 0:\n        for elem in liste:\n            num += elem\n        res = num \/ len(liste)\n        return res","n_lines":6,"__index_level_0__":466,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste:\n        num = 0\n        for elem in liste:\n            num += elem\n        res = num \/ len(liste)\n        return res\n    else:\n        return None"}
{"submission_id":3537,"func_code":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in liste:\n            res = res + liste[i]\n            cpt = cpt + 1\n        res = res \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        res = 0\n        cpt = 0\n        for i in liste:\n            res = res + liste[i]\n            cpt = cpt + 1\n        res = res \/ cpt\n    return res","n_lines":11,"__index_level_0__":467,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        cpt = 0\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        res = res \/ cpt\n        return res"}
{"submission_id":295,"func_code":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        res = 0\n        for elem in liste:\n            res += elem\n        res = len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        res = 0\n        for elem in liste:\n            res += elem\n        res = len(liste)\n    return res","n_lines":9,"__index_level_0__":468,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    liste = [int(i) for i in liste]\n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        for elem in liste:\n            res += elem\n        res \/= len(liste)\n        return res"}
{"submission_id":1044,"func_code":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            x = x + i\n            cpt = cpt + 1\n            res = x \/ cpt\n        return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            x = x + i\n            cpt = cpt + 1\n            res = x \/ cpt\n        return res","n_lines":11,"__index_level_0__":469,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        cpt = 0\n        x = 0\n        res = 0.0\n        for i in range(len(liste)):\n            x = x + liste[i]\n            cpt = cpt + 1\n            res = x \/ cpt\n        return res"}
{"submission_id":4090,"func_code":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        x = 0\n        cpt = 0\n        for i in liste:\n            x = x + i\n            cpt = cpt + 1\n            res = x \/ cpt\n            return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        res = None\n    else:\n        x = 0\n        cpt = 0\n        for i in liste:\n            x = x + i\n            cpt = cpt + 1\n            res = x \/ cpt\n            return res","n_lines":11,"__index_level_0__":470,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if liste == []:\n            res = None\n        else:\n            x = 0\n            cpt = 0\n            for i in liste:\n                x = x + i\n                cpt = cpt + 1\n    \n            if cpt > 0:\n                res = x \/ cpt\n                return res"}
{"submission_id":2081,"func_code":"def moyenne(liste):\n    if liste == []:\n        res = None\n    res = 0\n    for elem in liste:\n        res += elem\n    res = res \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        res = None\n    res = 0\n    for elem in liste:\n        res += elem\n    res = res \/ len(liste)\n    return res","n_lines":8,"__index_level_0__":471,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if liste:\n        res = 0\n        for elem in liste:\n            res += elem\n        res = res \/ len(liste)\n        return res"}
{"submission_id":2237,"func_code":"def moyenne(liste):\n    if liste == []:\n        return None\n    else:\n        somme = 0\n        nbtermes = 0\n        for elem in liste:\n            somme = somme + elem\n            nbtermes = nbtermes + 1\n            moy = somme \/ nbtermes\n            return moy","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        return None\n    else:\n        somme = 0\n        nbtermes = 0\n        for elem in liste:\n            somme = somme + elem\n            nbtermes = nbtermes + 1\n            moy = somme \/ nbtermes\n            return moy","n_lines":11,"__index_level_0__":472,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if liste == []:\n            return None\n    \n        somme = 0\n        nbtermes = 0\n        \n        for elem in liste:\n            somme = somme + elem\n            nbtermes = nbtermes + 1\n            moy = somme \/ nbtermes\n        return moy"}
{"submission_id":140,"func_code":"def moyenne(liste):\n    if liste == []:\n        return None\n    else:\n        S = 0\n        nbNotes = 0\n        for i in liste:\n            S = S + liste[i]\n            nbNotes = nbNotes + 1\n    return S \/ nbNotes","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == []:\n        return None\n    else:\n        S = 0\n        nbNotes = 0\n        for i in liste:\n            S = S + liste[i]\n            nbNotes = nbNotes + 1\n    return S \/ nbNotes","n_lines":10,"__index_level_0__":473,"repair":"def moyenne(liste):\n        \"\"\"Return the mean of a list of numbers.\"\"\"\n        if liste == []:\n            return None\n    \n        S = 0\n        nbNotes = 0\n        for i in liste:\n            S = S + i\n            nbNotes = nbNotes + 1\n        return S \/ nbNotes"}
{"submission_id":1847,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        res = 0\n        for i in range(len(liste)):\n            x = res + liste[i]\n            res = x \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        res = 0\n        for i in range(len(liste)):\n            x = res + liste[i]\n            res = x \/ len(liste)\n    return res","n_lines":9,"__index_level_0__":474,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        for x in liste:\n            res = res + x\n        res = res \/ len(liste)\n        return res"}
{"submission_id":3517,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        res = 0\n        for i in range(len(liste)):\n            x = res + liste[i]\n        res = x \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        res = 0\n        for i in range(len(liste)):\n            x = res + liste[i]\n        res = x \/ len(liste)\n    return res","n_lines":9,"__index_level_0__":475,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    sum = 0\n    \n    for n in liste:\n        sum += n\n    \n    return sum\/len(liste)"}
{"submission_id":345,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            cpt = cpt + 1\n            x = x + liste[i]\n        res = x \/ cpt\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        cpt = 0\n        for i in range(len(liste)):\n            cpt = cpt + 1\n            x = x + liste[i]\n        res = x \/ cpt\n    return res","n_lines":11,"__index_level_0__":476,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    none = 0\n    if liste:\n        if liste[0] is None:\n            res = none\n        else:\n            x = 0\n            cpt = 0\n            for i in range(len(liste)):\n                cpt = cpt + 1\n                x = x + liste[i]\n            res = x \/ cpt\n        return res"}
{"submission_id":2715,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        for i in range(len(liste)):\n            x = x + liste[i]\n            res = x \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        for i in range(len(liste)):\n            x = x + liste[i]\n            res = x \/ len(liste)\n    return res","n_lines":9,"__index_level_0__":477,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        if liste[0] == 0:\n            res = 0.0\n        else:\n            x = 0\n            for i in range(len(liste)):\n                x = x + liste[i]\n                res = x \/ len(liste)\n        return res"}
{"submission_id":3158,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        for i in range(len(liste)):\n            x = x + liste[i]\n        res = x \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        x = 0\n        for i in range(len(liste)):\n            x = x + liste[i]\n        res = x \/ len(liste)\n    return res","n_lines":9,"__index_level_0__":478,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    none = None\n    if liste:\n        if len(liste) == 0:\n            res = none\n        else:\n            x = 0\n            for i in range(len(liste)):\n                x = x + liste[i]\n            res = x \/ len(liste)\n        return res"}
{"submission_id":1737,"func_code":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        for i in range(len(liste)):\n            x = res + liste[i]\n            res = x \/ len(liste)\n    return res","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    if liste == ():\n        res = none\n    else:\n        for i in range(len(liste)):\n            x = res + liste[i]\n            res = x \/ len(liste)\n    return res","n_lines":8,"__index_level_0__":479,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    elif len(liste) == 1:\n        return liste[0]\n    else:\n        res = 0\n        for a in liste:\n            res += a\n        res = res \/ (len(liste))\n        return res"}
{"submission_id":4003,"func_code":"def moyenne(liste):\n    return None","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    return None","n_lines":2,"__index_level_0__":480,"repair":""}
{"submission_id":2671,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moyenne = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moyenne = res \/ cpt\n    return moyenne","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moyenne = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    moyenne = res \/ cpt\n    return moyenne","n_lines":11,"__index_level_0__":481,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    moyenne = 0\n    cpt = 0\n    for x in liste:\n        res = 0.0\n        if len(liste) == 0:\n            moyenne = 0\n        else:\n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n        moyenne = res \/ cpt\n        return moyenne"}
{"submission_id":2544,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moyenne = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    return res \/ cpt","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    if len(liste) == 0:\n        moyenne = 0\n    else:\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n    return res \/ cpt","n_lines":10,"__index_level_0__":482,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    res = 0\n    cpt = 0\n    \n    if len(liste) > 0:\n        if len(liste) == 0:\n            moyenne = 0\n        else:\n            for i in liste:\n                res = res + i\n                cpt = cpt + 1\n        return res \/ cpt"}
{"submission_id":3440,"func_code":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    for i in liste:\n        res = res + i\n        cpt = cpt + 1\n    moyenne = res \/ cpt\n    return moyenne","assignment_id":"mean","func_name":"moyenne","description":"Return the mean of a list of numbers.","test":"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25","correct":false,"normalized":"Module(body=[FunctionDef(name='x_4', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def moyenne(liste):\n    res = 0\n    cpt = 0\n    for i in liste:\n        res = res + i\n        cpt = cpt + 1\n    moyenne = res \/ cpt\n    return moyenne","n_lines":8,"__index_level_0__":483,"repair":"def moyenne(liste):\n    \"\"\"Return the mean of a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = 0\n        cpt = 0\n        for i in liste:\n            res = res + i\n            cpt = cpt + 1\n        moyenne = res \/ cpt\n        return moyenne"}
{"submission_id":5624,"func_code":"def minimum(liste):\n    res = l([0])\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = l([0])\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":309,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        elem = min(liste)\n        res = elem\n        for e in liste:\n            if res > elem:\n                res = elem\n        return res"}
{"submission_id":904,"func_code":"def minimum(liste):\n    res = l([0])\n    for elem in liste:\n        if l[0] < elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = l([0])\n    for elem in liste:\n        if l[0] < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":310,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = min(liste)\n        return res"}
{"submission_id":935,"func_code":"def minimum(liste):\n    res = len([0])\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = len([0])\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":311,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if res > elem:\n                res = elem\n        return res"}
{"submission_id":2200,"func_code":"def minimum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":312,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    \n    if len(liste)==0:\n        return None\n    \n    else:\n        res=min(liste)\n        \n        return res"}
{"submission_id":2459,"func_code":"def minimum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":313,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":1260,"func_code":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":314,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res > elem:\n                res = elem\n        return res"}
{"submission_id":4688,"func_code":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res >= elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res >= elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":315,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res >= elem:\n                res = elem\n        return res"}
{"submission_id":2347,"func_code":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 0\n    for elem in liste:\n        if res < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":316,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n\n    minimum = min(liste)\n    \n    return minimum"}
{"submission_id":5463,"func_code":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if l[i] < l[i + 1]:\n            min = l[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='l', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if l[i] < l[i + 1]:\n            min = l[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":317,"repair":""}
{"submission_id":4338,"func_code":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = l[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = l[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":318,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = None\n    for num in liste:\n        if minimum is None or num < minimum:\n            minimum = num\n    return minimum"}
{"submission_id":2130,"func_code":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = 0\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":319,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        return min(liste)"}
{"submission_id":4469,"func_code":"def minimum(liste):\n    res = 100\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 100\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":320,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":1103,"func_code":"def minimum(liste):\n    res = 1000\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1000)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 1000\n    for i in range(len(liste)):\n        if liste[i] < res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":321,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = min(liste)\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":4656,"func_code":"def minimum(liste):\n    res = 12\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = 12\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":322,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    res=None\n    for elem in liste:\n        if res is None:\n            res = elem\n        for elem in liste:\n            if res > elem:\n                res = elem\n        return res"}
{"submission_id":4782,"func_code":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if res > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":323,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for elem in liste:\n            if res > elem:\n                res = elem\n        return res"}
{"submission_id":5135,"func_code":"def minimum(liste):\n    min = l[0]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = l[0]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","n_lines":6,"__index_level_0__":324,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    min = float('inf')\n    if len(liste) > 0:\n        for i in liste:\n            if i < min:\n                min = i\n        return min"}
{"submission_id":4084,"func_code":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if l[0] > elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if l[0] > elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":325,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = min(liste)\n        for item in liste:\n            if item < res:\n                res = elem\n        return res"}
{"submission_id":3467,"func_code":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if l[0] < elem:\n            res = elem\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = l[0]\n    for elem in liste:\n        if l[0] < elem:\n            res = elem\n    return res","n_lines":6,"__index_level_0__":326,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    \n    return min(liste)"}
{"submission_id":5621,"func_code":"def minimum(liste):\n    min = l[1]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = l[1]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","n_lines":6,"__index_level_0__":327,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = None\n    for x in liste:\n        min = x\n        for i in liste:\n            if i < min:\n                min = i\n        return min"}
{"submission_id":4639,"func_code":"def minimum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = liste[0]\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":328,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1,len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":5600,"func_code":"def minimum(liste):\n    min = liste[0]\n    for i in range(1, len(liste), 1):\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = liste[0]\n    for i in range(1, len(liste), 1):\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":329,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    liste.sort()\n    if len(liste) > 0:\n        min = None\n        for num in liste:\n            if min is None:\n                min = num\n            elif num < min:\n                min = None\n        return min"}
{"submission_id":4968,"func_code":"def minimum(liste):\n    min = liste[0]\n    for i in range(1, len(liste), -1):\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = liste[0]\n    for i in range(1, len(liste), -1):\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":330,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    def aux(liste):\n        if liste:\n            min = liste[0]\n            for ele in liste:\n                if ele < min:\n                    min = ele\n            return min\n        else:\n            return None\n    \n    return aux(liste) if liste else None"}
{"submission_id":3906,"func_code":"def minimum(liste):\n    res = liste[0]\n    for i in liste:\n        if i < res:\n            res = i\n        else:\n            res = None\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = liste[0]\n    for i in liste:\n        if i < res:\n            res = i\n        else:\n            res = None\n    return res","n_lines":8,"__index_level_0__":331,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    minimum = None\n    for n in liste:\n        if minimum is None:\n            minimum = n\n        elif n < minimum:\n            minimum = n\n    return minimum"}
{"submission_id":992,"func_code":"def minimum(liste):\n    min = liste[0]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = liste[0]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","n_lines":6,"__index_level_0__":332,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        min = liste[0]\n        for i in liste:\n            if i < min:\n                min = i\n        return min"}
{"submission_id":3066,"func_code":"def minimum(liste):\n    res = liste[0]\n    for i in liste:\n        if liste[i] < res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    res = liste[0]\n    for i in liste:\n        if liste[i] < res:\n            res = liste[i]\n    return res","n_lines":6,"__index_level_0__":333,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    liste.sort()\n    \n    return liste[0]"}
{"submission_id":3435,"func_code":"def minimum(liste):\n    min = liste[0]\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = liste[0]\n    for i in liste:\n        if liste[i] < liste[i + 1]:\n            min = liste[i]\n        else:\n            min = None\n    return min","n_lines":8,"__index_level_0__":334,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    \n    liste.sort()\n    \n    return liste[0]"}
{"submission_id":5084,"func_code":"def minimum(liste):\n    min = liste[1]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    min = liste[1]\n    for i in liste:\n        if i < min:\n            min = i\n    return min","n_lines":6,"__index_level_0__":335,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste==[]:\n        return None\n    \n    liste.sort()\n    \n    return liste[0]"}
{"submission_id":2945,"func_code":"def minimum(liste):\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    for i in range(len(liste)):\n        if liste[i] > res:\n            res = liste[i]\n    return res","n_lines":5,"__index_level_0__":336,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    liste=sorted(liste)\n    if len(liste)==0:\n        return None\n    return liste[0]"}
{"submission_id":1716,"func_code":"def minimum(liste):\n    for i in liste:\n        if i < min:\n            min = i\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    for i in liste:\n        if i < min:\n            min = i\n    return min","n_lines":5,"__index_level_0__":337,"repair":""}
{"submission_id":2865,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":338,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        if liste[0] == 0:\n            res = 0\n        else:\n            res = liste[0]\n            for i in range(len(liste)):\n                if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":1738,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        rest = liste[0]\n        for i in range(len(liste)):\n            if liste[0] < res:\n                res = liste[0]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        rest = liste[0]\n        for i in range(len(liste)):\n            if liste[0] < res:\n                res = liste[0]\n    return res","n_lines":9,"__index_level_0__":339,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = 0\n        else:\n            rest = liste[0]\n    \n            for i in range(1, len(liste)):\n                if liste[i] < rest:\n                    rest = liste[i]\n            return rest"}
{"submission_id":1599,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n    return None","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = 0\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n    return None","n_lines":10,"__index_level_0__":340,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = 0\n            res = liste[0]\n            for i in range(len(liste)):\n                if liste[i] < res:\n                    res = liste[i]\n    \n        return res"}
{"submission_id":388,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if res > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if res > liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":341,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(1, len(liste)):\n                if res > liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":3599,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < res:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":342,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":4286,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if elem < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if elem < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":343,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n            for i in range(1, len(liste)):\n    \n                if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":3734,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i > liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":344,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":3294,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if i < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":345,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":4487,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return None","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return None","n_lines":9,"__index_level_0__":346,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = min(liste)\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":1129,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[0]:\n                res = liste[0]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[0]:\n                res = liste[0]\n    return res","n_lines":9,"__index_level_0__":347,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n    \n            # sort list\n            liste.sort()\n    \n            # find min in list\n            res = liste[0]\n            for elem in liste:\n                if elem < liste[0]:\n                    res = liste[0]\n        return res"}
{"submission_id":2406,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":348,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i]<res:\n                    res = liste[i]\n        return res"}
{"submission_id":4748,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[elem]:\n                res = liste[elem]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for elem in liste:\n            if elem < liste[elem]:\n                res = liste[elem]\n    return res","n_lines":9,"__index_level_0__":349,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n            for elem in liste:\n    \n                if elem < res:\n                    res = elem\n        return res"}
{"submission_id":4806,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste[i]:\n            if liste[i] < res:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste[i]:\n            if liste[i] < res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":350,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":83,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste[i]:\n            if liste[i] < i:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        res = liste[0]\n        for i in liste[i]:\n            if liste[i] < i:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":351,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            res = liste[0]\n    \n        for i in range(len(liste)):\n            if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":630,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for elem in liste:\n            if elem < liste[0]:\n                res = liste[0]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        for elem in liste:\n            if elem < liste[0]:\n                res = liste[0]\n    return res","n_lines":8,"__index_level_0__":352,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            res = None\n        else:\n            for elem in liste:\n                if elem < liste[0]:\n    \n                    res = elem\n                    break\n        return res"}
{"submission_id":433,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        return None","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        res = None\n    else:\n        return None","n_lines":5,"__index_level_0__":353,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        return min(liste)"}
{"submission_id":2050,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        return None\n    min = 0\n    for i in range(1, len(liste)):\n        if liste[i] < min:\n            min = liste[i]\n        return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        return None\n    min = 0\n    for i in range(1, len(liste)):\n        if liste[i] < min:\n            min = liste[i]\n        return min","n_lines":8,"__index_level_0__":354,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n    \n        min = liste[0]\n        for num in liste[1:]:\n            if num < min:\n                min = num\n        return min"}
{"submission_id":1159,"func_code":"def minimum(liste):\n    if len(liste) == 0:\n        return None\n    min = 0\n    for i in range(1, len(liste)):\n        if liste[i] < min:\n            min = liste[i]\n    return min","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if len(liste) == 0:\n        return None\n    min = 0\n    for i in range(1, len(liste)):\n        if liste[i] < min:\n            min = liste[i]\n    return min","n_lines":8,"__index_level_0__":355,"repair":"def minimum(liste):\n        \"\"\"Return the minimum element in a list of numbers.\"\"\"\n        if len(liste) == 0:\n            return None\n        min = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < min:\n                min = liste[i]\n        return min"}
{"submission_id":4248,"func_code":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < res:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < res:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":356,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = min(liste)\n        for e in liste:\n            for i in range(1, len(liste) - 1):\n                if liste[i] < res:\n                    res = liste[i]\n        return res"}
{"submission_id":5367,"func_code":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < liste[i + 1]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste) - 1):\n            if liste[i] < liste[i + 1]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":357,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":1096,"func_code":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > liste[i + 1]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] > liste[i + 1]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":358,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":4588,"func_code":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < liste[i + 1]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == []:\n        res = None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < liste[i + 1]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":359,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste) == 0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":898,"func_code":"def minimum(liste):\n    if liste == ():\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == ():\n        res = None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":360,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        if len(liste) == 1:\n            res = None\n        else:\n            res = liste[0]\n            for i in range(len(liste)):\n                if res > liste[i]:\n                    res = liste[i]\n        return res"}
{"submission_id":2874,"func_code":"def minimum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n    return res","n_lines":9,"__index_level_0__":361,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if len(liste)==0:\n        return None\n    else:\n        res = liste[0]\n        for i in range(len(liste)):\n            if liste[i] < res:\n                res = liste[i]\n        return res"}
{"submission_id":4604,"func_code":"def minimum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        if res > liste[i]:\n            res = liste[i]\n    return res","assignment_id":"minimum","func_name":"minimum","description":"Return the minimum element in a list of numbers.","test":"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None","correct":false,"normalized":"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def minimum(liste):\n    if liste == ():\n        res = none\n    else:\n        res = liste[0]\n        if res > liste[i]:\n            res = liste[i]\n    return res","n_lines":8,"__index_level_0__":362,"repair":"def minimum(liste):\n    \"\"\"Return the minimum element in a list of numbers.\"\"\"\n    \n    if liste:\n        res = liste[0]\n        for i in range(1, len(liste)):\n            if res > liste[i]:\n                res = liste[i]\n        return res"}
{"submission_id":3177,"func_code":"def somme(liste):\n    res = 0\n    for i in len(liste):\n        res = res + len(liste)\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in len(liste):\n        res = res + len(liste)\n    return res","n_lines":5,"__index_level_0__":484,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    \n    res = 0\n    for i in liste:\n        res = res + i\n    return res"}
{"submission_id":1455,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste(i)\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste(i)\n    return None","n_lines":5,"__index_level_0__":485,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for i in range(len(liste)):\n        s = s + liste[i]\n    return s"}
{"submission_id":2379,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste[i]\n        return","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return()], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste[i]\n        return","n_lines":5,"__index_level_0__":486,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n    \n        for a in liste:\n            res = res + a\n        return res"}
{"submission_id":3779,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste[i]\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(l)):\n        res = res + liste[i]\n        return res","n_lines":5,"__index_level_0__":487,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for i in range(len(liste)):\n        s = s + liste[i]\n    return s"}
{"submission_id":5213,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n        return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))), Return(value=Constant(value=None))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n        return None","n_lines":5,"__index_level_0__":488,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n    \n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res"}
{"submission_id":2043,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n    return None","n_lines":5,"__index_level_0__":489,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for i in liste:\n        s = s + i\n    return s"}
{"submission_id":2036,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste(i)\n    return res","n_lines":5,"__index_level_0__":490,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res=0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res"}
{"submission_id":2080,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste\n    return None","n_lines":5,"__index_level_0__":491,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum=0\n    for i in range(len(liste)):\n        sum+=liste[i]\n    return sum"}
{"submission_id":4642,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n        return res","n_lines":5,"__index_level_0__":492,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n    \n        return res"}
{"submission_id":4708,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return None","n_lines":5,"__index_level_0__":493,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n    \n            res += liste[i]\n        return res"}
{"submission_id":3301,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]","n_lines":4,"__index_level_0__":494,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res=0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res"}
{"submission_id":2159,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        return res + liste[i]","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len(liste)):\n        return res + liste[i]","n_lines":4,"__index_level_0__":495,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res=0\n    for i in range(len(liste)):\n        res += liste[i]\n    return res"}
{"submission_id":4010,"func_code":"def somme(liste):\n    res = 0\n    for x in range([liste]):\n        res += x\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[List(elts=[Name(id='x_0', ctx=Load())], ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for x in range([liste]):\n        res += x\n    return res","n_lines":5,"__index_level_0__":496,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for x in liste:\n        s += x\n    return s"}
{"submission_id":5577,"func_code":"def somme(liste):\n    res = 0\n    for i in range(len, l):\n        res = res + liste(i)\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(len, l):\n        res = res + liste(i)\n    return None","n_lines":5,"__index_level_0__":497,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum = 0\n    for i in liste:\n        sum = sum + i\n    return sum"}
{"submission_id":1101,"func_code":"def somme(liste):\n    res = 0\n    for i in range(liste):\n        res = res + i\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(liste):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":498,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    somme = 0\n    for i in liste:\n        somme = somme + i\n    return somme"}
{"submission_id":2417,"func_code":"def somme(liste):\n    res = 0\n    for i in range(liste):\n        res = res + liste[i]\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in range(liste):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":499,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n    \n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res"}
{"submission_id":4234,"func_code":"def somme(liste):\n    res = 0\n    for x in range(liste):\n        res += x\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for x in range(liste):\n        res += x\n    return res","n_lines":5,"__index_level_0__":500,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    total = 0\n    for e in liste:\n        total += e\n    return total"}
{"submission_id":2010,"func_code":"def somme(liste):\n    res = 0\n    for i in liste(l):\n        res = res + I\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='I', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste(l):\n        res = res + I\n    return res","n_lines":5,"__index_level_0__":501,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum = 0\n    for n in liste:\n        sum = sum + n\n    return sum"}
{"submission_id":1822,"func_code":"def somme(liste):\n    res = 0\n    for i in liste(l):\n        res = res + i\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste(l):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":502,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for i in liste:\n        s = s + i\n    return s"}
{"submission_id":5445,"func_code":"def somme(liste):\n    res = 0\n    for elem in l:\n        res = res + elem\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='l', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in l:\n        res = res + elem\n    return res","n_lines":5,"__index_level_0__":503,"repair":"def somme(liste):\n        \"\"\"Return the sum of the elements in a list.\"\"\"\n        res = 0\n    \n        for elem in liste:\n            res = res + elem\n        return res"}
{"submission_id":41,"func_code":"def somme(liste):\n    res = 0\n    for elem in list:\n        res = res + elem\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='list', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in list:\n        res = res + elem\n        return res","n_lines":5,"__index_level_0__":504,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res=0\n    for elem in liste:\n        res = res + elem\n    return res"}
{"submission_id":2325,"func_code":"def somme(liste):\n    res = 0\n    for elem in list:\n        res = res + elem\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='list', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in list:\n        res = res + elem\n    return res","n_lines":5,"__index_level_0__":505,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum = 0\n    for elem in liste:\n        sum = sum + elem\n    return sum"}
{"submission_id":2084,"func_code":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + i(liste)\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + i(liste)\n    return res","n_lines":5,"__index_level_0__":506,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    total = 0\n    for n in liste:\n        total = total + n\n    return total"}
{"submission_id":1349,"func_code":"def somme(liste):\n    res = 0\n    for elen in liste:\n        res = res + elem\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elen in liste:\n        res = res + elem\n    return res","n_lines":5,"__index_level_0__":507,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    total = 0\n    for element in liste:\n        total = total + element\n    return total"}
{"submission_id":5146,"func_code":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + elem\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + elem\n        return res","n_lines":5,"__index_level_0__":508,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    somme = 0\n    for elem in liste:\n        if isinstance(elem, int):\n            somme = somme + elem\n    return somme"}
{"submission_id":5451,"func_code":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + elem\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + elem\n    return None","n_lines":5,"__index_level_0__":509,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    somme = 0\n    for elem in liste:\n        somme = somme + elem\n    return somme"}
{"submission_id":4541,"func_code":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + liste[i]\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for elem in liste:\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":510,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum = 0\n    for i in liste:\n        sum = sum + i\n    return sum"}
{"submission_id":2185,"func_code":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + liste[i]\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":511,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    sum = 0\n    for i in liste:\n        sum += i\n    return sum"}
{"submission_id":2594,"func_code":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + res[i]\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste:\n        res = res + res[i]\n    return res","n_lines":5,"__index_level_0__":512,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res= 0\n    for i in liste:\n        res = res + i\n    return res"}
{"submission_id":909,"func_code":"def somme(liste):\n    res = 0\n    for i in liste:\n        res += liste[i]\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for i in liste:\n        res += liste[i]\n    return res","n_lines":5,"__index_level_0__":513,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for i in liste:\n        s += i\n    return s"}
{"submission_id":1962,"func_code":"def somme(liste):\n    res = 0\n    for x in range[liste]:\n        res += x\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='range', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    for x in range[liste]:\n        res += x\n    return res","n_lines":5,"__index_level_0__":514,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    total = 0\n    for x in liste:\n        total += x\n    return total"}
{"submission_id":4428,"func_code":"def somme(liste):\n    res = 0\n    if elem in liste:\n        res = res + elem\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = 0\n    if elem in liste:\n        res = res + elem\n    return res","n_lines":5,"__index_level_0__":515,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    s = 0\n    for elem in liste:\n        s = s + elem\n    return s"}
{"submission_id":2230,"func_code":"def somme(liste):\n    res = None\n    if len(liste) > 0:\n        res = sum(liste)\n    return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    res = None\n    if len(liste) > 0:\n        res = sum(liste)\n    return res","n_lines":5,"__index_level_0__":516,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    res=0\n    if len(liste) > 0:\n        res = sum(liste)\n    return res"}
{"submission_id":3006,"func_code":"def somme(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    if len(liste) == 0:\n        res = 0\n    else:\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res","n_lines":8,"__index_level_0__":517,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    \n    \n    \n    if type(liste) == type([]):\n            res = 0\n            for i in range(len(liste)):\n                res = res + liste[i]\n            return res"}
{"submission_id":5026,"func_code":"def somme(liste):\n    if liste[i] == 0:\n        res = 0\n    else:\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    if liste[i] == 0:\n        res = 0\n    else:\n        res = 0\n        for i in range(len(liste)):\n            res = res + liste[i]\n        return res","n_lines":8,"__index_level_0__":518,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    total = 0\n    for i in range(len(liste)):\n        total = total + liste[i]\n    return total"}
{"submission_id":4054,"func_code":"def somme(liste):\n    return None","assignment_id":"sum","func_name":"somme","description":"Return the sum of the elements in a list.","test":"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0","correct":false,"normalized":"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def somme(liste):\n    return None","n_lines":2,"__index_level_0__":519,"repair":"def somme(liste):\n    \"\"\"Return the sum of the elements in a list.\"\"\"\n    somme = 0\n    for elem in liste:\n        somme+=elem\n    return somme"}
{"submission_id":2529,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":549,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n    \n        for e in liste:\n            if e % 2==0:\n                res += e\n        return res"}
{"submission_id":1578,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for x in range(len(liste)):\n        res = x % 2\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for x in range(len(liste)):\n        res = x % 2\n    return res","n_lines":5,"__index_level_0__":550,"repair":""}
{"submission_id":744,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if len(liste) % 2 != 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if len(liste) % 2 != 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":551,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n    \n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res"}
{"submission_id":4875,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if len(liste[i]) % 2 != 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if len(liste[i]) % 2 != 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":552,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n    \n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res"}
{"submission_id":3363,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if [i] % 2 != 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=List(elts=[Name(id='x_2', ctx=Load())], ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if [i] % 2 != 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":553,"repair":"def sommeNbPairs(liste):\n    \"\"\"Return the sum of the even numbers in a list.\"\"\"\n    \n    return sum(x for x in liste if x % 2 == 0)"}
{"submission_id":4319,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if x % 2 == 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if x % 2 == 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":554,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n    \n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res"}
{"submission_id":1808,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if x % 2 != 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if x % 2 != 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":555,"repair":""}
{"submission_id":2784,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + [i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=List(elts=[Name(id='x_2', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + [i]\n    return res","n_lines":6,"__index_level_0__":556,"repair":""}
{"submission_id":950,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + i\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + i\n    return res","n_lines":6,"__index_level_0__":557,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n    \n        for i in liste:\n            if i % 2 == 0:\n                res = res + i\n        return res"}
{"submission_id":3098,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if i % 2 == 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":558,"repair":""}
{"submission_id":4554,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] % 2 != 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in range(len(liste)):\n        if liste[i] % 2 != 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":559,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for i in range(len(liste)):\n    \n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res"}
{"submission_id":2477,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for x in liste:\n        res = res + x\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for x in liste:\n        res = res + x\n    return res","n_lines":5,"__index_level_0__":560,"repair":"def sommeNbPairs(liste):\n    \"\"\"Return the sum of the even numbers in a list.\"\"\"\n    aux=sum(e for e in liste if e%2==0)\n    return aux"}
{"submission_id":2661,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in liste:\n        res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in liste:\n        res = res + liste[i]\n    return res","n_lines":5,"__index_level_0__":561,"repair":""}
{"submission_id":166,"func_code":"def sommeNbPairs(l):\n    res = 0\n    for x in l:\n        if x % 2:\n            res = res + x\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(l):\n    res = 0\n    for x in l:\n        if x % 2:\n            res = res + x\n    return res","n_lines":6,"__index_level_0__":562,"repair":"def sommeNbPairs(l):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for x in l:\n    \n            if x % 2==0:\n                res = res + x\n        return res"}
{"submission_id":4762,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for x in liste:\n        if x % 2 == 0:\n            res = res + 0\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=0)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for x in liste:\n        if x % 2 == 0:\n            res = res + 0\n    return res","n_lines":6,"__index_level_0__":563,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for x in liste:\n    \n            if x%2==0:\n                res += x\n        return res"}
{"submission_id":1609,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for elem in liste:\n        if elem % 2 == 0:\n            res = res + [i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=List(elts=[Name(id='i', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for elem in liste:\n        if elem % 2 == 0:\n            res = res + [i]\n    return res","n_lines":6,"__index_level_0__":564,"repair":""}
{"submission_id":2412,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for nbrs in liste:\n        if nbrs % 2 == 0:\n            res = res + nbrs\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for nbrs in liste:\n        if nbrs % 2 == 0:\n            res = res + nbrs\n        return res","n_lines":6,"__index_level_0__":565,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        res = 0\n        for nbrs in liste:\n            if nbrs % 2 == 0:\n                res = res + nbrs\n    \n        return res"}
{"submission_id":314,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    for i in liste:\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    for i in liste:\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":566,"repair":""}
{"submission_id":3411,"func_code":"def sommeNbPairs(liste):\n    res = 0\n    if liste[i] % 2 == 0:\n        res = res + liste[i]\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    res = 0\n    if liste[i] % 2 == 0:\n        res = res + liste[i]\n        return res","n_lines":5,"__index_level_0__":567,"repair":""}
{"submission_id":1925,"func_code":"def sommeNbPairs(liste):\n    for liste in (range == 0):\n        res = 0\n    return None","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_0', ctx=Store()), iter=Compare(left=Name(id='range', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    for liste in (range == 0):\n        res = 0\n    return None","n_lines":4,"__index_level_0__":568,"repair":""}
{"submission_id":1532,"func_code":"def sommeNbPairs(liste):\n    for i in range(len(liste)):\n        if [i] % 2 == 0:\n            res = res + [i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=List(elts=[Name(id='x_1', ctx=Load())], ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Name(id='x_1', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    for i in range(len(liste)):\n        if [i] % 2 == 0:\n            res = res + [i]\n    return res","n_lines":5,"__index_level_0__":569,"repair":""}
{"submission_id":4242,"func_code":"def sommeNbPairs(liste):\n    for elem in liste:\n        if elem % 2 == 0:\n            res = res + [i]\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Name(id='i', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    for elem in liste:\n        if elem % 2 == 0:\n            res = res + [i]\n    return res","n_lines":5,"__index_level_0__":570,"repair":""}
{"submission_id":4594,"func_code":"def sommeNbPairs(liste):\n    for nb in liste:\n        if nb % 2 == 0:\n            res = res + nb\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    for nb in liste:\n        if nb % 2 == 0:\n            res = res + nb\n    return res","n_lines":5,"__index_level_0__":571,"repair":""}
{"submission_id":3389,"func_code":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste % 2 == 0:\n                res = res + liste\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste % 2 == 0:\n                res = res + liste\n        return res","n_lines":8,"__index_level_0__":576,"repair":""}
{"submission_id":4491,"func_code":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if n % 2 == 0:\n                res = res + n\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if n % 2 == 0:\n                res = res + n\n        return res","n_lines":8,"__index_level_0__":577,"repair":""}
{"submission_id":1015,"func_code":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[i] % 2 == 0:\n                res = res + liste[i]\n        return res","n_lines":8,"__index_level_0__":578,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        if liste == 0:\n            res = 0\n        else:\n    \n            res = sum(e for e in liste if e % 2 == 0)\n            return res"}
{"submission_id":5211,"func_code":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[liste] % 2 == 0:\n                res = res + liste[liste]\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[liste] % 2 == 0:\n                res = res + liste[liste]\n        return res","n_lines":8,"__index_level_0__":579,"repair":"def sommeNbPairs(liste):\n    \"\"\"Return the sum of the even numbers in a list.\"\"\"\n    evens = [n for n in liste if n % 2 == 0]\n    return sum(evens)"}
{"submission_id":3168,"func_code":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[n] % 2 == 0:\n                res = res + liste[n]\n        return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == 0:\n        res = 0\n    else:\n        for n in liste:\n            if liste[n] % 2 == 0:\n                res = res + liste[n]\n        return res","n_lines":8,"__index_level_0__":580,"repair":"def sommeNbPairs(liste):\n        \"\"\"Return the sum of the even numbers in a list.\"\"\"\n        if liste == 0:\n            res = 0\n        else:\n    \n            res = sum(e for e in liste if e % 2 == 0)\n            return res"}
{"submission_id":5172,"func_code":"def sommeNbPairs(liste):\n    if liste == []:\n        res = 0\n    else:\n        for i in liste:\n            if i % 2 == 0:\n                res = res + i\n    return res","assignment_id":"sum_even_numbers","func_name":"sommeNbPairs","description":"Return the sum of the even numbers in a list.","test":"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNbPairs(liste):\n    if liste == []:\n        res = 0\n    else:\n        for i in liste:\n            if i % 2 == 0:\n                res = res + i\n    return res","n_lines":8,"__index_level_0__":581,"repair":""}
{"submission_id":3041,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for n in range(1, n + 1):\n        if n % 2 == 0:\n            res = res + 1\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_0', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for n in range(1, n + 1):\n        if n % 2 == 0:\n            res = res + 1\n    return res","n_lines":6,"__index_level_0__":520,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n        for n in range(1, n + 1):\n            if n % 2 == 0:\n    \n                res = res + n\n        return res"}
{"submission_id":4053,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for e in range(N + 1):\n        if e % 2 == 0:\n            res = res + e\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='N', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for e in range(N + 1):\n        if e % 2 == 0:\n            res = res + e\n    return res","n_lines":6,"__index_level_0__":521,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for e in range(1, n+1):\n            if e % 2 == 0:\n                res = res + e\n        return res"}
{"submission_id":2593,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(len(1, n + 1)):\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(len(1, n + 1)):\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":522,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1, n+1):\n            if i % 2 == 0:\n                res += i\n        return res"}
{"submission_id":2741,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(len(1, n + 1)):\n        if liste[i]:\n            res = res + liste[i]\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(len(1, n + 1)):\n        if liste[i]:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":523,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    evens = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            evens += i\n    return evens"}
{"submission_id":5237,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(0, n, 2):\n        res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(0, n, 2):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":524,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1,n+1):\n            if i%2==0:\n                res += i\n        return res"}
{"submission_id":778,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n + 1, 2):\n        res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n + 1, 2):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":525,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    total=0\n    for i in range(1, n+1):\n        if i%2==0:\n            total+=i\n    return total"}
{"submission_id":1304,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n        else:\n            res = res - 1\n    return None","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n        else:\n            res = res - 1\n    return None","n_lines":8,"__index_level_0__":526,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1, n+1):\n            if i % 2 == 0:\n                res += i\n        return res"}
{"submission_id":3785,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n        else:\n            res = res - x\n    return None","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Name(id='x_2', ctx=Load())))])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n        else:\n            res = res - x\n    return None","n_lines":8,"__index_level_0__":527,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for i in range(1, n + 1):\n        if i%2 == 0:\n            somme = somme + i\n    return somme"}
{"submission_id":2848,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n    return None","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n    return None","n_lines":6,"__index_level_0__":528,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            somme += i\n    return somme"}
{"submission_id":5065,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1, 2):\n        if x % 2 == 0:\n            res = res + x\n    return res","n_lines":6,"__index_level_0__":529,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    s = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            s += i\n    return s"}
{"submission_id":2668,"func_code":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    for i in range(1, n + 1):\n        somme = somme + i\n        if elem % 2 == 0:\n            somme = somme + elem\n    return somme","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='elem', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    for i in range(1, n + 1):\n        somme = somme + i\n        if elem % 2 == 0:\n            somme = somme + elem\n    return somme","n_lines":7,"__index_level_0__":530,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        somme = 0\n        for i in range(1, n + 1):\n    \n            elem = i\n            if elem % 2 == 0:\n                somme = somme + elem\n        return somme"}
{"submission_id":4199,"func_code":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    for i in range(1, n + 1):\n        somme = somme + i\n    for elem in liste:\n        if elem % 2 == 0:\n            somme = somme + elem\n    return somme","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='liste', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    for i in range(1, n + 1):\n        somme = somme + i\n    for elem in liste:\n        if elem % 2 == 0:\n            somme = somme + elem\n    return somme","n_lines":8,"__index_level_0__":531,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    liste = list(range(1, n+1))\n    somme = 0\n    for elem in liste:\n        if elem % 2 == 0:\n            somme = somme + elem\n    return somme"}
{"submission_id":2266,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            res = res + x\n        return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            res = res + x\n        return res","n_lines":6,"__index_level_0__":532,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            somme = somme + x\n    return somme"}
{"submission_id":452,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            res = res + x\n    return None","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            res = res + x\n    return None","n_lines":6,"__index_level_0__":533,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    res=0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res = res + i\n    return res"}
{"submission_id":3291,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n + 1):\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n + 1):\n        if liste[i] % 2 == 0:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":534,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n        for i in range(1, n + 1):\n    \n            if i % 2 == 0:\n                res += i\n        return res"}
{"submission_id":1493,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n, 2):\n        res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(1, n, 2):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":535,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1,n+1):\n                if i%2==0:\n                        res += i\n        return res"}
{"submission_id":3316,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 0, -2):\n        res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 0, -2):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":536,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i\n    return sum"}
{"submission_id":4633,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 2, -2):\n        res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 2, -2):\n        res = res + i\n    return res","n_lines":5,"__index_level_0__":537,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1, n+1):\n            if i%2==0:\n                res += i\n        return res"}
{"submission_id":3360,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(n, 2):\n        res = res + x\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for x in range(n, 2):\n        res = res + x\n    return res","n_lines":5,"__index_level_0__":538,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for x in range(1,n+1):\n        if x%2==0:\n            somme = somme + x\n    return somme"}
{"submission_id":1120,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 2):\n        if liste[i]:\n            res = res + liste[i]\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[If(test=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n, 2):\n        if liste[i]:\n            res = res + liste[i]\n    return res","n_lines":6,"__index_level_0__":539,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            somme += i\n    return somme"}
{"submission_id":808,"func_code":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    if elem % 2 == 0:\n        for elem in range(1, n + 1):\n            somme = somme + i\n    return somme","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    somme = 0\n    if elem % 2 == 0:\n        for elem in range(1, n + 1):\n            somme = somme + i\n    return somme","n_lines":6,"__index_level_0__":540,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    s = 0\n    for i in range(1, n+1):\n        if i%2==0:\n            s += i\n    return s"}
{"submission_id":1718,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    if i in range(1, n + 1):\n        if i % 2 == 0:\n            res = res + i\n        return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    if i in range(1, n + 1):\n        if i % 2 == 0:\n            res = res + i\n        return res","n_lines":6,"__index_level_0__":541,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        res = 0\n    \n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                res += i\n        return res"}
{"submission_id":4059,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    if i in range(1, n + 1):\n        if i % 2 == 0:\n            res = res + i\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 0\n    if i in range(1, n + 1):\n        if i % 2 == 0:\n            res = res + i\n    return res","n_lines":6,"__index_level_0__":542,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            somme = somme + i\n    return somme"}
{"submission_id":4347,"func_code":"def sommeNPremiersEntiersPairs(n):\n    res = 1\n    for elem in range(2, n + 1, 2):\n        res = res + elem\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    res = 1\n    for elem in range(2, n + 1, 2):\n        res = res + elem\n    return res","n_lines":5,"__index_level_0__":543,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    \n    somme = 0\n    for x in range(1, n + 1):\n        if x%2==0:\n            somme += x\n    return somme"}
{"submission_id":4157,"func_code":"def sommeNPremiersEntiersPairs(n):\n    for elem in range(2, n + 1, 2):\n        res = res + elem\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    for elem in range(2, n + 1, 2):\n        res = res + elem\n    return res","n_lines":4,"__index_level_0__":544,"repair":""}
{"submission_id":3096,"func_code":"def sommeNPremiersEntiersPairs(n):\n    if n < 0:\n        res = 0\n    else:\n        for x in range(n):\n            if x % 2 == 0:\n                res = res + x\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    if n < 0:\n        res = 0\n    else:\n        for x in range(n):\n            if x % 2 == 0:\n                res = res + x\n    return res","n_lines":8,"__index_level_0__":546,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    \n    total = 0\n    \n    for i in range(1,n+1):\n        if i % 2 == 0: \n            total += i\n    return total"}
{"submission_id":273,"func_code":"def sommeNPremiersEntiersPairs(n):\n    if n <= 0:\n        res = 0\n    else:\n        res = n * (n + 2) \/ 2\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=2))), op=Div(), right=Constant(value=2)))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    if n <= 0:\n        res = 0\n    else:\n        res = n * (n + 2) \/ 2\n    return res","n_lines":6,"__index_level_0__":547,"repair":"def sommeNPremiersEntiersPairs(n):\n    \"\"\"Returns the sum of the n first even numbers.\"\"\"\n    somme = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            somme += i\n    return somme"}
{"submission_id":3985,"func_code":"def sommeNPremiersEntiersPairs(n):\n    if n <= 0:\n        res = 0\n    else:\n        for n in liste:\n            if n % 2 == 0:\n                res = n * (n + 1) \/ 2\n    return res","assignment_id":"sum_n_first_even","func_name":"sommeNPremiersEntiersPairs","description":"Returns the sum of the n first even numbers.","test":"assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0","correct":false,"normalized":"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_0', ctx=Store()), iter=Name(id='liste', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))), op=Div(), right=Constant(value=2)))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def sommeNPremiersEntiersPairs(n):\n    if n <= 0:\n        res = 0\n    else:\n        for n in liste:\n            if n % 2 == 0:\n                res = n * (n + 1) \/ 2\n    return res","n_lines":8,"__index_level_0__":548,"repair":"def sommeNPremiersEntiersPairs(n):\n        \"\"\"Returns the sum of the n first even numbers.\"\"\"\n        if n <= 0:\n            res = 0\n    \n        else:\n            res = 0\n            for i in range(1, n+1):\n                if i % 2 == 0:\n                    res += i\n        return res"}
{"submission_id":2595,"func_code":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) \/ 2 and ok:\n        if l[i] != l[1 - i]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) \/ 2 and ok:\n        if l[i] != l[1 - i]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":42,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        ok = True\n        while i < len(l) \/ 2 and ok:\n    \n            if l[i] != l[len(l)-1-i]:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":1257,"func_code":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(liste) and ok == True:\n        if liste[i] != liste[-i - 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(liste) and ok == True:\n        if liste[i] != liste[-i - 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":43,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        ok = True\n    \n        while i < len(l):\n            if l[i] != l[-i - 1]:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":2001,"func_code":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(liste) and ok:\n        if liste[i] != liste[-(i + 1)]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(liste) and ok:\n        if liste[i] != liste[-(i + 1)]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":44,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        ok = True\n    \n        while i < len(l):\n            if l[i] != l[len(l)-i-1]:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":2765,"func_code":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":45,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    ok = True\n    for i in range(len(l)):\n        if l[i] != l[len(l) - i - 1]:\n            ok = False\n    return ok"}
{"submission_id":236,"func_code":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) and ok:\n        if l[i] != l[-i - 1]:\n            ok = False\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    ok = True\n    while i < len(l) and ok:\n        if l[i] != l[-i - 1]:\n            ok = False\n    return ok","n_lines":7,"__index_level_0__":46,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    ok = True\n    for i in range(len(l)):\n        if l[i] != l[-i - 1]:\n            ok = False\n    return ok"}
{"submission_id":192,"func_code":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    res = True\n    while i < len(l) \/ 2 and j > -len(l) \/ 2 and res == True:\n        if l[i] != l[j]:\n            res = False\n        i = i + 1\n        j = j - 1\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    res = True\n    while i < len(l) \/ 2 and j > -len(l) \/ 2 and res == True:\n        if l[i] != l[j]:\n            res = False\n        i = i + 1\n        j = j - 1\n    return res","n_lines":10,"__index_level_0__":47,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        j = -1\n        res = True\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                res = False\n            i = i + 1\n            j = j - 1\n        return res"}
{"submission_id":2896,"func_code":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    ok = True\n    while i < len(l) \/ 2 and j > -len(l) \/ 2 and ok:\n        if l[i] != l[j]:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    ok = True\n    while i < len(l) \/ 2 and j > -len(l) \/ 2 and ok:\n        if l[i] != l[j]:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok","n_lines":10,"__index_level_0__":48,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    i = 0\n    j = -1\n    ok = True\n    while i < len(l) and j > -len(l) and ok:\n        if l[i] != l[j]:\n            ok = False\n        i = i + 1\n        j = j - 1\n    return ok"}
{"submission_id":4311,"func_code":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    res = True\n    while i < len(l) \/ 2 and j < -len(l) \/ 2 and res == True:\n        if l[i] != l[j]:\n            res = False\n        i = i + 1\n        j = j - 1\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    j = -1\n    res = True\n    while i < len(l) \/ 2 and j < -len(l) \/ 2 and res == True:\n        if l[i] != l[j]:\n            res = False\n        i = i + 1\n        j = j - 1\n    return res","n_lines":10,"__index_level_0__":49,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        j = -1\n        res = True\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                res = False\n            i = i + 1\n            j = j - 1\n        return res"}
{"submission_id":848,"func_code":"def listeSymetrique(l):\n    i = 0\n    while i < len(l):\n        if l[i] != l[-(1 + i)]:\n            return False\n        i += 1\n        return True","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_1', ctx=Load()))), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Constant(value=True))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    while i < len(l):\n        if l[i] != l[-(1 + i)]:\n            return False\n        i += 1\n        return True","n_lines":7,"__index_level_0__":50,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        i = 0\n        while i < len(l):\n            if l[i] != l[-(1 + i)]:\n                return False\n            i += 1\n    \n        return True"}
{"submission_id":1478,"func_code":"def listeSymetrique(l):\n    i = 0\n    while i < len(l):\n        if l[i] != l[-(1 + i)]:\n            return False\n    return True","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_1', ctx=Load()))), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    i = 0\n    while i < len(l):\n        if l[i] != l[-(1 + i)]:\n            return False\n    return True","n_lines":6,"__index_level_0__":51,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    \n    if len(l)==0:\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] != l[-(1 + i)]:\n                return False\n        return True"}
{"submission_id":4020,"func_code":"def listeSymetrique(l):\n    trouve = False\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l):\n        if l(i) == l(j):\n            trouve = True\n        i = i + 1\n        j = j - 1\n    return trouve","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    trouve = False\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l):\n        if l(i) == l(j):\n            trouve = True\n        i = i + 1\n        j = j - 1\n    return trouve","n_lines":10,"__index_level_0__":52,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        trouve = False\n        i = 0\n        j = -1\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                return False\n            i += 1\n            j -= 1\n            \n        if i == len(l):\n            return True"}
{"submission_id":1201,"func_code":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l) and trouve == True:\n        if l(i) != l(j):\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l) and trouve == True:\n        if l(i) != l(j):\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","n_lines":10,"__index_level_0__":56,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        trouve = True\n        i = 0\n        j = -1\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                trouve = False\n            i = i + 1\n            j = j - 1\n        return trouve"}
{"submission_id":586,"func_code":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l) and trouve == True:\n        if l[i] != l[j]:\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l) and trouve == True:\n        if l[i] != l[j]:\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","n_lines":10,"__index_level_0__":57,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        trouve = True\n        i = 0\n        j = -1\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                trouve = False\n            i = i + 1\n            j = j - 1\n        return trouve"}
{"submission_id":5501,"func_code":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l):\n        if l(i) != l(j):\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    trouve = True\n    i = 0\n    j = -1\n    while i < len(l) and j <= -len(l):\n        if l(i) != l(j):\n            trouve = False\n        i = i + 1\n        j = j - 1\n    return trouve","n_lines":10,"__index_level_0__":58,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        trouve = True\n        i = 0\n        j = -1\n    \n        while i < len(l) and j < len(l):\n            if l[i] != l[j]:\n                trouve = False\n            i = i + 1\n            j = j - 1\n        return trouve"}
{"submission_id":290,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(liste) \/ 2 and ok:\n        if l[i] != l[-1 - i]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(liste) \/ 2 and ok:\n        if l[i] != l[-1 - i]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":59,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        ok = True\n        i = 0\n    \n        while i < len(l):\n            if l[i] != l[-1 - i]:\n                ok = False\n            i = i + 1\n        return ok"}
{"submission_id":2328,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n            i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n            i = i + 1\n    return ok","n_lines":8,"__index_level_0__":60,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        ok = True\n        i = 0\n        while i < len(l) and ok:\n    \n                if l[i] != l[len(l)-i-1]:\n                    ok = False\n                i = i + 1\n        return ok"}
{"submission_id":2104,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n        return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='res', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n        return res","n_lines":8,"__index_level_0__":61,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    s=0\n    for i in range(len(l)):\n        if l[i]!=l[len(l)-i-1]:\n            return False\n        s+=1\n    return s==len(l)"}
{"submission_id":1267,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return res","n_lines":8,"__index_level_0__":62,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        ok = True\n        i = 0\n    \n        while i < len(l):\n            if l[i] != l[len(l)-i-1]:\n                ok = False\n                break\n            i += 1\n    \n        return ok"}
{"submission_id":4421,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[i - 1]:\n            ok = False\n        i = i + 1\n    return ok","n_lines":8,"__index_level_0__":63,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        ok = True\n        i = 0\n    \n        while i < len(l):\n            if l[i] != l[len(l)-i-1]:\n                ok = False\n                break\n            i = i + 1\n        return ok"}
{"submission_id":2322,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[-i]:\n            ok = False\n        i += 1\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[-i]:\n            ok = False\n        i += 1\n    return res","n_lines":8,"__index_level_0__":64,"repair":""}
{"submission_id":3449,"func_code":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[-i]:\n            ok = False\n        i += 1\n    return ok","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    ok = True\n    i = 0\n    while i < len(l) and ok:\n        if l[i] != l[-i]:\n            ok = False\n        i += 1\n    return ok","n_lines":8,"__index_level_0__":65,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        ok = True\n        i = 0\n        while i < len(l) and ok:\n    \n            if l[i] != l[len(l)-i-1]:\n                ok = False\n            i += 1\n        return ok"}
{"submission_id":4524,"func_code":"def listeSymetrique(l):\n    l2 = l[int(len(l) \/ 2):]\n    l2.reverse()\n    l = l[:int(len(l) \/ 2) + 1]\n    res = False\n    if l == l2:\n        res = True\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    l2 = l[int(len(l) \/ 2):]\n    l2.reverse()\n    l = l[:int(len(l) \/ 2) + 1]\n    res = False\n    if l == l2:\n        res = True\n    return res","n_lines":8,"__index_level_0__":67,"repair":"def listeSymetrique(l):\n    \"\"\"Check whether a list is symmetrical.\"\"\"\n    \n    if len(l) < 2:\n        return True\n    l2 = l[::-1]\n    if l2 == l:\n        return True\n    else:\n        l = l[:int(len(l) \/ 2) + 1]\n        res = False\n        if l == l2:\n            res = True\n        return res"}
{"submission_id":4625,"func_code":"def listeSymetrique(l):\n    l2 = l[int(len(l) \/ 2):]\n    l2.reverse()\n    l = l[:int(len(l) \/ 2) + 1]\n    res = True\n    if l != l2:\n        res = False\n    return res","assignment_id":"symetrical_list","func_name":"listeSymetrique","description":"Check whether a list is symmetrical.","test":"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False","correct":false,"normalized":"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","representative":"def listeSymetrique(l):\n    l2 = l[int(len(l) \/ 2):]\n    l2.reverse()\n    l = l[:int(len(l) \/ 2) + 1]\n    res = True\n    if l != l2:\n        res = False\n    return res","n_lines":8,"__index_level_0__":68,"repair":"def listeSymetrique(l):\n        \"\"\"Check whether a list is symmetrical.\"\"\"\n        l2 = l[int(len(l) \/ 2):]\n        l2.reverse()\n        l = l[:int(len(l) \/ 2) + 1]\n        res = True\n    \n        for ele in l:\n            if ele not in l2:\n                res = False\n                break\n        return res"}
