submission_id,func_code,assignment_id,func_name,description,test,correct,normalized,representative,user,academic_year
2461,"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    return res",,
739,"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,
2908,"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > i:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > i:
                res = liste[i]
    return res",,
2174,"def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res > liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res > liste[i]
    return res",,
2723,"def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res
    return res",,
-1,"def moyenne(liste):
	if len(liste)==0:
		res=None
	else:
		res=0
		for elem in liste:
			res+=elem
		res=res/len(liste)
	return res
",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",True,,,reference,
-1,"def minimum(liste):
   if len(liste)==0:
      return None
   res=liste[0]
   for i in range(1,len(liste)):
      if liste[i]<res:
         res=liste[i]
   return res
",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",True,,,reference,
-1,"def maximum(liste):
   if len(liste)==0:
      return None
   res=liste[0]
   for i in range(1,len(liste)):
      if liste[i]>res:
         res=liste[i]
   return res
",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",True,,,reference,
-1,"def somme(liste):
   res=0
   for elem in liste:
	   res=res+elem
   return res
",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",True,,,reference,
-1,"def listeDecroissante(scores):#exo2
    """"""renvoie True si la liste est triée dans l'ordre décroissant (False sinon)""""""
    ok=True
    i=0
    while i<len(scores)-1 and ok:
        if scores[i]<scores[i+1]:
            ok=False
        i+=1
    return ok
",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",True,,,reference,
-1,"def motPalindrome(mot):
  ok=True
  i=0
  while i<len(mot)//2 and ok:
    if mot[i]!=mot[-1-i]:
      ok=False
    i+=1
  return ok
",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,True,,,reference,
-1,"def listeSymetrique(l):
    res=True
    i=0
    while i<len(l)//2 and res:
        if l[i]!=l[-(i+1)]:
            res=False
        i+=1
    return res
",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",True,,,reference,
-1,"def sommeNbPairs(liste):
   res=0
   for x in liste:
      if x%2==0:
         res+=x
   return res
",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",True,,,reference,
-1,"def sommeNPremiersEntiersPairs(n):
   res=0
   for x in range(1,n+1):
	   if x%2==0:
		   res+=x
   return res
",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,True,,,reference,
40750,"_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='_A', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_3', ctx=Load()), IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='_A', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max",d566071f-0679-42ce-9081-3fac29a67d21,2016.0
32175,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0
39231,"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)",a48376ed-7138-4481-a4da-74490838ea3e,2016.0
26982,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0
7101,"def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",262b3841-5158-4b0c-be99-57281e73f267,2016.0
31370,"def maximum(l, max_n=None):
    if not len(l):
        return max_n
    if not max_n or l[0] > max_n:
        return maximum(l[1:], l[0])
    return maximum(l[1:], max_n)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l, max_n=None):
    if not len(l):
        return max_n
    if not max_n or l[0] > max_n:
        return maximum(l[1:], l[0])
    return maximum(l[1:], max_n)",4788f2f7-8b97-41a8-88ee-697183f85246,2016.0
27397,"def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    return maximum(l, current_max)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    return maximum(l, current_max)",ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0
16001,"def maximum(n=[]):
    List = sorted(n)
    return List[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(n=[]):
    List = sorted(n)
    return List[-1]",fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0
39604,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        i += 1
    return a",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        i += 1
    return a",93426de2-87e4-4c00-9910-de51627bd576,2016.0
34375,"def maximum(line=[]):
    m = line[0]
    for i in line:
        if i > m:
            m = i
    return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(line=[]):
    m = line[0]
    for i in line:
        if i > m:
            m = i
    return m",f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0
40187,"def maximum(a):
    a = sorted(a)
    return a[len(a) - 1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    a = sorted(a)
    return a[len(a) - 1]",030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0
19608,"def maximum(a):
    a = sorted(a)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    a = sorted(a)
    return a[-1]",8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0
37701,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='null')), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0
4827,"def maximum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini > a[i]:
            mini = mini
        elif mini < a[i]:
            mini = a[i]
        i += 1
    return mini",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini > a[i]:
            mini = mini
        elif mini < a[i]:
            mini = a[i]
        i += 1
    return mini",4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0
38645,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",d566071f-0679-42ce-9081-3fac29a67d21,2016.0
30078,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0
11318,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",a48376ed-7138-4481-a4da-74490838ea3e,2016.0
10999,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0
40903,"def maximum(n):
    n.sort()
    return n[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(n):
    n.sort()
    return n[-1]",46954879-c4e4-4ce6-87d4-00184c62b522,2016.0
325,"def maximum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a > b:
            m.append(a)
        else:
            m.append(b)
        return maximum(m)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a > b:
            m.append(a)
        else:
            m.append(b)
        return maximum(m)",9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0
8558,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if m > l[0]:
            return m
        else:
            return l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if m > l[0]:
            return m
        else:
            return l[0]",6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0
8495,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if l[0] > m:
            return l[0]
        else:
            return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if l[0] > m:
            return l[0]
        else:
            return m",0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0
3669,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        m = maximum(list[1:])
        return m if m > list[0] else list[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        m = maximum(list[1:])
        return m if m > list[0] else list[0]",4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0
12789,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0
11433,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0
13271,"def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] > a[1]:
            del a[1]
        else:
            del a[0]
        return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Del())])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] > a[1]:
            del a[1]
        else:
            del a[0]
        return maximum(a)",9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0
16280,"def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",1a650795-f8bf-47db-90f0-c896555da6d7,2016.0
18982,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",a49f3af8-fb92-43d5-945c-abc11916e319,2016.0
9307,"def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)",3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0
31180,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0
35619,"def maximum(l):
    if len(l) == 1:
        return l[0]
    bigger = maximum(l[1:])
    if l[0] > bigger:
        return l[0]
    return bigger",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    bigger = maximum(l[1:])
    if l[0] > bigger:
        return l[0]
    return bigger",9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0
42228,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0
24386,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",b1593687-e1b6-4969-bf98-9b229efc6797,2016.0
10506,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if maximum(l[:-1]) >= maximum(l[1:]):
        return maximum(l[:-1])
    else:
        return maximum(l[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if maximum(l[:-1]) >= maximum(l[1:]):
        return maximum(l[:-1])
    else:
        return maximum(l[1:])",051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0
23473,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
        return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
        return maximum(a)",427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0
16773,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
    return maximum(a)",6a42703e-da42-4824-8b83-b6f291ad71be,2016.0
26709,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0
12781,"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)",e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0
38255,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        return maximum(l[1:])
    else:
        return maximum([l[0]] + l[2:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        return maximum(l[1:])
    else:
        return maximum([l[0]] + l[2:])",431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0
27479,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0
10031,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] < a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] < a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return maximum(a)",ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0
35751,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='s', ctx=Load()), ops=[GtE()], comparators=[Name(id='i', ctx=Load())]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",a379289f-2b57-4917-ac63-01ab37fb3785,2016.0
21763,"def maximum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] > a[-1]:
        return maximum(a[:-1])
    elif a[0] < a[-1]:
        return maximum(a[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] > a[-1]:
        return maximum(a[:-1])
    elif a[0] < a[-1]:
        return maximum(a[1:])",caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0
26962,"def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max",932dfe81-cd49-4d41-8b87-456f3246e781,2016.0
10667,"def maximum(l):
    return max(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return max(l)",fa7e9f17-de07-4868-ab69-667438d7becd,2016.0
15989,"def maximum(l):
    return sorted(l)[len(l) - 1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return sorted(l)[len(l) - 1]",a2b86688-0a82-4779-8335-a584906257b0,2016.0
5712,"def maximum(l):
    return sorted(l)[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return sorted(l)[-1]",07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0
39712,"_A = None


def minimum(l, old_min=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return minimum(new_l, item if old_min == _A or item < old_min else
            old_min)
    else:
        return old_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='_A', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_3', ctx=Load()), IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='_A', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","_A = None


def minimum(l, old_min=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return minimum(new_l, item if old_min == _A or item < old_min else
            old_min)
    else:
        return old_min",d566071f-0679-42ce-9081-3fac29a67d21,2016.0
5252,"def minimum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini > collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini > collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0
1010,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",a48376ed-7138-4481-a4da-74490838ea3e,2016.0
2483,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0
38261,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=100000000000000000000000000000000000000000000)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",e5db5e57-0261-4967-963a-42d1a98c03de,2016.0
17266,"def minimum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] < c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] < c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",262b3841-5158-4b0c-be99-57281e73f267,2016.0
21961,"def minimum(l, m=None):
    if not len(l):
        return m
    if not m or l[0] < m:
        return minimum(l[1:], l[0])
    return minimum(l[1:], m)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, m=None):
    if not len(l):
        return m
    if not m or l[0] < m:
        return minimum(l[1:], l[0])
    return minimum(l[1:], m)",91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0
40564,"def minimum(l, current_min=None):
    if not l:
        return current_min
    first = l.pop()
    if current_min == None or first < current_min:
        return minimum(l, first)
    return minimum(l, current_min)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, current_min=None):
    if not l:
        return current_min
    first = l.pop()
    if current_min == None or first < current_min:
        return minimum(l, first)
    return minimum(l, current_min)",ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0
16810,"def minimum(n=[]):
    List = sorted(n)
    return List[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n=[]):
    List = sorted(n)
    return List[0]",fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0
7058,"def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",93426de2-87e4-4c00-9910-de51627bd576,2016.0
10412,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
    return m",f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0
9577,"def minimum(a):
    a = sorted(a)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    a = sorted(a)
    return a[0]",8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0
13731,"def minimum(l):
    A = 'null'
    lowest = A
    for c in l:
        if lowest == A:
            lowest = c
        elif c < lowest:
            lowest = c
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='null')), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    A = 'null'
    lowest = A
    for c in l:
        if lowest == A:
            lowest = c
        elif c < lowest:
            lowest = c
    return lowest",1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0
33468,"def minimum(list_1):
    i = 0
    total = '1000000'
    while i < len(list_1):
        if int(list_1[i]) <= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='1000000')), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Constant(value=0))]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(list_1):
    i = 0
    total = '1000000'
    while i < len(list_1):
        if int(list_1[i]) <= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",7a72123c-6850-4e9f-b407-211283f04a4c,2016.0
14306,"def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0
40154,"def minimum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini < a[i]:
            mini = mini
        elif mini > a[i]:
            mini = a[i]
        i += 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini < a[i]:
            mini = mini
        elif mini > a[i]:
            mini = a[i]
        i += 1
    return mini",4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0
2504,"def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",d566071f-0679-42ce-9081-3fac29a67d21,2016.0
3534,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0
10228,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",a48376ed-7138-4481-a4da-74490838ea3e,2016.0
39680,"def minimum(s):
    min = s[0]
    for c in s[1:]:
        if c < min:
            min = c
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(s):
    min = s[0]
    for c in s[1:]:
        if c < min:
            min = c
    return min",c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0
193,"def minimum(l):
    l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l.sort()
    return l[0]",59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0
40725,"def minimum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a < b:
            m.append(a)
        else:
            m.append(b)
        return minimum(m)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a < b:
            m.append(a)
        else:
            m.append(b)
        return minimum(m)",9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0
18210,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = minimum(l[1:])
        if m < l[0]:
            return m
        else:
            return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = minimum(l[1:])
        if m < l[0]:
            return m
        else:
            return l[0]",6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0
12224,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0
14870,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0
5923,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0
24521,"def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",1a650795-f8bf-47db-90f0-c896555da6d7,2016.0
40529,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Del())])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0
10326,"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)",a49f3af8-fb92-43d5-945c-abc11916e319,2016.0
7163,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",2157ade0-6890-435b-8669-a884e3233bc7,2016.0
40125,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0
15784,"def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0
1386,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0
10014,"def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0
25667,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",b1593687-e1b6-4969-bf98-9b229efc6797,2016.0
29107,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])",051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0
1581,"def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] > mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] > mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0
7475,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])",431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0
18766,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
        return minimum(a)",427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0
20028,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)",6a42703e-da42-4824-8b83-b6f291ad71be,2016.0
14591,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0
24722,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0
326,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return minimum(a)",ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0
11948,"def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",a379289f-2b57-4917-ac63-01ab37fb3785,2016.0
2256,"def minimum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s <= i for i in l)][0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='s', ctx=Load()), ops=[LtE()], comparators=[Name(id='i', ctx=Load())]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s <= i for i in l)][0]",a379289f-2b57-4917-ac63-01ab37fb3785,2016.0
29480,"def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0
41522,"def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]",31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0
13750,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",932dfe81-cd49-4d41-8b87-456f3246e781,2016.0
33618,"def minimum(l):
    return min(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return min(l)",fa7e9f17-de07-4868-ab69-667438d7becd,2016.0
25211,"def minimum(l):
    return sorted(l)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return sorted(l)[0]",a2b86688-0a82-4779-8335-a584906257b0,2016.0
