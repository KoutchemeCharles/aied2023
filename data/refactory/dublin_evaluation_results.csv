func_code,assignment_id,func_name,description,test,correct,user,academic_year,normalized,representative,repair,submission_id,repair_correctness
"def swap_unique_keys_values(d):
    val = list(d.values())
    for char in val:
        if char.count() > 1:
            del val[char]
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    val = list(d.values())
    for char in val:
        if char.count() > 1:
            del val[char]
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",30,True
"def union(a, b):
    i = 0
    while i < len(a + b):
        if a[i] not in seena:
            sys.stdout.write(a[i])
            seen[a[i]] = True
        elif b[i] not in seenb:
            sys.stdout.wrtie(b[i])
            seen[b[i]] = True
        i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seena', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seenb', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='wrtie', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a + b):
        if a[i] not in seena:
            sys.stdout.write(a[i])
            seen[a[i]] = True
        elif b[i] not in seenb:
            sys.stdout.wrtie(b[i])
            seen[b[i]] = True
        i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",31,True
"def swap_unique_keys_values(d):
    unique = []
    for k in d:
        if d[k] not in unique:
            unique.append(d[k])
        elif d[k] in unique:
            unique.remove(d[k])
    opposite = {}
    for k in d:
        if k in unique:
            opposite[d[k]] = k
    return opposite",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    unique = []
    for k in d:
        if d[k] not in unique:
            unique.append(d[k])
        elif d[k] in unique:
            unique.remove(d[k])
    opposite = {}
    for k in d:
        if k in unique:
            opposite[d[k]] = k
    return opposite","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",72,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            print(i)
        else:
            i += 1
    print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            print(i)
        else:
            i += 1
    print('-1')","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",195,True
"def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    h = 0
    while i < len(b):
        un[b[h]] = True
        h = h + 1
    print(un)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    h = 0
    while i < len(b):
        un[b[h]] = True
        h = h + 1
    print(un)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            else:
                0
            seen[a[i]] = True
        i = i + 1
    return c",211,True
"def reverse_list(l):
    if len[l] == 0:
        return l
    return l[-1:] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len[l] == 0:
        return l
    return l[-1:] + reverse_list(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",215,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return l[i]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return l[i]","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",221,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        if len(l1) > 2:
            k = k + 2
    i = 0
    k = 0
    while i < len(l2):
        l3.append(l2[k])
        if len(l2) > 2:
            k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        if len(l1) > 2:
            k = k + 2
    i = 0
    k = 0
    while i < len(l2):
        l3.append(l2[k])
        if len(l2) > 2:
            k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if False:
            0
        i += 2
    return l3",281,True
"def index(str, letter, pos):
    if pos == len(str):
        return 'False'
    elif str[pos] == letter:
        return 'True'
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return 'False'
    elif str[pos] == letter:
        return 'True'
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",301,True
"def remove_zeros(list):
    for i in list:
        if i == 0:
            list.remove[i]
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,03141ef3-f364-4b7c-9f52-990a173ac162,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for i in list:
        if i == 0:
            list.remove[i]
    return list","def remove_zeros(list):
    while True:
        if not 0 in list:
            if False:
                0
            break
        list.remove(0)",312,True
"def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
            i = i + 1
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
            i = i + 1
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",373,True
"def swap_unique_keys_values(d):
    A = False
    keyval = []
    new = {}
    done = {}
    for k, v in list(d.items()):
        keyval.append((v, k))
    done[keyval[0][0]] = A
    for each in keyval:
        if each[0] not in done:
            done[each[[0]]] = A
        else:
            done[each[0]] = True
        for each in kv:
            if not done[each[0]]:
                new[each[0]] = each[1]
        return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_6', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=List(elts=[Constant(value=0)], ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='kv', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    keyval = []
    new = {}
    done = {}
    for k, v in list(d.items()):
        keyval.append((v, k))
    done[keyval[0][0]] = A
    for each in keyval:
        if each[0] not in done:
            done[each[[0]]] = A
        else:
            done[each[0]] = True
        for each in kv:
            if not done[each[0]]:
                new[each[0]] = each[1]
        return new","def swap_unique_keys_values(a):
    lis = []
    if False:
        0
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",374,True
"def index(string, letter):
    if letter not in string:
        print('-1')
    if letter in string:
        a = list(string)
        print(a.index(letter))",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    if letter not in string:
        print('-1')
    if letter in string:
        a = list(string)
        print(a.index(letter))","def index(s, letter):
    if False:
        0
    if letter in s:
        return s.index(letter)
    return -1",422,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    print('False')",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    print('False')","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",437,True
"def count_letters(s):
    total = 0
    for c in s[:-1]:
        total += 1
    return count_letters(s[:-1]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    for c in s[:-1]:
        total += 1
    return count_letters(s[:-1]) + 1","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",455,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",463,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",506,True
"def sumup(n):
    if n == 0:
        return 0
    return n + sum_up_to(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum_up_to', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return n + sum_up_to(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",557,True
"def minimum(l, n=0):
    if n == 0:
        return l[0]
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l, n=0):
    if n == 0:
        return l[0]
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",575,True
"def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='letter', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",588,True
"def swap_keys_values(d):
    dict_ = sys.argv[1]
    new_dict = {}
    for k, v in list(dict_.items()):
        new_dict[v] = k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dict_ = sys.argv[1]
    new_dict = {}
    for k, v in list(dict_.items()):
        new_dict[v] = k","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",603,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return l
    for i in reversed(l):
        return list(i)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return l
    for i in reversed(l):
        return list(i)","def reverse_list(l):
    if l == []:
        return []
    if False:
        0
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",642,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return s
    n = 0
    x = []
    while n < len(s):
        if s[n] not in s:
            x.append(s[n])
        n = n + 1
    return x",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return s
    n = 0
    x = []
    while n < len(s):
        if s[n] not in s:
            x.append(s[n])
        n = n + 1
    return x","def intersection(a, b):
    A = True
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            seen[a[i]] = A
            i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = A
        i = i + 1
    return c",672,True
"def merge_lists(l1, l2):
    l3 = []
    for token in range(1, len(l1), 2):
        print(l1[token])
    for i in range(1, len(l2), 2):
        print(l2[i])",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for token in range(1, len(l1), 2):
        print(l1[token])
    for i in range(1, len(l2), 2):
        print(l2[i])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",684,True
"def reverse_list(l):
    return sorted(l, reverse=True)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return sorted(l, reverse=True)","def reverse_list(l):
    return l[::-1]",688,True
"def reverse_list(l):
    if not l:
        return l
    return reverse_list(l[1:].append(l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return l
    return reverse_list(l[1:].append(l[0]))","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",690,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    print('-1')","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",700,True
"def merge_lists(l1, l2):
    l3 = l1[0:2] + l2[0:2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1[0:2] + l2[0:2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",721,True
"def swap_unique_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    newD = {}
    for i in range(len(keys)):
        if values.count(values[i]) == 1:
            newD[keys[i]] = values[i]
    return newD",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    newD = {}
    for i in range(len(keys)):
        if values.count(values[i]) == 1:
            newD[keys[i]] = values[i]
    return newD","def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",816,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del d[s]
    print(e)
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del d[s]
    print(e)
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",826,True
"def swap_keys_values(d):
    new = {}
    for k, v in list(d.items()):
        new[v] = k
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,536d6075-5a50-4346-89ff-5e21df057756,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new = {}
    for k, v in list(d.items()):
        new[v] = k
    return d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",828,True
"def factorial(n):
    if int(n) >= 1:
        return 1
    return int(n) * factorial(int(n) - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) >= 1:
        return 1
    return int(n) * factorial(int(n) - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",830,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        if True:
            0
        i += 1
    return a",847,True
"def swap_unique_keys_values(d):
    return {[(b, a) for a, b in list(d.items()) if list(d.values()).count(b
        ) == 1]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Set(elts=[ListComp(elt=Tuple(elts=[Name(id='b', ctx=Load()), Name(id='a', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return {[(b, a) for a, b in list(d.items()) if list(d.values()).count(b
        ) == 1]}","def swap_unique_keys_values(d):
    return dict([(v, k) for k, v in list(d.items()) if list(d.values()).
        count(v) == 1])",867,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_7', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_8', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",874,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",919,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[d[i]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[d[i]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",943,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > minimum(a[1:]):
        return a[0]
    else:
        return minimum(a[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > minimum(a[1:]):
        return a[0]
    else:
        return minimum(a[1:])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",944,True
"def reverse(a):
    rev = []
    i = 0
    for i in len(a):
        rev.append(a[len(a) - i - 1])
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,54e3b0c4-223a-427c-9155-d6954330319d,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    i = 0
    for i in len(a):
        rev.append(a[len(a) - i - 1])
    return rev","def reverse(a):
    if True:
        0
    else:
        0
    b = a[::-1]
    return b",947,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] <= minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[n + 1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,198db91d-9bcb-463c-838e-d8957f078a4a,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] <= minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[n + 1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])",956,True
"def search(letter):
    str = input()
    if letter in str:
        print(True)
    else:
        print(false)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='false', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(letter):
    str = input()
    if letter in str:
        print(True)
    else:
        print(false)","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",961,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(x.items, reverse=True)
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(x.items, reverse=True)
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",987,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",1118,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    smallest = a.pop(0)
    x = minimum(a)
    if smallest > minimum(a):
        smallest = x
    return smallest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,36685ead-53f8-40af-a908-4c048278dc6b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    smallest = a.pop(0)
    x = minimum(a)
    if smallest > minimum(a):
        smallest = x
    return smallest","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",1128,True
"def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    d = []
    for k in list(inv.keys()):
        d.append(k)
    for k in d:
        if d.count(k) > 1:
            del inv[k]
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    d = []
    for k in list(inv.keys()):
        d.append(k)
    for k in d:
        if d.count(k) > 1:
            del inv[k]
    return inv","def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",1143,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append[l1[i], l2[i]]
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append[l1[i], l2[i]]
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            0
        l3.append(l2[i])
        i += 2
    return l3",1267,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",1287,True
"def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(i)
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(i)
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",1332,True
"def reverse_list(l):
    return l.sort(reverse=True)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return l.sort(reverse=True)","def reverse_list(l):
    return l[::-1]",1343,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = []
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f15a871d-61c5-494f-8886-91e213b59201,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = []
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",1349,True
"def union(a, b):
    c = a or b
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,99d129a4-97af-42ac-a543-23b9157331f8,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a or b
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",1375,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",1404,True
"def merge_lists(l1, l2):
    list3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            list3.append(l1[i])
        i = i + 1
    k = 0
    while k < len(l2):
        if k % 2 == 0:
            list3.append(l2[k])
        k = k + 1",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    list3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            list3.append(l1[i])
        i = i + 1
    k = 0
    while k < len(l2):
        if k % 2 == 0:
            list3.append(l2[k])
        k = k + 1","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",1411,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    return p",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    return p","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",1454,True
"def sumup(n):
    if n == 0:
        return 0
    return n + sumup(n)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return n + sumup(n)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",1457,True
"def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    return newd",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    return newd","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",1504,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        x = 0
        y = 1
        z = 2
        for i in range(3, n):
            x = y + z
            y = z
            z = x
        return x
    else:
        retrun - 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3), Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Expr(value=BinOp(left=Name(id='retrun', ctx=Load()), op=Sub(), right=Constant(value=1)))])])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        x = 0
        y = 1
        z = 2
        for i in range(3, n):
            x = y + z
            y = z
            z = x
        return x
    else:
        retrun - 1","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    elif False:
        0
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",1549,True
"def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    h = 0
    while i < len(b):
        un[b[h]] = True
        h = h + 1
    return un",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    h = 0
    while i < len(b):
        un[b[h]] = True
        h = h + 1
    return un","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            else:
                0
            seen[a[i]] = True
        i = i + 1
    return c",1565,True
"def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",1566,True
"def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
    return seen","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen and False:
            0
        i = i + 1
    return c",1573,False
"def reverse_list(l=[]):
    i = 0
    new_list = []
    while i < len(l):
        new_list.append(l[len(l) - i])
        i += 1
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    i = 0
    new_list = []
    while i < len(l):
        new_list.append(l[len(l) - i])
        i += 1
    return new_list","def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",1592,True
"def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 1
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 1
    else:
        return n * factorial(n - 1)","def factorial(n):
    if True:
        if n < 2:
            return 1
        elif True:
            0
        return n * factorial(n - 1)",1600,True
"def selection_sort(a):
    while n != 'end':
        a.append(int(n))
        n = input()
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='end')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    while n != 'end':
        a.append(int(n))
        n = input()
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1","def selection_sort(a):
    if True:
        0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                if True:
                    p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",1610,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k, v]
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k, v]
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",1633,False
"def count_letters(s):
    if len(s) == 0:
        return 0
    if len(s) == 1:
        return 1
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    if len(s) == 1:
        return 1
    return count_letters(s[1:])","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",1668,True
"def count_letters(s):
    count = 0
    i = 0
    while s[i] != '':
        count += 1
        i += 1
        return count_letters(s)
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    i = 0
    while s[i] != '':
        count += 1
        i += 1
        return count_letters(s)
    return count","def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])",1737,True
"def factorial(x):
    if x >= 1:
        return 1
    return x * factorial(x - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(x):
    if x >= 1:
        return 1
    return x * factorial(x - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",1760,True
"def index(string, letter):
    a = []
    while i < len(string):
        a.append(string[i])
        if string[i] == letter:
            return i
    if letter not in a:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    a = []
    while i < len(string):
        a.append(string[i])
        if string[i] == letter:
            return i
    if letter not in a:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        return -1",1794,True
"def reverse_list(a):
    if len(a) == 2:
        return ''
    return reverse_list(a[1:] + a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 2:
        return ''
    return reverse_list(a[1:] + a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",1888,True
"def index(str, letter):
    i = 0
    while str[i] != letter:
        return i
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] != letter:
        return i
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",1904,True
"def index(str, letter, default=0):
    while default == 0:
        if letter not in str:
            return -1
        else:
            count = 0
            while str[count] != letter:
                count += 1
    return count",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(str, letter, default=0):
    while default == 0:
        if letter not in str:
            return -1
        else:
            count = 0
            while str[count] != letter:
                count += 1
    return count","def index(str, letter, num):
    i = 0
    while True:
        if not i < len(str):
            break
        if str[i] == letter:
            if True:
                return i
        i += 1
    return -1",1906,True
"def union(a, b):
    i = 0
    while i < len(lines):
        if lines[i] not in seen:
            sys.stdout.write(lines[i])
            seen[lines[i]] = True
        i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(lines):
        if lines[i] not in seen:
            sys.stdout.write(lines[i])
            seen[lines[i]] = True
        i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",1933,True
"def count_letters(s):
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(s.join())
    else:
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(s.join())
    else:
        return count_letters(s)","def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",1970,True
"def swap_unique_keys_values(d):
    v = list(d.values())
    for k in v:
        if v.count(d[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_1', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_1', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    v = list(d.values())
    for k in v:
        if v.count(d[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",1984,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = results[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='results', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = results[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",2010,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        else:
            return '-1'
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        else:
            return '-1'
        i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            0
        i = i + 1
    return -1",2026,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    elif list[0] < minimum(list[1:]):
        return list[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    elif list[0] < minimum(list[1:]):
        return list[0]","def minimum(l):
    if len(l) == 1:
        return l[0]
    elif False:
        0
    return [s for s in l if all(s <= i for i in l)][0]",2031,True
"def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    print(deleted)
    for item in deleted:
        del newDick[item]",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e6a8cd93-4b6e-49db-8b16-a473b45b9a4a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    print(deleted)
    for item in deleted:
        del newDick[item]","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",2070,True
"def merge_lists(l1, l2):
    i = 0
    merging1 = l1.append[i]
    i = i + 2
    j = 0
    merging2 = l2.append[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    merging1 = l1.append[i]
    i = i + 2
    j = 0
    merging2 = l2.append[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",2087,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m1 = minimum(l[:len(l) // 2])
        m2 = minimum(l[len(l) // 2:])
        if m1 > m2:
            return m1
        else:
            return m2",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m1 = minimum(l[:len(l) // 2])
        m2 = minimum(l[len(l) // 2:])
        if m1 > m2:
            return m1
        else:
            return m2","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if l[0] > m:
            return l[0]
        else:
            return m",2095,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",2151,True
"def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(len(s) - 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(len(s) - 1)","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",2282,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = TRue
        i = i + 1
    k = 0
    while i < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,4490d043-a9e0-48aa-a62c-ddcc67ed7fba,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='TRue', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = TRue
        i = i + 1
    k = 0
    while i < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",2293,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    b = []
    b.append(reverse_list(a))
    return b[-1:]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    b = []
    b.append(reverse_list(a))
    return b[-1:]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",2316,True
"def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        l3.append(l2[i])
        i = i + 2
        j = j + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        l3.append(l2[i])
        i = i + 2
        j = j + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",2338,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    return list.remove(max_value)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    return list.remove(max_value)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",2348,True
"def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i - 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i - 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",2369,True
"def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        new_dict[d[value]] = d[key]
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        new_dict[d[value]] = d[key]
    return new_dict","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",2416,True
"def minimum(n):
    if len(n) == 1:
        return n
    if n[0] > minimum(n[1:]):
        return n + 1
    else:
        return minimum(n - 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if len(n) == 1:
        return n
    if n[0] > minimum(n[1:]):
        return n + 1
    else:
        return minimum(n - 1)","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",2494,True
"def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    i = 0
    for v in values:
        d[keys[i]] = v[i]
        i = i + 1
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    i = 0
    for v in values:
        d[keys[i]] = v[i]
        i = i + 1
    return d","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",2499,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    elif list[0] < minimum(list[1:]):
        list[0]
    else:
        return minimum(list[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    elif list[0] < minimum(list[1:]):
        list[0]
    else:
        return minimum(list[1:])","def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",2508,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return sorted(dic)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_6', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return sorted(dic)","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",2537,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    if i == len(s):
        s.append(result[i])
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    if i == len(s):
        s.append(result[i])
    return result","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",2584,True
"def swap_unique_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    invalid = []
    swappeddict = {}
    for value in list(dictionary.values()):
        if value not in oldvalues:
            oldvalues.append(value)
        else:
            invalid.append(value)
        if value in oldvalues:
            oldvalues.pop(value)
    for key in list(dictionary.keys()):
        if key.value() not in invalid:
            oldkeys.append(key)
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='x_5', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    invalid = []
    swappeddict = {}
    for value in list(dictionary.values()):
        if value not in oldvalues:
            oldvalues.append(value)
        else:
            invalid.append(value)
        if value in oldvalues:
            oldvalues.pop(value)
    for key in list(dictionary.keys()):
        if key.value() not in invalid:
            oldkeys.append(key)
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict","def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    if False:
        0
    if True:
        0
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",2593,True
"def index(string, letter):
    position = 0
    if string == []:
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = 0
    if string == []:
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        index(string[1:], letter)","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",2600,True
"def selection_sort(a):
    while i < len(a):
        j = i + 1
        i = 0
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    while i < len(a):
        j = i + 1
        i = 0
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",2619,True
"def minimum(list=[]):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list=[]):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",2636,True
"def swap_unique_keys_values(d):
    new = {}
    keys = [key for key in list(d.keys())]
    values = [value for value in list(d.values())]
    for v in list(d.values()):
        if values.count(v) == 1:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d50d9b01-3a58-41e1-995b-b40bb031ea43,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='k', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    keys = [key for key in list(d.keys())]
    values = [value for value in list(d.values())]
    for v in list(d.values()):
        if values.count(v) == 1:
            new[v] = k
    return new","def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[vals[i]] = keys[i]
    return dd",2724,True
"def count_letters(n='', i=0):
    if n == '':
        return i
    i += 1
    return count_letters(n.replace(n[0], '', 1))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=''), Constant(value=1)], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(n='', i=0):
    if n == '':
        return i
    i += 1
    return count_letters(n.replace(n[0], '', 1))","def count_letters(s, i=0):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",2734,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
            k = k + 1
        return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
            k = k + 1
        return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",2797,True
"def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(d[key])
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if d[key] in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(d[key])
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if d[key] in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",2885,True
"def swap_keys_values(x):
    for key, v in list(x.items()):
        d[v] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    for key, v in list(x.items()):
        d[v] = key
    return d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",2910,True
"def index(string, letter):
    position = -1
    i = 0
    while i < len(string):
        if string[i] == letter:
            position = i
        i = i + 1
    print(position)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = -1
    i = 0
    while i < len(string):
        if string[i] == letter:
            position = i
        i = i + 1
    print(position)","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",2915,True
"def count_letters(s):
    global count
    count += 1
    if not s:
        return count
    s = s[:-1]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['count']), AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='count', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    global count
    count += 1
    if not s:
        return count
    s = s[:-1]
    return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)",2945,True
"def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0964a543-93db-460b-a0c5-d0c94fea250f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3","def swap_unique_keys_values(d):
    new_d = {}
    doubles = set()
    for k, v in list(d.items()):
        if v in new_d:
            doubles.add(v)
        new_d[v] = k
    for k in doubles:
        del new_d[k]
    return new_d",2971,True
"def minimum(list):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return list.remove(max_value)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return list.remove(max_value)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",3004,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * fibonacci(n - 1) + fibonnaci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonnaci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * fibonacci(n - 1) + fibonnaci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",3005,True
"def swap_keys_values(d):
    d = {}
    for k, v in list(d.items()):
        d[v] = k
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d = {}
    for k, v in list(d.items()):
        d[v] = k
    return d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",3017,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append[l1, l2]
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), slice=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append[l1, l2]
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            0
        l3.append(l2[i])
        i += 2
    return l3",3202,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        m.remove(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return m",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        m.remove(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return m","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",3259,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
        else:
            del new_d[k]
            del d[k]
            del new_d[k]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
        else:
            del new_d[k]
            del d[k]
            del new_d[k]
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",3295,True
"def count_letters(s):
    if theString == '':
        return 0
    return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='theString', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if theString == '':
        return 0
    return 1 + count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",3340,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",3356,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
    for i in unique:
        dictionary[unique[i]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
    for i in unique:
        dictionary[unique[i]] = key
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",3400,True
"def remove_zeros(list):
    b = []
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    b = []
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",3406,True
"def factorial(n):
    if n == 0:
        return 1
    return factorial(n - 1) * factorial(n - 2)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    return factorial(n - 1) * factorial(n - 2)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",3414,True
"def swap_unique_keys_values(dict):
    for k in dict:
        print(k)
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    for k in dict:
        print(k)
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",3429,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    i = 0
    while i < len(d):
        values.append(d[key])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    i = 0
    while i < len(d):
        values.append(d[key])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    z = []
    l = []
    for c in list(d.items()):
        l.append(c[1])
    for c in l:
        if l.count(c) == 1:
            z.append(c)
        if False:
            0
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",3457,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        new_l = minimum(l[1:])
    if l[0] > new_l:
        return l[0]
    else:
        return new_l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        new_l = minimum(l[1:])
    if l[0] > new_l:
        return l[0]
    else:
        return new_l","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",3464,True
"def swap_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    new = {}
    i = 0
    while i < len(keys):
        new[value[i]] = keys[i]
        i = i + 1
    return new",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    new = {}
    i = 0
    while i < len(keys):
        new[value[i]] = keys[i]
        i = i + 1
    return new","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",3503,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        if a[p] < a[j]:
            p = j
        j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        if a[p] < a[j]:
            p = j
        j = j + 1
        i = i + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",3505,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",3517,True
"def minimum(n):
    if len(n) == 1:
        print(n[0])
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if len(n) == 1:
        print(n[0])
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",3535,True
"def index(str, recursive, letter):
    if letter in str:
        return 1
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, recursive, letter):
    if letter in str:
        return 1
    else:
        return -1","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",3540,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",3545,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 1
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 1
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",3553,True
"def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1')), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'","def index(s, letter, num):
    if num == len(s):
        if True:
            if True:
                0
            return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",3557,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    else:
        return reverse_list[:-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    else:
        return reverse_list[:-1]","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",3591,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
        return letter_pos",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
        return letter_pos","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",3610,True
"def reverse_list(x):
    if x == '':
        return x
    else:
        return x[-1] + reverse_list(x[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,50aef720-52de-4735-8874-78f5a311b939,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(x):
    if x == '':
        return x
    else:
        return x[-1] + reverse_list(x[:-1])","def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",3633,True
"def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return -1","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",3643,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='find_smallest_position', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    if True:
        return a
    else:
        0",3651,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), l3.append(6), l3.append(l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=6)], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), l3.append(6), l3.append(l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    if True:
        0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",3699,True
"def union(a, b, c):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b, c):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",3811,True
"def swap_keys_values(x):
    d = dict((k, v) for v, k in list(x.items()))
    return x",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    d = dict((k, v) for v, k in list(x.items()))
    return x","def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",3826,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return bad",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return bad","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",3834,True
"def union(a, b):
    i = 0
    while i < len(a):
        if a[i] not in seen:
            sys.stdout.write(a[i])
            seen[a[i]] = True
        i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        if a[i] not in seen:
            sys.stdout.write(a[i])
            seen[a[i]] = True
        i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",3836,True
"def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",3881,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    prev = s[n]
    curr = s[n + 1]
    x = []
    while n - 1 < len(s):
        if curr != prev:
            x.append(prev)
        n = n + 1
    return x",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=1)), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_7', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_7', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    prev = s[n]
    curr = s[n + 1]
    x = []
    while n - 1 < len(s):
        if curr != prev:
            x.append(prev)
        n = n + 1
    return x","def intersection(a, b):
    A = True
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            seen[a[i]] = A
            i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = A
        i = i + 1
    return c",3887,True
"def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
        return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
        return seen","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen and False:
            0
        i = i + 1
    return c",3906,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        elif a[mid] < q:
            low = mid + 1
        else:
            i = 0
            while i < len(a) and a[i] != q:
                i = i + 1
                return i
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_5', ctx=Load()))], orelse=[])])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        elif a[mid] < q:
            low = mid + 1
        else:
            i = 0
            while i < len(a) and a[i] != q:
                i = i + 1
                return i
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            if a[mid] < q:
                low = mid + 1
            else:
                high = mid
    if True:
        0
    return low",3953,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    if False:
        0
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",3954,True
"def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        if n in fib:
            return fib[i]
            i = i + 1
        else:
            i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        if n in fib:
            return fib[i]
            i = i + 1
        else:
            i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",3965,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]).append(a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",3983,True
"def append2list(l1, s=None):
    l2 = []
    for i in l1:
        l2.append(i)
    if s:
        l2.append(s)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, s=None):
    l2 = []
    for i in l1:
        l2.append(i)
    if s:
        l2.append(s)
    return l2","def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []",3990,True
"def reverse_list(s):
    if len(s) == 1:
        return s
    else:
        return s[-1] + reverse_list[:-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def reverse_list(s):
    if len(s) == 1:
        return s
    else:
        return s[-1] + reverse_list[:-1]","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",4010,True
"def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7ee35977-e007-4398-99c0-ea42a300ff3c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    a = 1
    b = 1
    if True:
        0
    for i in range(n - 1):
        a, b = b, a + b
    return a",4019,True
"def minimum(l):
    lowest = l[0]
    if l == []:
        return 0
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l).pop(l[0])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = l[0]
    if l == []:
        return 0
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l).pop(l[0])","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",4041,True
"def merge_lists(l1, l2):
    for num in l1:
        l3.append(num)
    for number in l2:
        l3.append(number)
    sorted(l)
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    for num in l1:
        l3.append(num)
    for number in l2:
        l3.append(number)
    sorted(l)
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",4095,True
"def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in dic:
            dic[b[j]] = True
        j = j + 1
    return dic",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in dic:
            dic[b[j]] = True
        j = j + 1
    return dic","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",4099,True
"def sumup(n):
    if n == 1:
        return 1
    else:
        return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    else:
        return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",4141,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    print((d, new))
    for key, value in list(new.items()):
        del d[key, value]
    print((d, new))
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    print((d, new))
    for key, value in list(new.items()):
        del d[key, value]
    print((d, new))
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    if True:
        0
    return e",4163,True
"def index(str, letter, num):
    n = 0
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter, num):
    n = 0
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'","def index(str, letter, pos):
    if True:
        if pos == len(str):
            return -1
        elif str[pos] == letter:
            return pos
        else:
            return index(str, letter, pos + 1)
    else:
        0",4170,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    print(len(str))
    print(i)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    print(len(str))
    print(i)","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",4189,True
"def union(a, b):
    i = 0
    while i < len(a + b):
        if a[i] not in seena:
            c.append(a[i])
        elif b[i] not in seenb:
            c.append(a[i])
        i = i + 1
    print(c)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seena', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seenb', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a + b):
        if a[i] not in seena:
            c.append(a[i])
        elif b[i] not in seenb:
            c.append(a[i])
        i = i + 1
    print(c)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",4213,True
"def fibonacci(n):
    a = 0
    b = 1
    while b < n:
        prev_a = a
        a = b
        b = prev_a + b
    return b",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    while b < n:
        prev_a = a
        a = b
        b = prev_a + b
    return b","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",4245,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    for key, value in list(new.items()):
        del d[key, value]
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    for key, value in list(new.items()):
        del d[key, value]
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    if True:
        0
    return e",4291,True
"def minimum(l):
    if not l:
        return []
    return minimum(min(l[:-1]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if not l:
        return []
    return minimum(min(l[:-1]))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",4297,True
"def sumup(n):
    if int(n) == 0:
        return '0'
    return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return '0'
    return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",4338,True
"def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items()) if v.count() == 1}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items()) if v.count() == 1}
    return inv","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",4386,True
"def sumup(n):
    sum = 0
    for x in range(0, n):
        sum += x
    return sum",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,71d3efb1-0433-44ad-83f0-224949653177,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sumup(n):
    sum = 0
    for x in range(0, n):
        sum += x
    return sum","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    if False:
        0
    else:
        0
    return n + sum_to_n",4514,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) < mini:
            mini = int(l[i])
        i = i + 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) < mini:
            mini = int(l[i])
        i = i + 1
    return mini","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",4540,True
"def fibonacci(x):
    if x == 0:
        return 1
    elif x == 1:
        return 1
    else:
        return fibonacci(x - 1) + fibonacci(x - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(x):
    if x == 0:
        return 1
    elif x == 1:
        return 1
    else:
        return fibonacci(x - 1) + fibonacci(x - 2)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",4562,True
"def append2list(l1, l2=None):
    if l2 != None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 != None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",4578,True
"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",4661,True
"def selection_sort(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",4668,True
"def merge_lists(l1, l2):
    l3 = [].split(',')
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=List(elts=[], ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = [].split(',')
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",4672,True
"def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    print(deleted)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e6a8cd93-4b6e-49db-8b16-a473b45b9a4a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    print(deleted)","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",4677,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",4737,True
"def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[-1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[-1:]).append(l[0])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",4755,True
"def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c","def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",4760,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check.append(x[i])
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check.append(y[j])
        j = j + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check.append(x[i])
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check.append(y[j])
        j = j + 1","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",4781,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < mid:
            low = mid
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < mid:
            low = mid
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4792,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[i]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[i]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",4825,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    count = 0
    count += 1
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    count = 0
    count += 1
    return count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",4835,True
"def sumup(n):
    total = [int(i) for i in range(0, n)]
    return sum(total)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def sumup(n):
    total = [int(i) for i in range(0, n)]
    return sum(total)","def sumup(n):
    if n < 2:
        if False:
            0
        return n
    else:
        0
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",4839,True
"def union(a, b):
    i = 0
    while i < len(a) and a[i] != v:
        i = i + 1
    return i < len(a)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='v', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a) and a[i] != v:
        i = i + 1
    return i < len(a)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    if True:
        0
    else:
        0
    return c",4849,True
"def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    print(merged_list)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    print(merged_list)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",4861,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",4886,True
"def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(newd)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(newd)","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",4900,True
"def minimum(l=[]):
    print('1\n3\n6\n4')",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1\n3\n6\n4')], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    print('1\n3\n6\n4')","def minimum(l):
    return min(l)",4906,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        l3.append(l1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        l3.append(l1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",4926,True
"def reverse_list(a, x=[]):
    if len(a) == 1:
        return a
    f = reverse_list(a[:-1])
    x.append(f)
    return x",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a, x=[]):
    if len(a) == 1:
        return a
    f = reverse_list(a[:-1])
    x.append(f)
    return x","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",4979,True
"def swap_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    new = {}
    i = 0
    while i < len(keys):
        val = value[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = list(d.keys())
    values = list(d.values())
    new = {}
    i = 0
    while i < len(keys):
        val = value[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",5034,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        if True:
            while j < len(a):
                if a[j] < a[p]:
                    p = j
                j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1
    return a",5044,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",5064,True
"def index(str, letter, position):
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return pos
    else:
        return index(str, letter, position + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='pos', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, position):
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return pos
    else:
        return index(str, letter, position + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",5081,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return []
    else:
        return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return []
    else:
        return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",5099,True
"def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if b[k] not in b:
            seen[b[k]] = True
        j = j + 1
    return",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if b[k] not in b:
            seen[b[k]] = True
        j = j + 1
    return","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",5129,True
"def reverse_list(l, new_list=None):
    if new_list == None:
        new_list = []
    if len(l) > 0:
        new_list.append(a.pop())
        return reverse_list(l, new_list)
    else:
        return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l, new_list=None):
    if new_list == None:
        new_list = []
    if len(l) > 0:
        new_list.append(a.pop())
        return reverse_list(l, new_list)
    else:
        return new_list","def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",5186,True
"def remove_zeros(list):
    i = 0
    while 0 in List:
        list.remove(0)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='List', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while 0 in List:
        list.remove(0)","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",5190,True
"def minimum(l=[]):
    if not l:
        return []
    return minimum(min(l[:-1]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if not l:
        return []
    return minimum(min(l[:-1]))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",5204,True
"def reverse_list(a, i=1, newa=[]):
    if i <= len(a):
        newa.append(a[-i])
        i = i + 1
        return reverse_list(a, i, newa)
    else:
        return newa
        newa = []",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, i=1, newa=[]):
    if i <= len(a):
        newa.append(a[-i])
        i = i + 1
        return reverse_list(a, i, newa)
    else:
        return newa
        newa = []","def reverse_list(l, i=0):
    if i < len(l) // 2:
        l[i], l[-i - 1] = l[-i - 1], l[i]
        return reverse_list(l, i + 1)
    else:
        return l",5274,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    a.remove(max(a))
    return maximum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    a.remove(max(a))
    return maximum(a)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",5335,True
"def index(string, letter):
    if letter not in string:
        return '-1'
    if letter in string:
        a = list(string)
        return a.index(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    if letter not in string:
        return '-1'
    if letter in string:
        a = list(string)
        return a.index(letter)","def index(s, letter):
    if False:
        0
    if letter in s:
        return s.index(letter)
    return -1",5345,True
"def minimum(n):
    if len(n) == 1:
        return n
    if n[0] > minimum(n[1:]):
        return n
    else:
        return minimum(n - 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if len(n) == 1:
        return n
    if n[0] > minimum(n[1:]):
        return n
    else:
        return minimum(n - 1)","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",5356,True
"def index(str, letter):
    if letter in str:
        return pos(letter)
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='pos', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return pos(letter)
    else:
        return '-1'","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",5428,True
"def fibonacci(n):
    print(n - 1 + (n - 2))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)))], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    print(n - 1 + (n - 2))","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",5484,True
"def reverse_list(n):
    if len(n) == 0:
        return []
    return n[-1:] + reverse_list[:-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if len(n) == 0:
        return []
    return n[-1:] + reverse_list[:-1]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",5521,True
"def reverse_list(s, x=[]):
    if len(s) == 1:
        return s
    else:
        x.append(s[-1])
        return x + reverse_list(s[0:len(s) - 1], x)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(s, x=[]):
    if len(s) == 1:
        return s
    else:
        x.append(s[-1])
        return x + reverse_list(s[0:len(s) - 1], x)","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",5541,True
"def minimum(n):
    m = sorted(n)
    if n[0] == m[0]:
        return n[0]
    return minimum(n)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n):
    m = sorted(n)
    if n[0] == m[0]:
        return n[0]
    return minimum(n)[0]","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",5556,True
"def fibonacci(x):
    if x <= 1:
        return x
    else:
        return fibonacci(x - 1) + fibonacci(x - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b842b3b5-71ff-4f80-9bd4-d5973c3f5123,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(x):
    if x <= 1:
        return x
    else:
        return fibonacci(x - 1) + fibonacci(x - 2)","def fibonacci(n):
    fib = [0, 1, 1]
    if False:
        0
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",5606,True
"def swap_keys_values(s):
    dictionary = {}
    for i in s:
        dictionary[s[i]] = i
        return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), Return(value=Name(id='d', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(s):
    dictionary = {}
    for i in s:
        dictionary[s[i]] = i
        return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",5633,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
        else:
            del new_d[k]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
        else:
            del new_d[k]
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",5634,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        unique.pop(not_unique)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        unique.pop(not_unique)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t[:int(len(t) / 2)]:
        del new_d[v]
    for v in t[int(len(t) / 2):]:
        del new_d[v]
    return new_d",5686,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3.append(l1_1, l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='l3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3.append(l1_1, l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while True:
        if not i < len(l1):
            break
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",5705,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",5711,True
"def count_letters(s):
    if not s:
        return count_letters.count
    s = s[:-1]
    count_letters.count += 1
    try:
        return count_letters(s)
    finally:
        count_letters.count = 0",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), AugAssign(target=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Store()), op=Add(), value=Constant(value=1)), Try(body=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Store())], value=Constant(value=0))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return count_letters.count
    s = s[:-1]
    count_letters.count += 1
    try:
        return count_letters(s)
    finally:
        count_letters.count = 0","def count_letters(item, length=0):
    if True:
        try:
            item[0]
        except IndexError:
            return length
        item = item[1:]
        length += 1
        return count_letters(item, length)",5818,True
"def append2list(l1, s=''):
    l2 = []
    for i in l1:
        l2.append(i)
    if s:
        l2.append(s)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, s=''):
    l2 = []
    for i in l1:
        l2.append(i)
    if s:
        l2.append(s)
    return l2","def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []",5825,True
"def remove_zeros(list):
    for number in list:
        if '0' in list:
            return list.remove('0')
        else:
            return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if '0' in list:
            return list.remove('0')
        else:
            return list","def remove_zeros(list):
    while 0 in list:
        if True:
            if True:
                0
        list.remove(0)",5826,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    print(max_value)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    print(max_value)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",5832,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if 0 in list:
            list.remove(0)
    i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if 0 in list:
            list.remove(0)
    i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",5836,True
"def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(list(newd.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(list(newd.items()))","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",5863,True
"def remove_zeros(a):
    i = 0
    while len(a):
        if int(a[len(a) - i - 1]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while len(a):
        if int(a[len(a) - i - 1]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",5902,True
"def search(string, letter):
    if letter in string:
        return 'True'
    if letter not in string:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if letter in string:
        return 'True'
    if letter not in string:
        return 'False'","def search(string, letter):
    A = False
    if A:
        0
    i = 0
    if letter in string:
        return True
    return A",5918,True
"def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merge_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merge_list.append(l2[i])
        i += 2
    print(merge_list)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='merge_list', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merge_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merge_list.append(l2[i])
        i += 2
    print(merge_list)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",5938,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            wards.pop([k])
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[List(elts=[Name(id='x_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            wards.pop([k])
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",5943,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not unique in not_unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not unique in not_unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    if True:
        for i in a:
            if a[i] not in lis:
                dir[a[i]] = i
        return dir",5962,True
"def search(str, letter):
    if str == []:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == []:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",5977,True
"def swap_keys_values(d):
    return {p[0]: p[1] for p in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Subscript(value=Name(id='p', ctx=Load()), slice=Constant(value=0), ctx=Load()), value=Subscript(value=Name(id='p', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {p[0]: p[1] for p in list(d.items())}","def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",5991,True
"def minimum(l, currmin=None):
    pos = l.pop()
    if currmin == None or pos < currmin:
        return minimum(l, pos)
    return minimum(l, currmin)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, currmin=None):
    pos = l.pop()
    if currmin == None or pos < currmin:
        return minimum(l, pos)
    return minimum(l, currmin)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",6008,True
"def search(str, letter):
    i = 0
    if len(str) == 0:
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    if len(str) == 0:
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",6023,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_6', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",6025,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f21b9b8a-bb0a-4eef-ad07-667fd7acbc1b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",6031,True
"def remove_zeros(list):
    if '0' in list:
        return list.remove('0')
    else:
        return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    if '0' in list:
        return list.remove('0')
    else:
        return list","def remove_zeros(list):
    if True:
        while 0 in list:
            list.remove(0)
    elif False:
        0",6033,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in int(str[i]):
            return i
        else:
            return '-1'
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in int(str[i]):
            return i
        else:
            return '-1'
        i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            0
        i = i + 1
    return -1",6056,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j = j + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j = j + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",6091,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",6096,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        elif not y[i] in check:
            answer.append(y[i])
            check[y[i]] = True
        i = i + 1
    return answer",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        elif not y[i] in check:
            answer.append(y[i])
            check[y[i]] = True
        i = i + 1
    return answer","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",6135,True
"def reverse_list(a):
    if len(a) == 0 or len(a) == 1:
        return 1
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0 or len(a) == 1:
        return 1
    else:
        return [a[-1]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",6136,True
"def swap_unique_keys_values(d):
    output = {}
    new = d
    for key, value in list(new.items()):
        new.pop(key, value)
        if value not in list(new.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_0', ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_4', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    output = {}
    new = d
    for key, value in list(new.items()):
        new.pop(key, value)
        if value not in list(new.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",6150,True
"def selection_sort(a):
    i = 0",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,539a3d07-c706-42ed-bbbe-db66980d170f,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0","def selection_sort(a):
    return sorted(a)",6180,True
"def swap_unique_keys_values(d):
    lst = []
    for k in list(d.keys()):
        v = d[k]
        lst.append(v)
    new_d = {v: k for k, v in list(d.items()) if lst.count(v, 0, len(lst)) == 1
        }
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lst', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    lst = []
    for k in list(d.keys()):
        v = d[k]
        lst.append(v)
    new_d = {v: k for k, v in list(d.items()) if lst.count(v, 0, len(lst)) == 1
        }
    return new_d","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",6194,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75fca52d-a61c-4d91-946c-d376c5569767,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        new_d[v] = k
    return new_d","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",6202,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",6236,True
"def append2list(l1, l2=None):
    if l2 in None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 in None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",6246,True
"def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",6250,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.appened(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='appened', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.appened(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",6276,True
"def reverse_list(list):
    if list == []:
        return []
    elif len(list) == 1:
        newlist = []
        newlist.append(list.pop())
    else:
        return reverse_list(list[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(list):
    if list == []:
        return []
    elif len(list) == 1:
        newlist = []
        newlist.append(list.pop())
    else:
        return reverse_list(list[1:])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",6296,True
"def sumup(n):
    if n == 1:
        return n
    return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return n
    return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",6333,True
"def swap_unique_keys_values(d):
    a = {}
    b = {}
    c = sorted(list(d.items()), reverse=True)
    for k, v in c:
        if v not in b:
            b[v] = k
        else:
            b[v] = 'A'
    e = sorted(list(a.items()), reverse=True)
    for k, v in e:
        if v != 'A':
            b = v
    return b",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='A'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='A')]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    a = {}
    b = {}
    c = sorted(list(d.items()), reverse=True)
    for k, v in c:
        if v not in b:
            b[v] = k
        else:
            b[v] = 'A'
    e = sorted(list(a.items()), reverse=True)
    for k, v in e:
        if v != 'A':
            b = v
    return b","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",6338,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return letter.index()",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return letter.index()","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",6398,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[2])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[2])
        i = i + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[2])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[2])
        i = i + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",6418,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e0829d0-8e72-4878-8d83-441773f88f67,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",6421,True
"def selection_sort(a):
    a = a.sorted()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sorted', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    a = a.sorted()","def selection_sort(a):
    return sorted(a)",6444,True
"def sumup(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    sumup = sumup(n - 1)
    return n + sumup",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    sumup = sumup(n - 1)
    return n + sumup","def sumup(n):
    if n < 2:
        return n
    elif False:
        0
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",6478,True
"def index(str, letter, i):
    if letter in str[i]:
        return i
        print(i)
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter, i):
    if letter in str[i]:
        return i
        print(i)
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",6537,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",6575,True
"def reverse_list(l):
    if len(l) < 2:
        return l
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) < 2:
        return l
    else:
        return reverse_list(l[1:]) + l[0]","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",6609,True
"def swap_keys_values(d):
    dic = {}
    a = list(d.values())
    b = list(d.keys())
    print((a, 'boop'))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_2', ctx=Load()), Constant(value='boop')], ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    a = list(d.values())
    b = list(d.keys())
    print((a, 'boop'))","def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",6626,True
"def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
        return n
    else:
        print(n)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
        return n
    else:
        print(n)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",6701,True
"def index(str, letter):
    i = 0
    while str[i] == letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] == letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",6712,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            del d[k, v]
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            del d[k, v]
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",6719,False
"def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            c = (a, b) - (a + b)
            return c
            i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()), op=Sub(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            c = (a, b) - (a + b)
            return c
            i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",6730,True
"def fibonacci(l):
    if l == 1 or l == 0:
        return 1
    l -= 1
    return fibonacci(l) + fibonacci(l - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dd3b5b53-00cc-42e8-9f77-c46f84f7c7b3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1)), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(l):
    if l == 1 or l == 0:
        return 1
    l -= 1
    return fibonacci(l) + fibonacci(l - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",6733,True
"def swap_keys_values(x):
    d = {v: k for k, v in list(d.items())}
    return x",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    d = {v: k for k, v in list(d.items())}
    return x","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",6739,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= high
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_3', ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= high
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6740,True
"def swap_keys_values(d):
    swapped_d = {}
    for k, v in list(d.items()):
        swapped_d[v] = k
    print(swapped_d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,553c9a10-8e3d-401b-8100-2094287197ed,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    swapped_d = {}
    for k, v in list(d.items()):
        swapped_d[v] = k
    print(swapped_d)","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",6741,True
"def factorial(n):
    product = 1
    for x in range(0, n + 1):
        product *= x
    return product",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,71d3efb1-0433-44ad-83f0-224949653177,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def factorial(n):
    product = 1
    for x in range(0, n + 1):
        product *= x
    return product","def factorial(n):
    if n < 2 and True:
        return 1
    else:
        0
    return n * factorial(n - 1)",6758,True
"def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",6765,True
"def remove_zeros(list):
    for number in list:
        if '0' in list:
            list.remove('0')
            return list
        else:
            return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if '0' in list:
            list.remove('0')
            return list
        else:
            return list","def remove_zeros(list):
    while 0 in list:
        if True:
            if True:
                0
        list.remove(0)",6778,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[p] > a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,36685ead-53f8-40af-a908-4c048278dc6b,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[p] > a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",6791,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    l = reverse_list(a[1:])
    l.append(a[0])
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    l = reverse_list(a[1:])
    l.append(a[0])
    return l","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",6800,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * (fibonacci(n - 1) + fibonacci(n - 2))",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * (fibonacci(n - 1) + fibonacci(n - 2))","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",6815,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            d.pop(k, v)
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            d.pop(k, v)
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",6846,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k, v]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_4', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k, v]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",6861,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
    print((d, new))
    for key, value in list(new.items()):
        del d[key, value]
    print((d, new))
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
    print((d, new))
    for key, value in list(new.items()):
        del d[key, value]
    print((d, new))
    output = {}
    for key, value in list(new.items()):
        if value not in list(d.values()):
            output[key] = value
    inverse = {a: b for b, a in list(output.items())}
    return inverse","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    if True:
        0
    return e",6878,True
"def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    i = 0
    for v in values:
        d[v[i]] = keys[i]
        i = i + 1",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    i = 0
    for v in values:
        d[v[i]] = keys[i]
        i = i + 1","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",7023,True
"def union(a, b):
    i = 0
    while i < len(a):
        c.appened(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='appened', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        c.appened(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",7030,True
"def factorial(n):
    if n == 0:
        return 0
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    else:
        return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",7031,True
"def search(str, letter):
    if letter in str:
        return true
    else:
        return false",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='true', ctx=Load()))], orelse=[Return(value=Name(id='false', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        return true
    else:
        return false","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",7032,True
"def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 2) + fib(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 2) + fib(n - 1)","def fibonacci(n):
    a = 1
    b = 1
    if True:
        0
    for i in range(n - 1):
        a, b = b, a + b
    return a",7095,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,536d6075-5a50-4346-89ff-5e21df057756,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",7115,True
"def swap_keys_values(old_dict):
    dict = {v: k for k, v in list(old_dict.items())}
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(old_dict):
    dict = {v: k for k, v in list(old_dict.items())}
    return new_dict","def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",7124,True
"def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(str(v))
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        d[values[i]] = keys[i]
        i = i + 1
    return sorted(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(str(v))
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        d[values[i]] = keys[i]
        i = i + 1
    return sorted(d)","def swap_keys_values(in_dict):
    if True:
        0
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    if True:
        0
    return out_dict",7150,True
"def union(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",7156,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] < 2]
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] < 2]
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",7158,True
"def sumup(n):
    if not n:
        return n
    if n == 1:
        return 1
    return n + sum(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if not n:
        return n
    if n == 1:
        return 1
    return n + sum(n - 1)","def sumup(n):
    if False:
        0
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",7185,True
"def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        if string == letter:
            return i
        i = i + 1
    if letter not in a:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        if string == letter:
            return i
        i = i + 1
    if letter not in a:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    if i == len(str):
        return -1",7241,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    return minimum(a.remove(max(a)))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    return minimum(a.remove(max(a)))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",7246,True
"def remove_zeros(list):
    b = []
    i = 0
    while i < len(a):
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    b = []
    i = 0
    while i < len(a):
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",7254,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), '6', l3.append(l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Constant(value='6'), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), '6', l3.append(l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    if True:
        0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",7260,True
"def index(string, letter, place=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return place
    else:
        place = place + 1
        return index(string[1:], letter, place=place)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,5c105474-42d8-4a95-a311-034a93c693c8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[keyword(arg='x_2', value=Name(id='x_2', ctx=Load()))]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, place=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return place
    else:
        place = place + 1
        return index(string[1:], letter, place=place)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",7266,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
            p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",7277,True
"def reverse_list(l):
    if len(q) != 0:
        temp = q.pop(0)
        reverse(q)
        q.append(temp)
    return q",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='q', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(q) != 0:
        temp = q.pop(0)
        reverse(q)
        q.append(temp)
    return q","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",7282,True
"def selection_sort(a):
    c = 0
    while c < len(a):
        i = c + 1
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    c = 0
    while c < len(a):
        i = c + 1
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",7302,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    else:
        return l[::1], reverse_list(l[::1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=1)), ctx=Load()), Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    else:
        return l[::1], reverse_list(l[::1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",7305,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci((n - 2) * 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), op=Mult(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci((n - 2) * 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",7346,True
"def swap_unique_keys_values(d):
    d = list(set(d))
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = list(set(d))
    return d","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",7352,True
"def swap_unique_keys_values(dic):
    dic = {'a': 4, 'b': 7, 'c': 10, 'd': 7}
    list_of_values = [dic[value] for value in dic]
    unique_dict = {}
    for key in dic:
        if list_of_values.count(dic[key]) == 1:
            unique_dict[dic[key]] = key
    return unique_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dd3b5b53-00cc-42e8-9f77-c46f84f7c7b3,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[Constant(value='a'), Constant(value='b'), Constant(value='c'), Constant(value='d')], values=[Constant(value=4), Constant(value=7), Constant(value=10), Constant(value=7)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    dic = {'a': 4, 'b': 7, 'c': 10, 'd': 7}
    list_of_values = [dic[value] for value in dic]
    unique_dict = {}
    for key in dic:
        if list_of_values.count(dic[key]) == 1:
            unique_dict[dic[key]] = key
    return unique_dict","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",7358,True
"def minimum(l):
    if len(l) == 1:
        return l[1]
    else:
        mnum = minimum(l[1:])
        minn = mnum
        if mnum < minn:
            minn = mnum
        return minn",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[1]
    else:
        mnum = minimum(l[1:])
        minn = mnum
        if mnum < minn:
            minn = mnum
        return minn","def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    else:
        if mylist[0] > mylist[1]:
            mylist.remove(mylist[0])
            return minimum(mylist)
        mylist.remove(mylist[1])
        return minimum(mylist)",7378,True
"def reverse_list(l):
    if not l:
        return []
    return reverse_list(l[1:].append(l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return []
    return reverse_list(l[1:].append(l[0]))","def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",7404,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys[0] in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys[0] in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",7426,True
"def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    sort = sorted(list(newd.items()), key=lambda x: x[1])
    print(sort)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    sort = sorted(list(newd.items()), key=lambda x: x[1])
    print(sort)","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",7452,True
"def reverse_list(l):
    for i in reversed(l):
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    for i in reversed(l):
        return l","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",7486,True
"def reverse_list(l):
    if not l:
        return l
    return l[-1:] + reverse(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return l
    return l[-1:] + reverse(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",7510,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    if letter not in str:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    if letter not in str:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    if i == len(str):
        return -1",7550,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value in list(new.values()):
            del new[key, value]
        elif value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value in list(new.values()):
            del new[key, value]
        elif value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",7586,True
"def union(a, b):
    d = {}
    i = 0
    while i < len(lines):
        d = {a, b}
    return d",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Set(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    d = {}
    i = 0
    while i < len(lines):
        d = {a, b}
    return d","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",7593,True
"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",7602,True
"def reverse_list(a):
    if a == []:
        return []
    else:
        return a",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if a == []:
        return []
    else:
        return a","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",7621,True
"def union(a, b):
    c = a + b
    union = []
    i = 0
    while i < len(c):
        if c[i] not in seen:
            seen[c[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a + b
    union = []
    i = 0
    while i < len(c):
        if c[i] not in seen:
            seen[c[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",7629,True
"def search(ls, val):
    if ls == []:
        return
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return()], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val):
    if ls == []:
        return
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",7638,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append(v, k)
    seen[kv[t[0]]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_8', ctx=Store()), Name(id='x_9', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load()), Name(id='x_8', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_7', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append(v, k)
    seen[kv[t[0]]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",7658,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
        j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
        j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",7687,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    biggest = minimum(a[1:])
    if a[0] > biggest:
        return a[0]
    else:
        return biggest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    biggest = minimum(a[1:])
    if a[0] > biggest:
        return a[0]
    else:
        return biggest","def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",7722,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",7734,True
"def remove_zeros(a):
    i = 0
    while len(a):
        print(len(a) - i)
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while len(a):
        print(len(a) - i)
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",7741,True
"def factorial(n):
    A = 'fact.c'
    with open(A, 'w') as f:
        f.write(s.format(n))
    with open('stdout.txt', 'w+') as f:
        subprocess.run(['gcc', A, '-o', 'out.o'])
        subprocess.run(['./out.o'], stdout=f)
        f.seek(0)
        return int(f.readline())",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c7fa847c-561b-4652-9a01-05f954e6c8df,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='fact.c')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='x_2', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='stdout.txt'), Constant(value='w+')], keywords=[]), optional_vars=Name(id='x_2', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Constant(value='gcc'), Name(id='x_1', ctx=Load()), Constant(value='-o'), Constant(value='out.o')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Constant(value='./out.o')], ctx=Load())], keywords=[keyword(arg='stdout', value=Name(id='x_2', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    A = 'fact.c'
    with open(A, 'w') as f:
        f.write(s.format(n))
    with open('stdout.txt', 'w+') as f:
        subprocess.run(['gcc', A, '-o', 'out.o'])
        subprocess.run(['./out.o'], stdout=f)
        f.seek(0)
        return int(f.readline())","def factorial(n):
    if n < 2:
        if True:
            0
        return 1
    elif False:
        0
    return n * factorial(n - 1)",7750,True
"def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s[key] not in new_dict:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s[key] not in new_dict:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",7774,True
"def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return n
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,e9910cff-d2a2-4310-a748-9ad97a5a964c,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return n
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",7791,True
"def index(str, letter, case):
    if letter in str[i]:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter, case):
    if letter in str[i]:
        return i
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",7797,True
"def index(str, letter):
    for letter in str:
        if letter[i] == str:
            print('1')
        else:
            print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    for letter in str:
        if letter[i] == str:
            print('1')
        else:
            print('-1')","def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    if True:
        return -1",7842,True
"def remove_zeros(list):
    if '0' in list:
        return list.pop('0')
    else:
        return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    if '0' in list:
        return list.pop('0')
    else:
        return list","def remove_zeros(list):
    if True:
        while 0 in list:
            list.remove(0)
    elif False:
        0",7924,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            0
        l3.append(l2[i])
        i += 2
    return l3",7931,True
"def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        if key not in new_dic:
            new_dic[key] = key
    return new_dic",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        if key not in new_dic:
            new_dic[key] = key
    return new_dic","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",7941,True
"def count_letters(s):
    if s == '':
        return count
    else:
        count += 1
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return count
    else:
        count += 1
    return count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",7967,True
"def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                print(i)
            i = i + 1
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                print(i)
            i = i + 1
    else:
        print('-1')","def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",7974,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            n2 = list[i] + list[i - 1]
        else:
            n2 = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e5f35cd7-8337-4a68-bda3-4164a982feae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_num', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            n2 = list[i] + list[i - 1]
        else:
            n2 = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",7983,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high + 1]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high + 1]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8000,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if b[j] not in seen:
            seen[b[j]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if b[j] not in seen:
            seen[b[j]] = True
        j = j + 1
    return seen","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",8014,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 2) + 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 2) + 1","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",8053,True
"def intersection(a, b):
    seen = {}
    i = 0
    while i < len(b):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    i = 0
    while i < len(b):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",8056,True
"def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",8069,True
"def union(a, b):
    i = 0
    while i < len(a):
        c = a.append(b[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        c = a.append(b[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",8086,True
"def index(str, letter, pos):
    if pos in len(str):
        return -1
    elif str[pos] in letter:
        return pos
    elif recursive in str:
        return 1
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='recursive', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos in len(str):
        return -1
    elif str[pos] in letter:
        return pos
    elif recursive in str:
        return 1
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    else:
        0
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",8118,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return mini","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",8157,True
"def fibonacci(n):
    if n == 1:
        return 1
    return n * fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1:
        return 1
    return n * fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",8170,True
"def swap_unique_keys_values(d):
    swap1 = {}
    swap2 = {}
    swapsorted1 = sorted(list(d.items()), reverse=True)
    for k, v in swapsorted1:
        if v not in swap1:
            swap1[v] = k
        else:
            swap1[v] = 'N'
    swapsorted2 = sorted(list(swap1.items()), reverse=True)
    for k, v in ar2:
        if v != 'N':
            swap2[k] = v
    return swap2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='ar2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    swap1 = {}
    swap2 = {}
    swapsorted1 = sorted(list(d.items()), reverse=True)
    for k, v in swapsorted1:
        if v not in swap1:
            swap1[v] = k
        else:
            swap1[v] = 'N'
    swapsorted2 = sorted(list(swap1.items()), reverse=True)
    for k, v in ar2:
        if v != 'N':
            swap2[k] = v
    return swap2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",8193,True
"def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",8196,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        smallest = i
        j = i
        while j < len(a):
            if a[smallest] > a[j]:
                smallest = j
            j = j + 1
        tmp = a[i]
        a[i] = a[smallest]
        a[smallest] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        smallest = i
        j = i
        while j < len(a):
            if a[smallest] > a[j]:
                smallest = j
            j = j + 1
        tmp = a[i]
        a[i] = a[smallest]
        a[smallest] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",8234,True
"def minimum(l):
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return l","def minimum(l):
    return min(l)",8341,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k_v in ds2:
        if v != 'N':
            d3[k] = v
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,df3b8d82-7372-4e43-b692-9ab72c754509,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k_v in ds2:
        if v != 'N':
            d3[k] = v
    return d3","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",8344,True
"def fibonacci(n):
    i = 0
    prev = 0
    curr = 1
    while i < n:
        total = curr + prev
        prev = curr
        curr = total
        i += 1
    return curr",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    prev = 0
    curr = 1
    while i < n:
        total = curr + prev
        prev = curr
        curr = total
        i += 1
    return curr","def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",8374,True
"def search(letter):
    str = input()
    if letter in str:
        return True
    else:
        return false",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Name(id='false', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def search(letter):
    str = input()
    if letter in str:
        return True
    else:
        return false","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",8404,True
"def fibonacci(n):
    print(n - 1 + n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=2))], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    print(n - 1 + n - 2)","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",8431,True
"def swap_unique_keys_values(d):
    d_swap = {}
    d_tmp = {}
    for x in d:
        d_swap[d[x]] = x
    return d_swap",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,71d3efb1-0433-44ad-83f0-224949653177,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d_swap = {}
    d_tmp = {}
    for x in d:
        d_swap[d[x]] = x
    return d_swap","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",8456,True
"def search(word, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
        i = i + 1
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(word, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
        i = i + 1
    return False","def search(str, letter):
    A = False
    if A:
        0
    else:
        0
    if letter in str:
        return True
    else:
        return A",8459,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
        else:
            del new[key]
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
        else:
            del new[key]
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        else:
            del new_dict[value]
    return new_dict",8493,True
"def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",8525,True
"def swap_keys_values(d):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key)):
        new_d[value[i]] = key[i]
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,75fca52d-a61c-4d91-946c-d376c5569767,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key)):
        new_d[value[i]] = key[i]
    return new_d","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",8585,True
"def union(a, b):
    union = a + b
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = a + b
    return union","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",8586,True
"def intersection(a, b):
    d = a and b
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,99d129a4-97af-42ac-a543-23b9157331f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = a and b
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",8598,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",8604,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",8607,True
"def index(str, letter):
    if letter not in str:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return '-1'","def index(s, letter):
    if letter in s:
        return s.index(letter)
    return -1",8612,True
"def swap_keys_values(d):
    keys = []
    values = []
    dic = {}
    for v, k in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    dic = {}
    for v, k in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return d","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        if False:
            0
        else:
            0
        temp = d[keys]
        new_dict[temp] = keys
    return new_dict",8627,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            a.append(c)
            i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            a.append(c)
            i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",8649,True
"def swap_unique_keys_values():
    new_dic = {}
    for key in dic:
        if dic[key] not in new_dic:
            new_dic[dic[key]] = key
        else:
            del new_dic[d[key]]
    return new_dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='dic', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values():
    new_dic = {}
    for key in dic:
        if dic[key] not in new_dic:
            new_dic[dic[key]] = key
        else:
            del new_dic[d[key]]
    return new_dic","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",8686,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[i])
        j += 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[i])
        j += 2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",8741,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(new_values):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_7', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_8', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(new_values):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",8793,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return count + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return count + count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",8845,True
"def index(str, letter):
    pos_letter = 1
    i = 0
    while i < len(str):
        if letter in str:
            pos_letter = i + 1
            i = i + 1
            return pos_letter
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    pos_letter = 1
    i = 0
    while i < len(str):
        if letter in str:
            pos_letter = i + 1
            i = i + 1
            return pos_letter
    else:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    if True:
        return -1",8857,True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",8887,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        print(i + 1)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        print(i + 1)
    else:
        print('-1')","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",8911,True
"def swap_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        new_dict[value] = key
    return new_dictict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='new_dictict', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        new_dict[value] = key
    return new_dictict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",8922,True
"def search(ls, val):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[0:], val)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[0:], val)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",8931,True
"def minimum(l, i=0):
    j = i
    while j < len(l) and l[j] > l[-1]:
        j += 1
    if j < len(l):
        tmp = l[i]
        l[i] = l[j]
        l[j] = tmp
    if j > len(l):
        return l[0]
    return minimum(l, i + 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e9910cff-d2a2-4310-a748-9ad97a5a964c,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, i=0):
    j = i
    while j < len(l) and l[j] > l[-1]:
        j += 1
    if j < len(l):
        tmp = l[i]
        l[i] = l[j]
        l[j] = tmp
    if j > len(l):
        return l[0]
    return minimum(l, i + 1)","def minimum(l, current_min=None):
    if not l:
        return current_min
    if True:
        0
    first = l.pop()
    if current_min == None or first < current_min:
        return minimum(l, first)
    return minimum(l, current_min)",8988,True
"def fibonacci(n):
    i = -1
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        return k
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = -1
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        return k
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",8992,True
"def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            c = a, b
            return c
            i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            c = a, b
            return c
            i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",9001,True
"def minimum(l):
    sorted(l, key=int)
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='int', ctx=Load()))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    sorted(l, key=int)
    return l","def minimum(l):
    return sorted(l)[0]",9016,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    i = 10
    while i < 20:
        new = int(fib[i - 1]) + int(fib[i - 2])
        fib.append(new)
        i += 1
    j = 1
    while j < len(fib):
        if j == n:
            return fib[j]
        j += 1
    if n == 0:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=10)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=20)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    i = 10
    while i < 20:
        new = int(fib[i - 1]) + int(fib[i - 2])
        fib.append(new)
        i += 1
    j = 1
    while j < len(fib):
        if j == n:
            return fib[j]
        j += 1
    if n == 0:
        return 0","def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    if True:
        0
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",9025,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_7', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_8', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",9026,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",9082,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j = j + 1
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",9112,True
"def index(str, letter):
    pos = 0
    if pos == len(str):
        return '-1'
    elif str[pos] == letter:
        return True
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    pos = 0
    if pos == len(str):
        return '-1'
    elif str[pos] == letter:
        return True
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",9158,True
"def swap_keys_values(d):
    for key in d:
        key = tmp
        key = d[key]
        d[key] = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='tmp', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='tmp', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    for key in d:
        key = tmp
        key = d[key]
        d[key] = tmp
    return d","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",9172,True
"def minimum(l):
    mini = 0
    while i < len(l):
        if l[i] < mini:
            mini = l[i]
        i += 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    while i < len(l):
        if l[i] < mini:
            mini = l[i]
        i += 1
    return mini","def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",9182,True
"def index(str, letter):
    if letter in str:
        print(str[0])
    else:
        print(str[-1])",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        print(str[0])
    else:
        print(str[-1])","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",9198,True
"def count_letters(word):
    i = 0
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","def count_letters(word):
    i = 0
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i","def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",9212,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",9232,True
"def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        return d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",9242,True
"def swap_keys_values(dict_descriptor):
    new_dict = {}
    for key, values in list(dict_descriptor.items()):
        new_dict[values] = keys
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,7d02a9ff-65b9-4dbf-909b-9668940c661b,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='keys', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dict_descriptor):
    new_dict = {}
    for key, values in list(dict_descriptor.items()):
        new_dict[values] = keys
    return new_dict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",9251,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split
        i = i + 1
    return l3[::2].split(',')",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split
        i = i + 1
    return l3[::2].split(',')","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",9260,True
"def sumup(n):
    if n == 0:
        return 0
    return n + (n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return n + (n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",9335,True
"def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return n * factorial(n - 1)","def factorial(n):
    if True:
        if n < 2:
            return 1
        elif True:
            0
        return n * factorial(n - 1)",9346,True
"def swap_unique_keys_values(d):
    seen = []
    new = {}
    for key, value in list(d.items()):
        if value not in seen:
            seen.append(value)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = []
    new = {}
    for key, value in list(d.items()):
        if value not in seen:
            seen.append(value)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",9370,True
"def selection_sort(a):
    s = input()
    a = []
    while s != 'end':
        a.append(int(s))
        s = input()
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='end')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    s = input()
    a = []
    while s != 'end':
        a.append(int(s))
        s = input()
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i = i + 1","def selection_sort(a):
    if True:
        0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                if True:
                    p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",9374,True
"def reverse_list(l):
    return reverse_list(l[1:-1]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reverse_list(l[1:-1]).append(l[0])","def reverse_list(l):
    return l[::-1]",9410,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split(',')
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split(',')
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",9419,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    j = 0
    while j < len(b):
        if b[i] not in a:
            c.append(b[i])
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    j = 0
    while j < len(b):
        if b[i] not in a:
            c.append(b[i])
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",9458,True
"def count_letters(s):
    if s == '':
        return 0
    count = count_letters(s[:-1])
    return len(s) + count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    count = count_letters(s[:-1])
    return len(s) + count","def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[:-1]) + 1",9478,True
"def reverse_list(n):
    if len(1) == 0:
        return []
    return (1)[-1] + reverse_list[:1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Constant(value=1), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if len(1) == 0:
        return []
    return (1)[-1] + reverse_list[:1]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",9489,True
"def minimum(l):
    min = None
    if not l:
        return []
    return minimum(l[-1] if l[-1] < min else min)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    min = None
    if not l:
        return []
    return minimum(l[-1] if l[-1] < min else min)","def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",9509,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    list = sorted(list)
    return minimum(list.pop())",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    list = sorted(list)
    return minimum(list.pop())","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",9581,True
"def factorial(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",9595,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = p + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a_tmp = a[p]
        a[p] = a[i]
        a[i] = a_tmp
        i = i + 1
    z = 0
    while z < len(a):
        print(a[z])
        z = z + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = p + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a_tmp = a[p]
        a[p] = a[i]
        a[i] = a_tmp
        i = i + 1
    z = 0
    while z < len(a):
        print(a[z])
        z = z + 1","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        if True:
            0
        i += 1
    return a",9600,True
"def swap_unique_keys_values(d):
    d = set(d)
    d = {k: v for k, v in d}
    inv = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = set(d)
    d = {k: v for k, v in d}
    inv = {v: k for k, v in list(d.items())}
    return d","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",9636,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return
        i += 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,bc728955-e4e8-48d1-9acb-b83b3fd023ba,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return()], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return
        i += 1
    return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",9642,True
"def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        new_dict[value] = d[key]
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        new_dict[value] = d[key]
    return new_dict","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",9646,True
"def reverse_list(a):
    if not a:
        return a
    return str(a[-1]) + reverse_list(str(a[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if not a:
        return a
    return str(a[-1]) + reverse_list(str(a[:-1]))","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",9656,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for wards in bad:
        if wards not in bad:
            end.update(wards)
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for wards in bad:
        if wards not in bad:
            end.update(wards)
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",9704,True
"def sumup(n):
    if n == 1:
        return 0
    sumup = sumup(n - 1)
    return n + sumup",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 0
    sumup = sumup(n - 1)
    return n + sumup","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",9705,True
"def search(str, letter):
    if str == []:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letters)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='letters', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == []:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letters)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",9716,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        else:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='bad', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        else:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",9742,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n < 0:
        return 0
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,05bf8435-64be-48cb-be81-139956827989,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    elif n < 0:
        return 0
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",9746,True
"def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    j = 0
    while i < len(b):
        if not b[j] in un:
            un[b[j]] = True
        j = j + 1
    return un",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    un = {}
    i = 0
    while i < len(a):
        un[a[i]] = True
        i = i + 1
    j = 0
    while i < len(b):
        if not b[j] in un:
            un[b[j]] = True
        j = j + 1
    return un","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",9768,True
"def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a[1:]).append(a[0])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",9788,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
            list.append(new_num)
        i = 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
            list.append(new_num)
        i = 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",9818,True
"def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return n * sumup(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,e6a8cd93-4b6e-49db-8b16-a473b45b9a4a,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return n * sumup(n - 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",9823,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return a[0].append(reverse_list(a[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return a[0].append(reverse_list(a[1:]))","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",9857,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,12d00542-0a26-4a35-a142-ccd508484c14,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",9868,True
"def merge_lists(l1, l2):
    l3 = l2[::2] + l1[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l2[::2] + l1[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",9939,True
"def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",9959,True
"def remove_zeros(list):
    i = 0
    if list[i] == 0:
        del list[i]
    i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    if list[i] == 0:
        del list[i]
    i = i + 1
    return list","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",9986,True
"def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'","def index(str, letter, pos):
    if True:
        if pos == len(str):
            return -1
        elif str[pos] == letter:
            return pos
        else:
            return index(str, letter, pos + 1)
    else:
        0",10013,True
"def maximum(l):
    sorted(l)
    return l(len(l) - 1)
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    sorted(l)
    return l(len(l) - 1)
    return maximum(l)","def maximum(l):
    return sorted(l)[len(l) - 1]",10017,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            a[j] = tmp
            a[p] = a[j]
            tmp = a[p]
        j = j + 1
        a[j] = tmp
        a[p] = a[j]
        tmp = a[p]
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            a[j] = tmp
            a[p] = a[j]
            tmp = a[p]
        j = j + 1
        a[j] = tmp
        a[p] = a[j]
        tmp = a[p]
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",10042,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        return minimum(a[:-1])
    else:
        return minimum(a[:-2] + a[-1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        return minimum(a[:-1])
    else:
        return minimum(a[:-2] + a[-1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",10082,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    else:
        i = 0
        for c in s[:-1]:
            total += 1
            i += 1
            s = s[i:-1]
        return count_letters(s) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load()), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    else:
        i = 0
        for c in s[:-1]:
            total += 1
            i += 1
            s = s[i:-1]
        return count_letters(s) + 1","def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter",10113,True
"def search(ls, letter):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, letter):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",10160,True
"def count_letters(word):
    if word == '':
        return 0
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","def count_letters(word):
    if word == '':
        return 0
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i","def count_letters(item, length=0):
    if True:
        try:
            item[0]
        except IndexError:
            return length
        item = item[1:]
        length += 1
        return count_letters(item, length)",10188,True
"def index(str, letter):
    if letter in str:
        return str[int(letter)]
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str[int(letter)]
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",10192,True
"def count_letters(s):
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count += 1
    if length == 0:
        return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count += 1
    if length == 0:
        return count","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",10221,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a)]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a)]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",10234,True
"def count_letters(s):
    count = 0
    for x in s:
        count += 1
        return count_letters(s[1:])
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    for x in s:
        count += 1
        return count_letters(s[1:])
    return count","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",10252,True
"def reverse_list(l):
    if len(l) == 0:
        return reverse_list.m
    reverse_list.m.append(l.pop())
    try:
        return reverse_list(l)
    finally:
        reverse_list.m = []",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='m', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='m', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[])), Try(body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='reverse_list', ctx=Load()), attr='m', ctx=Store())], value=List(elts=[], ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return reverse_list.m
    reverse_list.m.append(l.pop())
    try:
        return reverse_list(l)
    finally:
        reverse_list.m = []",,10289,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        dictionary[d[key]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        dictionary[d[key]] = keys
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",10294,True
"def swap_keys_values(s):
    dictionary = {}
    for i in s:
        dictionary[s[i]] = i
        return dictionary",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(s):
    dictionary = {}
    for i in s:
        dictionary[s[i]] = i
        return dictionary","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",10312,True
"def selection_sort(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",10318,True
"def count_letters(s):
    count = 0
    while s[i] != '':
        count += 1
        return count_letters(s)
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    while s[i] != '':
        count += 1
        return count_letters(s)
    return count","def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])",10341,True
"def search(string, letter):
    if string == []:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string == []:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        search(string[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",10349,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[j] = tmp
        a[p] = a[j]
        tmp = a[p]
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[j] = tmp
        a[p] = a[j]
        tmp = a[p]
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",10406,True
"def reverse_list(l):
    if reverse_list.count == len(l) // 2:
        return l
    x = l.pop(0)
    l.append(x)
    reverse_list.count += 1
    try:
        print(reverse_list.count)
        return reverse_list(l)
    finally:
        reverse_list.count = 0",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Store()), op=Add(), value=Constant(value=1)), Try(body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Store())], value=Constant(value=0))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if reverse_list.count == len(l) // 2:
        return l
    x = l.pop(0)
    l.append(x)
    reverse_list.count += 1
    try:
        print(reverse_list.count)
        return reverse_list(l)
    finally:
        reverse_list.count = 0",,10420,False
"def sumup(n):
    if n == 1:
        return n
    return n + (n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return n
    return n + (n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",10439,True
"def minimum(l, min):
    if not l:
        return []
    return minimum(l[1:], l[0] if l[0] < val else val)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='val', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='val', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, min):
    if not l:
        return []
    return minimum(l[1:], l[0] if l[0] < val else val)","def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",10456,True
"def merge_lists(l1, l2):
    i = 0
    l3 = l1[i] + 1 + (l2[i] + 1)
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), op=Add(), right=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = l1[i] + 1 + (l2[i] + 1)
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",10470,True
"def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvlaues] = oldkeys
    return swappeddict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='oldvlaues', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvlaues] = oldkeys
    return swappeddict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",10474,True
"def fibonacci(n, older=0, old=1):
    if n == 0:
        return old
    return fibonacci(n - 1, old, older + old)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n, older=0, old=1):
    if n == 0:
        return old
    return fibonacci(n - 1, old, older + old)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",10481,True
"def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[key] = d[key]
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[key] = d[key]
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",10498,True
"def count_letters(n, word):
    if len(word) == 0:
        return 0
    if word[0] == n:
        count = 1
    else:
        return count + count_letters(n, word[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(n, word):
    if len(word) == 0:
        return 0
    if word[0] == n:
        count = 1
    else:
        return count + count_letters(n, word[1:])","def count_letters(s):
    if len(s) == 0:
        return 0
    if len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",10538,True
"def swap_unique_keys_values(d):
    d = list(set(d))
    d = {k: v for k, v in d}
    inv = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = list(set(d))
    d = {k: v for k, v in d}
    inv = {v: k for k, v in list(d.items())}
    return d","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",10609,True
"def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                print(i)
            i = i + 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        i = 0
        while i < len(str):
            if letter == str[i]:
                print(i)
            i = i + 1
    else:
        return '-1'","def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",10612,True
"def swap_unique_keys_values(x):
    sorx = sorted(x.items, reverse=True)
    x1 = {}
    x2 = {}
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    sorx = sorted(x.items, reverse=True)
    x1 = {}
    x2 = {}
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",10665,True
"def index(str, letter):
    if letter in str:
        return str[letter]
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str[letter]
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",10672,True
"def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return int(n(n + 1) / 2)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return int(n(n + 1) / 2)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",10683,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        elif not y[i] in check:
            answer.append(y[i])
            check[y[i]] = True
        i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        elif not y[i] in check:
            answer.append(y[i])
            check[y[i]] = True
        i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",10684,True
"def swap_keys_values(dic):
    d = []
    for key in dic:
        value = d[key]
        d[value] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    d = []
    for key in dic:
        value = d[key]
        d[value] = key
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",10688,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
            i = i + 1
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
            i = i + 1
        else:
            return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",10716,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union] = True
        i = i + 1
    dups = sorted(list(set(dups)))
    return '/n', unionorg",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Constant(value='/n'), Name(id='x_4', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union] = True
        i = i + 1
    dups = sorted(list(set(dups)))
    return '/n', unionorg","def union(a, b):
    a = a + b
    seen = {}
    c = []
    if True:
        0
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",10837,True
"def union(a, b):
    i = 0
    c = []
    while i < len(c):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(c):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",10847,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]) + l[0]","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",10848,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k in d:
        if k not in new_d:
            new_d[k] = d[k]
    return new_d","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",10937,True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + list(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,05bf8435-64be-48cb-be81-139956827989,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + list(l[0])","def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",10947,True
"def swap_keys_values(d):
    d_2 = []
    for entry in list(d.items()):
        u = entry[::-1]
        for k, v in u:
            d_2[k] = v
    return d_2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d_2 = []
    for entry in list(d.items()):
        u = entry[::-1]
        for k, v in u:
            d_2[k] = v
    return d_2","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if True:
            0
        else:
            0
        new_dict[temp] = keys
    return new_dict",10972,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while i < len(a):
        s[a[i]] = True
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while i < len(a):
        s[a[i]] = True
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",10977,True
"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=[]):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",10994,True
"def swap_unique_keys_values():
    d = {}
    d2 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d:
            d[v] = k
        else:
            d[v] = 'N'
    ds2 = sorted(list(d.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d2[k] = v
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values():
    d = {}
    d2 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d:
            d[v] = k
        else:
            d[v] = 'N'
    ds2 = sorted(list(d.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d2[k] = v
    return d2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",11026,True
"def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = d[key]
    return dic",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = d[key]
    return dic","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",11032,True
"def remove_zeros(list):
    i = 0
    if str(list[i]) == '0':
        del list[i]
    i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='0')]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    if str(list[i]) == '0':
        del list[i]
    i = i + 1
    return list","def remove_zeros(list):
    while True:
        if not 0 in list:
            break
        else:
            list.remove(0)",11067,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values) and values[i] not in values:
        dic[values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values) and values[i] not in values:
        dic[values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    new_d = {}
    if len(d) > 0:
        for key in d:
            if list(d.values()).count(d[key]) == 1:
                new_d[d[key]] = key
    return new_d",11131,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[j] = a[j], a[i]
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[j] = a[j], a[i]
        i += 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",11142,True
"def factorial(n):
    if n == 0:
        return 1
    fact_of_n = factorial(n - 1)
    return n * (n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    fact_of_n = factorial(n - 1)
    return n * (n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",11173,True
"def intersection(a, b):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] in c:
            d.append(b[p])
        p = p + 1
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='c', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] in c:
            d.append(b[p])
        p = p + 1
    return d","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",11212,True
"def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(d[key])
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(d[key])
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",11220,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    if True:
        for i in a:
            if a[i] not in lis:
                dir[a[i]] = i
        return dir",11233,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] > q:
            high = mid
            assert q <= a[high]
        else:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] > q:
            high = mid
            assert q <= a[high]
        else:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11280,True
"def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str) - 1:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str) - 1:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",11325,True
"def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position = position + 1
            return position
        else:
            return str + '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,4490d043-a9e0-48aa-a62c-ddcc67ed7fba,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value='-1')))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position = position + 1
            return position
        else:
            return str + '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",11330,True
"def swap_keys_values(dic):
    d = []
    for key in dic:
        value = dic[key]
        d[value] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    d = []
    for key in dic:
        value = dic[key]
        d[value] = key
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",11362,True
"def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l[0]).pop",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l[0]).pop","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",11374,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        if True:
            0
        i += 1
    return a",11397,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    prev = s[n]
    curr = s[n + 1]
    x = []
    while curr < len(s):
        if curr != prev:
            x.append(prev)
        n = n + 1
    return x",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_7', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_7', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    prev = s[n]
    curr = s[n + 1]
    x = []
    while curr < len(s):
        if curr != prev:
            x.append(prev)
        n = n + 1
    return x","def intersection(a, b):
    A = True
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            seen[a[i]] = A
            i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = A
        i = i + 1
    return c",11430,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:3]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=3)), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:3]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",11438,True
"def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return new.append(reverse_list[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='new', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return new.append(reverse_list[:-1])","def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",11466,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return answer",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return answer","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",11485,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",11496,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            list.remove(list[i])
    i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            list.remove(list[i])
    i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",11497,True
"def reverse_list(a):
    if a == []:
        return []
    else:
        b = [reverse_list(a[1:])]
        return b.append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if a == []:
        return []
    else:
        b = [reverse_list(a[1:])]
        return b.append(a[0])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",11504,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for k, v in list(d.items()):
        if v not in new_dict:
            new_dict = k
        else:
            del new_dict[v]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,825987dd-47a8-4023-b124-16b318935de3,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for k, v in list(d.items()):
        if v not in new_dict:
            new_dict = k
        else:
            del new_dict[v]
    return new_dict","def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        else:
            del new_dict[value]
    return new_dict",11536,True
"def remove_zeros(x):
    if x[i] == 0:
        del x[i]
    if x[i] == 0:
        del x[i]",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,a93c9eeb-104a-4436-bd9a-c2e65d311d9e,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(x):
    if x[i] == 0:
        del x[i]
    if x[i] == 0:
        del x[i]","def remove_zeros(list):
    if True:
        0
    if False:
        0
    while 0 in list:
        list.remove(0)",11578,True
"def merge_lists(l1, l2):
    l3 = l1 + l2[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1 + l2[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",11587,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if a[-2] < a[-1]:
        return minimum(a[:-1])
    else:
        return minimum(a[:-2] + a[-1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if a[-2] < a[-1]:
        return minimum(a[:-1])
    else:
        return minimum(a[:-2] + a[-1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",11625,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",11641,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split()
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split()
        i = i + 1
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split()
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split()
        i = i + 1
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",11690,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s.lower():
            if c.islower():
                t = s[:i]
                t += '1'
                t += s[i:]
                s = t
            i += 1
        if not s.islower():
            total = 0
            for c in s:
                total += 1
            return total
        else:
            return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='islower', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Name(id='x_2', ctx=Load())), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value='1')), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='islower', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s.lower():
            if c.islower():
                t = s[:i]
                t += '1'
                t += s[i:]
                s = t
            i += 1
        if not s.islower():
            total = 0
            for c in s:
                total += 1
            return total
        else:
            return count_letters(s)","def count_letters(s):
    A = False
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    if A:
        if A:
            0
        if True:
            0
    return counter",11706,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        c.append(a[i])
        if b[i] not in c:
            c.append(b[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        c.append(a[i])
        if b[i] not in c:
            c.append(b[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",11820,True
"def fibonacci(n):
    i = 0
    original = n
    a = [0, 1]
    if n == 0:
        return a[original]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_0', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    original = n
    a = [0, 1]
    if n == 0:
        return a[original]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11835,True
"def append2list(l1, l2=None):
    try:
        if l2 == None:
            l2 = []
            for i in l1:
                l2.append(i)
            return l2
        else:
            return l1
    except ValueError:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    try:
        if l2 == None:
            l2 = []
            for i in l1:
                l2.append(i)
            return l2
        else:
            return l1
    except ValueError:
        return l1","def append2list(l1, l2=[]):
    if l2:
        if False:
            0
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",11858,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    f, m = l[0], maximum(l)
    if f > m:
        return f
    else:
        return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    f, m = l[0], maximum(l)
    if f > m:
        return f
    else:
        return m","def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",11876,True
"def fibonacci(n):
    time = 0
    if n <= 1:
        return n
    else:
        return fibonnaci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonnaci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    time = 0
    if n <= 1:
        return n
    else:
        return fibonnaci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11879,True
"def remove_zeros(a):
    i = 0
    while i < len(a):
        if a[i] == 0:
            del a[i]
        if a[i] == 0:
            del a[i]
        i = i + 1
        return a",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        if a[i] == 0:
            del a[i]
        if a[i] == 0:
            del a[i]
        i = i + 1
        return a","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        if True:
            list.remove(0)",11911,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.append(a[0])
    return minmum(a[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minmum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.append(a[0])
    return minmum(a[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",11947,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1[i])
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1[i])
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",11949,True
"def swap_keys_values(d):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key) - 1):
        new_d[key[i]] = value[i]
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,75fca52d-a61c-4d91-946c-d376c5569767,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key) - 1):
        new_d[key[i]] = value[i]
    return new_d","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",11974,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        j = l.pop(0)
        return reverse_list(l).append(j)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        j = l.pop(0)
        return reverse_list(l).append(j)","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",12106,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    unique_values = list(set(d.values()))
    for key in unique_values:
        new_d[key] = d[key]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    unique_values = list(set(d.values()))
    for key in unique_values:
        new_d[key] = d[key]
    return new_d","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",12143,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        else:
            return '-1'
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        else:
            return '-1'
        i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            0
        i = i + 1
    return -1",12172,True
"def reverse_list(l):
    if len(l) == 0:
        return 0
    else:
        return l[-1] + count_letters(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return 0
    else:
        return l[-1] + count_letters(l[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",12174,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",12213,True
"def index(str, letter):
    position = 0
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return pos
    else:
        return index(str, letter, position + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='pos', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    position = 0
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return pos
    else:
        return index(str, letter, position + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",12230,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",12239,True
"def minimum(l):
    l = l.sort()
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = l.sort()
    return l","def minimum(l):
    l.sort()
    return l[0]",12251,True
"def selection_sort(a):
    j = 0
    while j < len(a):
        p = j
        i = j + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        tmp = a[j]
        a[j] = a[p]
        a[p] = tmp
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05bf8435-64be-48cb-be81-139956827989,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    j = 0
    while j < len(a):
        p = j
        i = j + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        tmp = a[j]
        a[j] = a[p]
        a[p] = tmp
        j = j + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",12264,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    elif l[0] < l[1]:
        l.remove(l[0])
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    elif l[0] < l[1]:
        l.remove(l[0])
    return minimum(l)","def minimum(a):
    if len(a) == 1:
        return a[-1]
    if a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",12282,True
"def minimum(l):
    l = l.sort
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load())), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = l.sort
    return l[0]","def minimum(l):
    l.sort()
    return l[0]",12304,True
"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",12325,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        answer.append(x[i])
        check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return answer",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        answer.append(x[i])
        check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return answer","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",12338,True
"def index(str, letter):
    if letter in str:
        return letter
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return letter
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",12339,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    return '/n', unionorg",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Tuple(elts=[Constant(value='/n'), Name(id='x_4', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    return '/n', unionorg","def union(a, b):
    a = a + b
    seen = {}
    c = []
    if True:
        0
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",12340,True
"def minimum(n):
    print(min(n))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(n):
    print(min(n))","def minimum(l):
    return min(l)",12366,True
"def merge_lists(l1, l2):
    l3 = []
    for i in l1:
        l3 = l3 + [i[::l2]]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Slice(step=Name(id='x_1', ctx=Load())), ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for i in l1:
        l3 = l3 + [i[::l2]]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",12370,True
"def union(a, b):
    i = 0
    c = []
    while i < len(6):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=6)], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(6):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",12372,True
"def reverse_list(n):
    if n == []:
        return 0
    return reverse_list(n.reverse())",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if n == []:
        return 0
    return reverse_list(n.reverse())","def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",12443,True
"def reverse_list(a, x=0):
    if len(a) == 1:
        return a
    f = reverse_list[:-1]
    x.append(f)
    return x",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a, x=0):
    if len(a) == 1:
        return a
    f = reverse_list[:-1]
    x.append(f)
    return x","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",12507,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        small = a[0]
        if a[1] < small:
            small = a[1]
        else:
            a.remove(a[0])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        small = a[0]
        if a[1] < small:
            small = a[1]
        else:
            a.remove(a[0])
    return minimum(a)","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",12511,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12543,True
"def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",12548,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",12584,True
"def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for key in unique_values:
        new_d[key] = d[key]
    return unique_values",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for key in unique_values:
        new_d[key] = d[key]
    return unique_values","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",12600,True
"def search(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
    i = i + 1
    return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
    i = i + 1
    return False","def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",12632,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    return maximum(a.remove(min(a)))",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    return maximum(a.remove(min(a)))","def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",12634,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < a[mid]:
            low = mid
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < a[mid]:
            low = mid
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12648,True
"def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '+1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='+1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '+1'","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",12654,True
"def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str):
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str):
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",12709,True
"def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    newd = sorted(list(newd.items()), key=lambda x: x[1])
    return newd",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    newd = sorted(list(newd.items()), key=lambda x: x[1])
    return newd","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",12720,True
"def swap_keys_values(d):
    d_2 = []
    for entry in list(d.items()):
        u = entry[::-1]
        for k, v in u.split(','):
            d_2[k] = v
    return d_2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d_2 = []
    for entry in list(d.items()):
        u = entry[::-1]
        for k, v in u.split(','):
            d_2[k] = v
    return d_2","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if True:
            0
        elif False:
            0
        new_dict[temp] = keys
    return new_dict",12754,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    mini = minimun(a[:-1])
    if a[-1] < mini:
        return a[-1]
    else:
        return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,70a531fa-76d5-4949-ae20-9c7e6db61af8,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimun', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    mini = minimun(a[:-1])
    if a[-1] < mini:
        return a[-1]
    else:
        return mini","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",12764,True
"def reverse_list(lst):
    if lst == []:
        return []
    return lst[-1] + reverse_list(lst[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(lst):
    if lst == []:
        return []
    return lst[-1] + reverse_list(lst[:-1])","def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",12787,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12800,True
"def swap_unique_keys_values(d):
    nd = {}
    dset = set(d.items())
    d = dict(dset)
    for k, v in list(d.items()):
        nd[v] = k
    return nd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    nd = {}
    dset = set(d.items())
    d = dict(dset)
    for k, v in list(d.items()):
        nd[v] = k
    return nd","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",12803,True
"def swap_unique_keys_values(dic):
    new = {}
    new = {val: key for key, val in list(dic.items())}
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='val', ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    new = {}
    new = {val: key for key, val in list(dic.items())}
    return new","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",12822,True
"def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1:]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1:]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",12863,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    pureunion = []
    for union in sorted(unionorg):
        if unionorg[union]:
            pureunion.append(union)
    return pureunion",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), body=[If(test=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    pureunion = []
    for union in sorted(unionorg):
        if unionorg[union]:
            pureunion.append(union)
    return pureunion","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        else:
            0
        if True:
            p = p + 1
    return c",12909,True
"def search(ls, val):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val):
    if ls == []:
        return False
    elif ls[0] == val:
        return True
    else:
        return search(ls[1:], val)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",12925,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while k < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while k < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",12943,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
    j = 0
    while j < len(l2):
        if j % 2 == 0:
            l3.append(l2[i])
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
    j = 0
    while j < len(l2):
        if j % 2 == 0:
            l3.append(l2[i])
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",12985,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
    j = j + 1
    return p",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
    j = j + 1
    return p","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",12992,True
"def remove_zeros(x):
    while i < len(x):
        if x[i] == 0:
            del x[i]
        if x[i] == 0:
            del x[i]
    i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,a93c9eeb-104a-4436-bd9a-c2e65d311d9e,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def remove_zeros(x):
    while i < len(x):
        if x[i] == 0:
            del x[i]
        if x[i] == 0:
            del x[i]
    i = i + 1","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        if True:
            list.remove(0)",12998,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    union = sorted(list(dict(union)))
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    union = sorted(list(dict(union)))
    return union","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",13018,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return minimum(l[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",13046,True
"def merge_lists(l1, l2):
    l3 == l1[::2] + l2[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='l3', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 == l1[::2] + l2[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",13048,True
"def swap_unique_keys_values(dictionary_descriptor):
    new_dictionary = {}
    addthese = set()
    for keys, values in list(dictionary_descriptor.items()):
        addthese.update(values, keys)
        new_dictionary[addthese[values]] = addthese[keys]
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dictionary_descriptor):
    new_dictionary = {}
    addthese = set()
    for keys, values in list(dictionary_descriptor.items()):
        addthese.update(values, keys)
        new_dictionary[addthese[values]] = addthese[keys]
    return new_dictionary","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",13099,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m1 = minimum(l[0:len(l) / 2])
        m2 = minimum(l[len(l) / 2:])
        if m1 < m2:
            return m1
        else:
            return m2",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m1 = minimum(l[0:len(l) / 2])
        m2 = minimum(l[len(l) / 2:])
        if m1 < m2:
            return m1
        else:
            return m2","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",13115,True
"def reverse_list(l):
    if len(l) == 0:
        return 1
    new = reverse_list(l[1:]) + l[:1]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return 1
    new = reverse_list(l[1:]) + l[:1]
    return new","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",13124,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + (fibonacci(n - 1) + fibonacci(n - 2))",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + (fibonacci(n - 1) + fibonacci(n - 2))","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",13131,True
"def fibonacci(nth):
    if n == 1 or n == 0:
        return 1
    return n - 1 + power(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if n == 1 or n == 0:
        return 1
    return n - 1 + power(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",13133,True
"def sumup(n):
    if n == 0:
        return n
    return n + sum(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return n
    return n + sum(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",13203,True
"def index(str):
    if letter in str[i]:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str):
    if letter in str[i]:
        return i
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",13226,True
"def minimum(l):
    if not l:
        return []
    return minimum(min(l))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if not l:
        return []
    return minimum(min(l))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",13228,True
"def search(str, letter):
    for letter in str:
        if letter in str:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    for letter in str:
        if letter in str:
            return True
        else:
            return False","def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",13253,True
"def remove_zeros(list):
    i = 0
    while i < len(a):
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(a):
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",13269,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",13296,True
"def index(str, letter, pos):
    for letter in str:
        if str[pos] == letter:
            print('1')
        else:
            print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    for letter in str:
        if str[pos] == letter:
            print('1')
        else:
            print('-1')","def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    if True:
        return -1",13316,True
"def sumup(x):
    x = x + sumup(x)
    return x",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sumup(x):
    x = x + sumup(x)
    return x","def sumup(n):
    if n < 2:
        if False:
            0
        return n
    else:
        0
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",13319,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1
    i = i + 1
    while i < len(l2):
        return l2
    i = i + 1",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1
    i = i + 1
    while i < len(l2):
        return l2
    i = i + 1","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",13328,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(l[0]))","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",13370,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return s",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return s","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",13397,True
"def merge_lists(l1, l2):
    i = 1
    while i < len(l1):
        del l1[i]
    i = i + 1
    j = 1
    while i < len(l2):
        del l2[j]
    j = j + 1
    return l1 + l2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 1
    while i < len(l1):
        del l1[i]
    i = i + 1
    j = 1
    while i < len(l2):
        del l2[j]
    j = j + 1
    return l1 + l2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",13420,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if key in unique:
            unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if key in unique:
            unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",13427,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return True
        else:
            return False
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7ee35977-e007-4398-99c0-ea42a300ff3c,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return True
        else:
            return False
        i += 1","def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",13445,True
"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    list(d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    list(d.items())","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",13449,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(s[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(s[0]))","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",13451,True
"def union(f1con, f2con):
    d1 = {}
    union = []
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            union.append(line)
        i = i + 1
    union = sorted(list(set(union)))
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    d1 = {}
    union = []
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            union.append(line)
        i = i + 1
    union = sorted(list(set(union)))
    return union","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",13471,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,553c9a10-8e3d-401b-8100-2094287197ed,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",13472,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    dups = sorted(list(set(dups)))
    return '/n', unionorg",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Constant(value='/n'), Name(id='x_4', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union[i]] = True
        i = i + 1
    dups = sorted(list(set(dups)))
    return '/n', unionorg","def union(a, b):
    a = a + b
    seen = {}
    c = []
    if True:
        0
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",13489,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13509,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    i = 0
    while i < len(str):
        if str[i] == letter2:
            return i
        i += 1
    return '-1'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,54e3b0c4-223a-427c-9155-d6954330319d,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='letter2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    i = 0
    while i < len(str):
        if str[i] == letter2:
            return i
        i += 1
    return '-1'","def search(str, letter):
    A = True
    if A:
        0
    if A:
        0
    if letter in str:
        return A
    else:
        return False",13524,True
"def reverse_list(i=[]):
    i = 0
    new_list = []
    while i < len(1):
        new_list.append((1)[len(1) - i - 1])
        i = i + 1
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,794362b7-cbcd-4bea-bafb-7967c266e248,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Constant(value=1), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(i=[]):
    i = 0
    new_list = []
    while i < len(1):
        new_list.append((1)[len(1) - i - 1])
        i = i + 1
    return new_list","def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",13541,True
"def sumup(n):
    if n == 0:
        return 1
    sum_to_n_1 = sumup(n - 1)
    return n + sum_to_n_1",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 1
    sum_to_n_1 = sumup(n - 1)
    return n + sum_to_n_1","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",13558,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
            i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
            p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
            i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
            p = p + 1
    return c","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",13566,True
"def selection_sort(a):
    i = 0
    p = 1
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = 1
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",13576,True
"def index(str, letter):
    i = 0
    while str[i - 1] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i - 1] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",13585,True
"def reverse_list(a):
    if a == []:
        return []
    elif len(a) == 1:
        return a
    else:
        b = [reverse_list(a[1:])]
        return b.append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if a == []:
        return []
    elif len(a) == 1:
        return a
    else:
        b = [reverse_list(a[1:])]
        return b.append(a[0])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",13602,True
"def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
        j = 0
        while j < len(b):
            if not b[j] in dic:
                dic[b[j]] = True
            j = j + 1
    return dic",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
        j = 0
        while j < len(b):
            if not b[j] in dic:
                dic[b[j]] = True
            j = j + 1
    return dic","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen and False:
            0
        i = i + 1
    return c",13634,False
"def union(a, b):
    i = 0
    c = []
    while i < len(a) + len(b):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a) + len(b):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",13636,True
"def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    d = []
    for k in list(inv.keys()):
        d.append(k)
    for k in d:
        if d.count(k) > 1:
            del inv[k]
            del inv[k]
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    d = []
    for k in list(inv.keys()):
        d.append(k)
    for k in d:
        if d.count(k) > 1:
            del inv[k]
            del inv[k]
    return inv","def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",13657,True
"def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(a[1:])
    if a[0] < l:
        return l[0]
    else:
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(a[1:])
    if a[0] < l:
        return l[0]
    else:
        return l","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",13662,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",13669,True
"def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    print(a)
    for k, v in list(dict.items()):
        if a.count('v') == 1:
            dict1[k] = v
    print(dict1)
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    print(a)
    for k, v in list(dict.items()):
        if a.count('v') == 1:
            dict1[k] = v
    print(dict1)
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",13704,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            seen[b[i]] = True
            i = i + 1
    for list in seen:
        print(list)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            seen[b[i]] = True
            i = i + 1
    for list in seen:
        print(list)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            if True:
                c.append(b[p])
        p = p + 1
    if True:
        0
    return c",13706,True
"def intersection(a, b):
    c = []
    c = a + b
    seen = {}
    i = 0
    while i < len(c):
        if lines(c) in seen:
            sys.stdout.write(lines[c])
        i = i + 1",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='lines', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    c = []
    c = a + b
    seen = {}
    i = 0
    while i < len(c):
        if lines(c) in seen:
            sys.stdout.write(lines[c])
        i = i + 1","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",13711,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l) + list(l.pop(0))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l) + list(l.pop(0))","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",13739,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if d[key] not in new_d:
            new_d[d[key]] = key
        else:
            del new_d[key]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if d[key] not in new_d:
            new_d[d[key]] = key
        else:
            del new_d[key]
    return new_d","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",13751,True
"def index(str, letter):
    if letter in str:
        return int(letter[i])
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return int(letter[i])
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",13770,True
"def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        print(total)
    elif n == 1:
        total = n1
        print(total)
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        return total",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        print(total)
    elif n == 1:
        total = n1
        print(total)
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        return total","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",13783,True
"def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        return len(str)
    else:
        return index(str[:len(str)], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        return len(str)
    else:
        return index(str[:len(str)], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",13801,True
"def index(str, recursive, letter):
    if letter in str:
        return 1
    elif letter in str:
        return -1
    elif recursive in str:
        return 1
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])])])], decorator_list=[])], type_ignores=[])","def index(str, recursive, letter):
    if letter in str:
        return 1
    elif letter in str:
        return -1
    elif recursive in str:
        return 1
    else:
        return -1","def index(str, letter, pos):
    if False:
        0
    elif True:
        0
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",13851,True
"def fibonacci(n):
    n = n - 1 + n - 2
    print(n)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Name(id='x_0', ctx=Load())), op=Sub(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    n = n - 1 + n - 2
    print(n)","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",13874,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        small = a[0]
        if a[1] < small:
            small = a[i]
            a.remove(a[0])
        else:
            a.remove(a[1])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        small = a[0]
        if a[1] < small:
            small = a[i]
            a.remove(a[0])
        else:
            a.remove(a[1])
    return minimum(a)","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",13936,True
"def search(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])
        i = i + 1
    if letter not in a:
        return 'False'
    else:
        return 'True'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[Return(value=Constant(value='True'))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])
        i = i + 1
    if letter not in a:
        return 'False'
    else:
        return 'True'","def search(str, letter):
    i = 0
    if True:
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",13940,True
"def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list(l[:-1]))","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",13942,True
"def swap_keys_values(s):
    dic = {}
    for key, value in s.item():
        dic[value] = key
    return dic",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(s):
    dic = {}
    for key, value in s.item():
        dic[value] = key
    return dic","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",13994,True
"def remove_zeros(a):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",14038,True
"def swap_keys_values(d):
    a = []
    for entry in d:
        u = entry[::-1]
        a.append(u)
    return a",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    a = []
    for entry in d:
        u = entry[::-1]
        a.append(u)
    return a","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",14051,True
"def swap_unique_keys_values(d):
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",14056,True
"def sumup(n):
    if n == 1:
        return 1
    return n + sumup(n + 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return n + sumup(n + 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",14062,True
"def minimum(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q","def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",14069,True
"def maximum(l):
    l = sorted(l)
    if l[len(l) - 1] > l[len(l) - 2]:
        return l[0]
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    l = sorted(l)
    if l[len(l) - 1] > l[len(l) - 2]:
        return l[0]
    return maximum(l)","def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",14087,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14120,True
"def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(s[:1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(s[:1])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",14145,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    count += 1
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    count += 1
    return count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",14216,True
"def factorial(n):
    if n == 0:
        return n + 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return n + 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",14240,True
"def merge_lists(l1, l2):
    l3 = l1 + l2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1 + l2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",14244,True
"def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1) + factorial(n - 2)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1) + factorial(n - 2)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",14249,True
"def intersection(a, b):
    int_seen = {}
    k = 0
    while k < len(a):
        if a[k] in b:
            int_seen[a[k]] = True
    k = k + 1
    return int_seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    int_seen = {}
    k = 0
    while k < len(a):
        if a[k] in b:
            int_seen[a[k]] = True
    k = k + 1
    return int_seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",14285,True
"def fibonacci(n):
    a, b = 0, 1
    while b < n:
        a, b = b, a + b
        return b",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a, b = 0, 1
    while b < n:
        a, b = b, a + b
        return b","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",14301,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return pos_letter",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='pos_letter', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return pos_letter","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",14318,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",14347,True
"def union(a, b):
    a = []
    b = []
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = []
    b = []
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",14399,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i <= len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1[i])
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i <= len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1[i])
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",14438,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i[0]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i[0]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",14508,True
"def fibonacci(n):
    if any([n == 0, n == 1]):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[List(elts=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if any([n == 0, n == 1]):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14519,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",14532,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[v]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[v]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",14555,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, None)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, None)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",14561,False
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union] = True
        i = i + 1
    for union in sorted(unionorg):
        if unionorg[union]:
            print(union)
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), body=[If(test=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    unionorg = {}
    i = 0
    while i != len(union):
        unionorg[union] = True
        i = i + 1
    for union in sorted(unionorg):
        if unionorg[union]:
            print(union)
    return union","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c and True:
            0
        p = p + 1
    return c",14580,False
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while i < len(a):
        seen[a[i]] = True
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while i < len(a):
        seen[a[i]] = True
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",14597,True
"def minimum(l):
    l = sorted(l)
    if l[0] < l[1]:
        return l[0]
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = sorted(l)
    if l[0] < l[1]:
        return l[0]
    return minimum(l)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",14607,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        l = maximum(a[1:])
    if a[0] < l:
        return a[0]
    else:
        return l",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        l = maximum(a[1:])
    if a[0] < l:
        return a[0]
    else:
        return l","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",14611,True
"def factorial(n):
    if n == 0:
        return 1
    else:
        total = 1
        for i in range(0, n):
            total *= i
        return factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    else:
        total = 1
        for i in range(0, n):
            total *= i
        return factorial(n - 1)","def factorial(n):
    A = False
    if A:
        0
    elif A:
        0
    if n < 2:
        return 1
    return n * factorial(n - 1)",14634,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        smallest = 0
        j = 1
        while j < len(a):
            if a[j] < a[smallest]:
                smallest = j
            j = j + 1
        tmp = a[0]
        a[0] = a[smallest]
        a[smallest] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,536d6075-5a50-4346-89ff-5e21df057756,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        smallest = 0
        j = 1
        while j < len(a):
            if a[j] < a[smallest]:
                smallest = j
            j = j + 1
        tmp = a[0]
        a[0] = a[smallest]
        a[smallest] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",14642,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l).pop(l[1])
    else:
        return maximum(l).pop(l[0])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l).pop(l[1])
    else:
        return maximum(l).pop(l[0])","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",14655,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",14678,True
"def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return s[-1] + power(s[-1] - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return s[-1] + power(s[-1] - 1)","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",14701,True
"def count_letters(s):
    if not s:
        return 0
    if len(s) == 1:
        return 1
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return 0
    if len(s) == 1:
        return 1
    return count_letters(s[1:])","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",14722,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[-1]] + reverse_list(a[::-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[-1]] + reverse_list(a[::-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",14754,True
"def reverse_list(l):
    if reverse_list.count == len(l) // 2:
        return l
    l.insert(-1, l.pop(0))
    reverse_list.count += 1
    try:
        return reverse_list(l)
    finally:
        reverse_list.count = 0",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='insert', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])), AugAssign(target=Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Store()), op=Add(), value=Constant(value=1)), Try(body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='reverse_list', ctx=Load()), attr='count', ctx=Store())], value=Constant(value=0))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if reverse_list.count == len(l) // 2:
        return l
    l.insert(-1, l.pop(0))
    reverse_list.count += 1
    try:
        return reverse_list(l)
    finally:
        reverse_list.count = 0",,14821,False
"def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse(l[:-1] + l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse(l[:-1] + l[0])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",14846,True
"def sumup(n):
    if n == 0:
        return 0
    return n + sum(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return n + sum(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",14857,True
"def search(str, letter):
    if str == []:
        return False
    elif str[0] == val:
        return True
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == []:
        return False
    elif str[0] == val:
        return True
    else:
        return search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",14875,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del s
    print(e)
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del s
    print(e)
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",14914,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        l = reverse_list(l[1:]) + l.pop(0)
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        l = reverse_list(l[1:]) + l.pop(0)
        return l","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",14999,True
"def fibonacci(n):
    list = []
    i = 0
    while n >= len(list):
        new_num = list[i] + list[i + 1]
        list.append(new_num)
        i = i + 1
    print(list[-1])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = []
    i = 0
    while n >= len(list):
        new_num = list[i] + list[i + 1]
        list.append(new_num)
        i = i + 1
    print(list[-1])","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",15006,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j = j + 2
    return l4",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='l4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j = j + 2
    return l4","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",15126,True
"def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        c[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            c[b[i]] = True
            i = i + 1
            print(c)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='seen', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        c[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            c[b[i]] = True
            i = i + 1
            print(c)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    if True:
        0
    else:
        0
    for number in seen:
        c.append(number)
    return c",15140,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return m",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return m","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",15182,True
"def reverse_list(l):
    return reversed(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reversed(l)","def reverse_list(l):
    return [x for x in reversed(l)]",15194,True
"def fibonacci(n):
    a = [0, 1]
    if n < i:
        return a[n]
    else:
        i = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    if n < i:
        return a[n]
    else:
        i = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",15216,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[0])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[0])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",15226,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",15251,True
"def index(string, letter, position=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, position=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",15254,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        l3.append(l2[iS])
        i = i + 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='iS', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        l3.append(l2[iS])
        i = i + 2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",15282,True
"def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        return fib[n]
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        return fib[n]
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",15314,True
"def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(l[1:])
    if l[0] < l:
        return l[0]
    else:
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(l[1:])
    if l[0] < l:
        return l[0]
    else:
        return l","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",15327,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1] + reverse_list(l[:-1])]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1] + reverse_list(l[:-1])]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",15339,True
"def append2list(l1, l2=[]):
    if l2 is none:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a0677365-0929-4e2e-8719-3729105927cd,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Name(id='none', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 is none:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=[]):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",15344,True
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",15356,True
"def merge_lists(l1, l2):
    i = 0
    l3 = l2[::2] + l1[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = l2[::2] + l1[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",15361,True
"def union(a, b):
    a = []
    b = []
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = []
    b = []
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",15381,True
"def fibonacci(n):
    a = 0
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return a","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",15417,True
"def index(str, letter):
    if letter in str:
        return str.find(letter)
    elif letter not in str:
        return '-1'
    else:
        return index(str[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str.find(letter)
    elif letter not in str:
        return '-1'
    else:
        return index(str[1:], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",15457,True
"def bsearch(a, q):
    a = sorted(a)
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    a = sorted(a)
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15480,True
"def swap_unique_keys_values(d):
    nd = {}
    dset = set(d.items())
    return dict(dset)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    nd = {}
    dset = set(d.items())
    return dict(dset)","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",15493,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f15a871d-61c5-494f-8886-91e213b59201,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",15498,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[0]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[0]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",15558,True
"def index(str, letter):
    pos = 0
    if pos == len(str):
        return '-1'
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    pos = 0
    if pos == len(str):
        return '-1'
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",15563,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15566,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].rstrip()",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].rstrip()","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",15570,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return letter",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return letter","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",15622,True
"def merge_lists(l1, l2):
    a = []
    i = 0
    while i < len(l1):
        a.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        a.append(l2[i])
        j = j + 2
    return a",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    a = []
    i = 0
    while i < len(l1):
        a.append(l1[i])
        i = i + 2
    j = 0
    while j < len(l2):
        a.append(l2[i])
        j = j + 2
    return a","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",15649,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return l.remove(large)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return l.remove(large)","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",15677,True
"def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",15691,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return set(s)",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    return set(s)","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",15699,True
"def index(word, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(word, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return -1","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",15707,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",15711,True
"def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        else:
            del opposite[k]
    return opposite",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        else:
            del opposite[k]
    return opposite","def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",15736,True
"def sumup(n):
    if n == 1:
        return 1
    return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",15788,True
"def search(str, letter):
    i = 0
    if letter == str[i]:
        return 'True'
    else:
        return 'False'
        i = i + 1",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False')), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    if letter == str[i]:
        return 'True'
    else:
        return 'False'
        i = i + 1","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",15796,True
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    i = 0
    while i < len(l):
        if i > lowest:
            lowest = i
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    i = 0
    while i < len(l):
        if i > lowest:
            lowest = i
    return lowest","def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]",15807,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        if d[key] not in values:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        if d[key] not in values:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    new_d = {}
    values = list(d.values())
    keys = list(d.keys())
    i = 0
    for i in range(0, len(values)):
        if values.count(values[i]) < 2:
            new_d[values[i]] = keys[i]
    return new_d",15816,True
"def factorial(n):
    if n == 0:
        return 0
    elif n == 1:
        return n
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    elif n == 1:
        return n
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",15832,True
"def intersection(a, b):
    int = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in int:
            int[a[i]] = True
        i = i + 1
    print(int)",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    int = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in int:
            int[a[i]] = True
        i = i + 1
    print(int)","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",15848,True
"def swap_unique_keys_values(d):
    return {(b, a) for a, b in list(d.items()) if list(d.values()).count(b) ==
        1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=SetComp(elt=Tuple(elts=[Name(id='b', ctx=Load()), Name(id='a', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return {(b, a) for a, b in list(d.items()) if list(d.values()).count(b) ==
        1}","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",15869,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    new_l = reverse_list(l[1:]) + l[:1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d030c365-0c70-41fc-bf99-b5270c6b8c31,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    new_l = reverse_list(l[1:]) + l[:1]
    return new_l","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",15874,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    union = sorted(list(set(union)))
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    union = sorted(list(set(union)))
    return union","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",15933,True
"def fibonacci(n):
    a = [0, 1]
    if n == len(a):
        return a[n]
    elif n != len(a):
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    if n == len(a):
        return a[n]
    elif n != len(a):
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",15936,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[i] in l2:
            l3.append(l2[i])
            i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[i] in l2:
            l3.append(l2[i])
            i = i + 2
    print(l3)","def merge_lists(l1, l2):
    if True:
        l3 = []
        i = 0
        while i < len(l1):
            l3.append(l1[i])
            i += 2
        i = 0
        while i < len(l2):
            l3.append(l2[i])
            i += 2
        return l3",15985,True
"def index(str, letter, pos):
    if len(str) == 0:
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if len(str) == 0:
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",16014,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",16022,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                s[i] = 1
                t = s[:i]
                t += s[i]
                t += s[i:]
                s = t
        if not s.isupper():
            total = 0
            for c in s:
                total += c
            return total
        else:
            return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Name(id='x_2', ctx=Load())), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                s[i] = 1
                t = s[:i]
                t += s[i]
                t += s[i:]
                s = t
        if not s.isupper():
            total = 0
            for c in s:
                total += c
            return total
        else:
            return count_letters(s)","def count_letters(s):
    A = False
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    if A:
        if A:
            0
        if True:
            0
    return counter",16045,True
"def index(str, letter, pos):
    if len(str) == 0:
        return -1
    elif str[pos] == letter:
        print(pos)
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if len(str) == 0:
        return -1
    elif str[pos] == letter:
        print(pos)
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",16047,True
"def fibonacci(n):
    if n == 0 or 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",16094,True
"def swap_keys_values(d):
    new_d = {}
    for k in d:
        d1[d[k]] = k
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = {}
    for k in d:
        d1[d[k]] = k
    return new_d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",16116,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    if i == len(s):
        s.append(line)
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    if i == len(s):
        s.append(line)
    return result","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",16154,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if {k, v} not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Set(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())]), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if {k, v} not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",16160,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < line:
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_5', ctx=Load())]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < line:
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",16165,True
"def union(f1con, f2con):
    import sys
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_2')]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    import sys
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",16166,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        d.pop(key, value)
        if value not in list(d.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        d.pop(key, value)
        if value not in list(d.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",16291,True
"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,36685ead-53f8-40af-a908-4c048278dc6b,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",16306,True
"def merge_lists(l1l2):
    l3 = l1[::2] + l2[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='l1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='l2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    l3 = l1[::2] + l2[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",16315,True
"def reverse_list(l):
    for i in reversed(l):
        return reversed(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    for i in reversed(l):
        return reversed(l)","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",16360,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    if True:
        0
    return a",16367,True
"def fibonacci(n):
    i = 1
    l = [0, 1]
    while i < n + 1:
        l.append(l[i] + l[i - 1])
        i += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 1
    l = [0, 1]
    while i < n + 1:
        l.append(l[i] + l[i - 1])
        i += 1
    return l[-1]","def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",16384,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            e.remove(s)
    print(e)
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            e.remove(s)
    print(e)
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",16389,True
"def fibonacci(n):
    if n == 0:
        return 0
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,762404df-24ca-44ff-9c98-3f841fa7faab,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    fib = [0, 1, 1]
    if False:
        0
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",16415,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > minimum(a[1:]):
        return a[0]
    else:
        return minimum(a[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > minimum(a[1:]):
        return a[0]
    else:
        return minimum(a[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",16483,True
"def union(a, b):
    i = 0
    d = {}
    while i < len(a):
        d[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if b[k] not in d:
                d[b[k]] = True
            k = k + 1
        return d",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    d = {}
    while i < len(a):
        d[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if b[k] not in d:
                d[b[k]] = True
            k = k + 1
        return d","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen and False:
            0
        i = i + 1
    return c",16486,False
"def remove_zeros(a):
    i = 0
    while i < len(a):
        print(a[0])
        print(len(a))
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        print(a[0])
        print(len(a))
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",16493,True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
        x = a
    else:
        return x + fibonacci(a - x)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(a):
    if a == 0 or a == 1:
        return 1
        x = a
    else:
        return x + fibonacci(a - x)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",16507,True
"def fibonacci(n):
    a, b = 0, 1
    while b < 10:
        a, b = b, a + b
        return b",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a, b = 0, 1
    while b < 10:
        a, b = b, a + b
        return b","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",16518,True
"def factorial(n):
    return product(list(range(n))) * n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='product', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    return product(list(range(n))) * n","def factorial(n):
    if n < 2 and True:
        return 1
    else:
        0
    return n * factorial(n - 1)",16542,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while k < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='k', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while k < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",16555,True
"def sumup(n):
    if n == 0:
        return 0
    n = n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    n = n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",16556,True
"def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    union = sorted(list(set(union)))
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(f1con, f2con):
    union = []
    i = 0
    while i != len(f1con):
        union.append(f1con[i])
        i = i + 1
    i = 0
    while i != len(f2con):
        union.append(f2con[i])
        i = i + 1
    union = sorted(list(set(union)))
    return union","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",16591,True
"def index(string, letter, rv):
    if string == []:
        return -1
    elif string[0] == letter:
        return rv
    else:
        rv = rv + 1
        return index(sring[1:], letter, rv)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='sring', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, rv):
    if string == []:
        return -1
    elif string[0] == letter:
        return rv
    else:
        rv = rv + 1
        return index(sring[1:], letter, rv)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",16607,True
"def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",16676,True
"def maximum(l):
    if len(l) == 0:
        return 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l.pop(l[1]))
    else:
        return maximum(l.pop(l[0]))",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 0:
        return 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l.pop(l[1]))
    else:
        return maximum(l.pop(l[0]))","def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    elif l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",16689,True
"def index(str, letter):
    if letter in str:
        return 1
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,415d4431-1b98-4241-a978-02dc16bf556e,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return 1
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",16698,True
"def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        c[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            c[b[i]] = True
            i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='seen', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        c[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            c[b[i]] = True
            i = i + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",16706,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 and i % 2 == 0:
                l3.append(l1[i])
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 and i % 2 == 0:
                l3.append(l1[i])
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",16710,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16746,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2","def merge_lists(l1, l2):
    if False:
        0
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",16826,True
"def minimum(l):
    if len(l) == 0:
        return 0
    lowest = 100
    for line in l:
        if line < lowest:
            lowest = line
    return minimum(lowest)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 0:
        return 0
    lowest = 100
    for line in l:
        if line < lowest:
            lowest = line
    return minimum(lowest)","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",16872,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='bad', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",16876,True
"def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
            i = i + 1
            return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,9cf41e84-15c1-4c2d-90e2-497206e45e8b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
            i = i + 1
            return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",16877,True
"def sumup(n):
    a = n(n + 1) / 2
    return a",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sumup(n):
    a = n(n + 1) / 2
    return a","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    if False:
        0
    else:
        0
    return n + sum_to_n",16913,True
"def swap_unique_keys_values(d):
    new_dict = {}
    keys = []
    values = []
    for key, value in list(d.items()):
        keys.append(value)
        values.append(key)
    return keys, values",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    keys = []
    values = []
    for key, value in list(d.items()):
        keys.append(value)
        values.append(key)
    return keys, values","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",16920,True
"def swap_unique_keys_values(d):
    new_dict = {}
    old = sorted(d.items())
    for pair in old:
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    old = sorted(d.items())
    for pair in old:
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict","def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",16932,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        if q < a[mid]:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        if q < a[mid]:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",16948,False
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    b = []
    i = 0
    b.append(reverse_list(a[i])) + 1
    return b[-1:]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Expr(value=BinOp(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=1))), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    b = []
    i = 0
    b.append(reverse_list(a[i])) + 1
    return b[-1:]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",16953,True
"def swap_unique_keys_values(d):
    d = list(set(d))
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = list(set(d))
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",16969,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[0:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[0:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",17053,True
"def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merge_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merge_list.append(l2[i])
        i += 2
    return merge_list",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='merge_list', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='merge_list', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    merged_list = []
    i = 0
    while i < len(l1):
        merge_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merge_list.append(l2[i])
        i += 2
    return merge_list","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",17128,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",17131,True
"def remove_zeros(a):
    i = 0
    while i < len(a):
        print(a[0])
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        print(a[0])
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",17194,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",17212,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    for key in d:
        if d.count(values) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    for key in d:
        if d.count(values) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",17228,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    print(list[-1])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    print(list[-1])","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",17259,True
"def sumup(n):
    if n == 1:
        return 1
    else:
        return n * sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    else:
        return n * sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",17271,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif q < a[mid]:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif q < a[mid]:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",17318,False
"def swap_keys_values(x):
    d = {v: k for k, v in list(a.items())}
    return x",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    d = {v: k for k, v in list(a.items())}
    return x","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",17348,True
"def search(letter):
    str = input()
    letter = input()
    if letter in str:
        print(True)
    else:
        print(false)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='false', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(letter):
    str = input()
    letter = input()
    if letter in str:
        print(True)
    else:
        print(false)","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",17377,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count += 1
    if length == 0:
        return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count += 1
    if length == 0:
        return count","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",17383,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    l = reverse_list(a[1:]).append(a[0])
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    l = reverse_list(a[1:]).append(a[0])
    return l","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",17394,True
"def remove_zeros(x):
    i = 0
    while i < len(x):
        if x[i] == 0:
            del x[i]
        if x[i] == 0:
            del x[i]
        i = i + 1
    return x",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,a93c9eeb-104a-4436-bd9a-c2e65d311d9e,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(x):
    i = 0
    while i < len(x):
        if x[i] == 0:
            del x[i]
        if x[i] == 0:
            del x[i]
        i = i + 1
    return x","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        if True:
            list.remove(0)",17398,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1
    return a",17416,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])[2]
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])[2]
        i = i + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])[2]
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])[2]
        i = i + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",17428,True
"def reverse_list(l):
    if l == []:
        return []
    else:
        return reverse_list(l[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    else:
        return reverse_list(l[1:])","def reverse_list(l):
    if l == []:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",17437,True
"def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + power(ihavethehighground[-1] - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + power(ihavethehighground[-1] - 1)","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",17455,True
"def sumup(n):
    if n == 0:
        return 0
    sumup = sumup(n - 1)
    return n + sumup",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    sumup = sumup(n - 1)
    return n + sumup","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",17468,True
"def swap_unique_keys_values(d):
    for k in list(d.values()):
        if list(d.values()).count(d[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    for k in list(d.values()):
        if list(d.values()).count(d[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",17477,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        l3 = l1 + l2
        return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        l3 = l1 + l2
        return l3","def append2list(l1, l2=[]):
    if True:
        return l2 + l1",17488,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n * fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",17494,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 0:
            l3.append(l2[j])
        j = j + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 0:
            l3.append(l2[j])
        j = j + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",17496,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:])","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",17511,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = i
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = i
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j += 1
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",17515,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",17583,True
"def remove_zeros(list):
    i = 0
    list = input()
    while i < len(list):
        if 0 in list:
            list.pop(0)
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    list = input()
    while i < len(list):
        if 0 in list:
            list.pop(0)
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",17589,True
"def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[0:]):
        return l[0]
    else:
        return minimum(l[:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[0:]):
        return l[0]
    else:
        return minimum(l[:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",17597,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]).append(a[1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]).append(a[1])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",17716,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    count + 1
    s = s - s[0]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Expr(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    count + 1
    s = s - s[0]
    return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",17725,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        l = min(l[0], mininum(l[1:]))
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='mininum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        l = min(l[0], mininum(l[1:]))
        return l","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",17780,True
"def reverse_list(a):
    if len(a) == 0:
        return a
    else:
        return a[-1] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return a
    else:
        return a[-1] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",17846,True
"def index(string, letter):
    position = 0
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = 0
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",17860,True
"def factorial(n):
    if n == 1:
        return 1
    factorial_of_n = factorial(n - 1)
    return n * factorial_of_n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    factorial_of_n = factorial(n - 1)
    return n * factorial_of_n","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",17919,True
"def index(str, letter, pos):
    if len(str) - 1 == pos:
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if len(str) - 1 == pos:
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",17942,True
"def intersection(a, b, d):
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b, d):
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",17947,True
"def sumup(n):
    if n == 1:
        return 1
    sumup = sumup(n - 1)
    return n + sumup",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    sumup = sumup(n - 1)
    return n + sumup","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",17977,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[1]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[1]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",18007,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n
    return m",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n
    return m","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",18037,True
"def index(str, letter):
    i = 0
    while i < len(str):
        index = letter.index('str')
        if str[i] == letter:
            return index
        else:
            return '-1'
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='x_3', ctx=Load()), args=[Constant(value='x_0')], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        index = letter.index('str')
        if str[i] == letter:
            return index
        else:
            return '-1'
        i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            0
        i = i + 1
    return -1",18045,True
"def count_letters(s):
    total = 0
    for c in (s - 1):
        total += 1
    return count_letters(s[:-1]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    for c in (s - 1):
        total += 1
    return count_letters(s[:-1]) + 1","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",18046,True
"def swap_keys_values(d):
    for key in d:
        key = key.split()
    return key",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    for key in d:
        key = key.split()
    return key","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",18058,True
"def count_letters(l):
    if len(l) == 0:
        return 0
    else:
        return 1 + count_letters(l + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(l):
    if len(l) == 0:
        return 0
    else:
        return 1 + count_letters(l + 1)","def count_letters(word):
    if len(word) == 0:
        return 0
    else:
        return 1 + count_letters(word[1:])",18076,True
"def selection_sort(a):
    i = 0
    j = 0
    p = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    while i < len(a):
        p = i
        j = i + 1
        smallest(a, j, p)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='smallest', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    j = 0
    p = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    while i < len(a):
        p = i
        j = i + 1
        smallest(a, j, p)
        swap(a, i, p)
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        if False:
            0
        i = i + 1
    return a",18120,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(s.join())
    else:
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(s.join())
    else:
        return count_letters(s)","def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",18151,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, v)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, v)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",18189,False
"def merge_lists(l1, l2):
    l3 = []",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",18196,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3 = l3.split(',')
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3 = l3.split(',')
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",18220,True
"def index(str, letter):
    if letter in str:
        print(1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,762404df-24ca-44ff-9c98-3f841fa7faab,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        print(1)","def index(s, letter):
    if letter in s:
        return s.index(letter)
    return -1",18254,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a) and i < len(c):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a) and i < len(c):
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",18265,True
"def remove_zeros(list):
    for number in list:
        if number == '0':
            list.remove(number)
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if number == '0':
            list.remove(number)
    return list","def remove_zeros(list):
    while True:
        if not 0 in list:
            if False:
                0
            break
        list.remove(0)",18280,True
"def swap_unique_keys_values(d):
    new_d = {}
    seen = set()
    for key in d:
        seen += d[key]
    for key in d:
        if d[key] in seen:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    seen = set()
    for key in d:
        seen += d[key]
    for key in d:
        if d[key] in seen:
            new_d[d[key]] = key
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",18306,True
"def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return a[-1:]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return a[-1:]","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",18340,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",18405,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",18441,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        count += 0
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=0)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        count += 0
        return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    elif False:
        0
    s = s[1:]
    return 1 + count_letters(s)",18471,True
"def fibonacci(n):
    if n < 2:
        return n
    return febonacci(n - 2) + fibonacci(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7ee35977-e007-4398-99c0-ea42a300ff3c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='febonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return n
    return febonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    a = 1
    b = 1
    if True:
        0
    for i in range(n - 1):
        a, b = b, a + b
    return a",18478,True
"def reverse_list(l):
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    return l[::-1]",18483,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        else:
            return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",18494,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        return min(l[0], findMinimum(l[1:]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='findMinimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        return min(l[0], findMinimum(l[1:]))","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",18495,True
"def factorial(n):
    if n == 0 or n == 1:
        return 1
    return factorial(n - 1) + factorial(n - 2)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0 or n == 1:
        return 1
    return factorial(n - 1) + factorial(n - 2)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",18498,True
"def fibonacci(n):
    list = [0, 1]
    i = 0
    while n >= len(list):
        new_num = list[i] + list[i + 1]
        list.append(new_num)
        i = i + 1
    print(list[-1])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0, 1]
    i = 0
    while n >= len(list):
        new_num = list[i] + list[i + 1]
        list.append(new_num)
        i = i + 1
    print(list[-1])","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",18505,True
"def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        print(total)
    elif n == 1:
        total = n1
        print(total)
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        print(total)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        print(total)
    elif n == 1:
        total = n1
        print(total)
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        print(total)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",18508,True
"def swap_unique_keys_values(d):
    return {t[1]: t[0] for t in list(d.items()) if list(d.values()).count(d
        [1]) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return {t[1]: t[0] for t in list(d.items()) if list(d.values()).count(d
        [1]) == 1}","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",18509,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_8', ctx=Store()), Name(id='x_9', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_9', ctx=Load()), Name(id='x_8', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_7', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",18532,True
"def swap_keys_values(d):
    newdict = {}
    keys = list(d.keys())
    values = list(d.values())
    i = 0
    while i < len(d.keys):
        newdict[keys[i]] = values[i]
        i = i + 1
    return newdict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    newdict = {}
    keys = list(d.keys())
    values = list(d.values())
    i = 0
    while i < len(d.keys):
        newdict[keys[i]] = values[i]
        i = i + 1
    return newdict","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",18534,True
"def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=0):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",18542,True
"def reverse_list(l):
    if len(l) == 0:
        return l[0]
    new = reverse_list(l[1:]) + l[:1]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l[0]
    new = reverse_list(l[1:]) + l[:1]
    return new","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",18574,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        number = 0
        first_num = 1
        second_num = 2
        for n in range(3, n):
            number = first_num * second_num
            first_num = second_num
            second_num = number
        return number
    else:
        return -1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), For(target=Name(id='x_0', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3), Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mult(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        number = 0
        first_num = 1
        second_num = 2
        for n in range(3, n):
            number = first_num * second_num
            first_num = second_num
            second_num = number
        return number
    else:
        return -1","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    elif False:
        0
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",18580,True
"def swap_unique_keys_values(d):
    a = []
    d_2 = {}
    for entry in list(d.items()):
        swap = entry[::-1]
        a.append(swap)
    for k, v in a:
        d_2[k] = v
    return d_2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    a = []
    d_2 = {}
    for entry in list(d.items()):
        swap = entry[::-1]
        a.append(swap)
    for k, v in a:
        d_2[k] = v
    return d_2","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items())[:int(len(list(d.items())) / 2)]:
        a.append(v)
    for k, v in list(d.items())[int(len(list(d.items())) / 2):]:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",18590,True
"def remove_zeros(list):
    return list.remove('0')",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='0')], keywords=[]))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    return list.remove('0')","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",18594,True
"def minimum(l, n):
    if n == 0:
        return l[0]
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l, n):
    if n == 0:
        return l[0]
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",18631,True
"def reverse_list(a):
    if len(a) == 0:
        return []
    return a[-1] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return []
    return a[-1] + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",18635,True
"def merge_lists(l1, l2):
    for num in l1:
        l3.append(num)
    for number in l2:
        l3.append(number)
    sorted(l3)
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='l3', ctx=Load())], keywords=[])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    for num in l1:
        l3.append(num)
    for number in l2:
        l3.append(number)
    sorted(l3)
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",18661,True
"def append2list(l1, l2=None):
    if l2 == None:
        l3 = []
        for i in l1:
            l3.append(i)
        return l3
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l3 = []
        for i in l1:
            l3.append(i)
        return l3
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",18664,True
"def swap_keys_values(d):
    new_d = {}
    for k, v in d:
        d1[v] = k
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = {}
    for k, v in d:
        d1[v] = k
    return new_d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",18678,True
"def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        else:
            del d[k]
    return opposite",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        else:
            del d[k]
    return opposite","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",18713,True
"def index(str, letter, position):
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return position
    else:
        return index(str, letter, position + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, position):
    if position == len(str):
        return '-1'
    elif str[position] == letter:
        return position
    else:
        return index(str, letter, position + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",18803,True
"def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",18807,True
"def factorial(n):
    if n <= 1:
        return n
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n <= 1:
        return n
    else:
        return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",18834,True
"def remove_zeros(nums):
    gway = []
    i = 0
    while i < len(nums):
        if int(nums[i]) == 0:
            del nums[i]
        if int(nums[i]) == 0:
            del nums[i]
        i = i + 1
    return nums",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(nums):
    gway = []
    i = 0
    while i < len(nums):
        if int(nums[i]) == 0:
            del nums[i]
        if int(nums[i]) == 0:
            del nums[i]
        i = i + 1
    return nums","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        if True:
            list.remove(0)",18850,True
"def swap_keys_values(d):
    new_dict = {}
    i = 0
    while i < len(d):
        new_dict[d[0]] = d[1]
        i += 1
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    i = 0
    while i < len(d):
        new_dict[d[0]] = d[1]
        i += 1
    return new_dict","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",18855,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    n -= 1
    x = fibonacci(n) + fibonacci(n - 1)
    return x",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    n -= 1
    x = fibonacci(n) + fibonacci(n - 1)
    return x","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",18863,True
"def swap_unique_keys_values(d):
    l = []
    new_d = {}
    for k in d:
        if d[k] not in l:
            new_d[d[k]] = k
            l.append(d[k])
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    l = []
    new_d = {}
    for k in d:
        if d[k] not in l:
            new_d[d[k]] = k
            l.append(d[k])
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",18884,True
"def swap_unique_keys_values(d):
    for k in list(d.keys()):
        if list(d.values()).count(d[k]) > 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    for k in list(d.keys()):
        if list(d.values()).count(d[k]) > 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",18924,True
"def union(a, b):
    a = [1, 2, 3, 4]
    b = [3, 4, 5, 6]
    return a, b",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6)], ctx=Load())), Return(value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = [1, 2, 3, 4]
    b = [3, 4, 5, 6]
    return a, b","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",18930,True
"def search(ls, val):
    if ls == []:
        return -1
    elif ls[0] == val:
        return val
    else:
        return search(ls[1:], val)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val):
    if ls == []:
        return -1
    elif ls[0] == val:
        return val
    else:
        return search(ls[1:], val)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",18997,True
"def factorial(n):
    if n == 0:
        return 1
    facotrial_n_minus_1 = factorial(n - 1)
    return n * facotrial_n_minus_1",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,d05025fd-0a14-4010-acb6-dea38896a651,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    facotrial_n_minus_1 = factorial(n - 1)
    return n * facotrial_n_minus_1","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",18999,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    else:
        for c in s[:-1]:
            total += 1
            s = s[c:-1]
        return count_letters(s) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load()), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    else:
        for c in s[:-1]:
            total += 1
            s = s[c:-1]
        return count_letters(s) + 1","def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter",19033,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        for i in unique:
            dictionary[i] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        for i in unique:
            dictionary[i] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",19054,True
"def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + reverse_list(ihavethehighground[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + reverse_list(ihavethehighground[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",19055,True
"def swap_unique_keys_values(d):
    inv_map = {a: b for b, a in list(d.items())}
    return inv_map",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    inv_map = {a: b for b, a in list(d.items())}
    return inv_map","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",19073,True
"def fibonacci(l):
    if fibonacci(0) == 1 or fibonacci(1) == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(l):
    if fibonacci(0) == 1 or fibonacci(1) == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",19080,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if v not in list(new_d.keys()):
            new_d[v] = k
        else:
            0
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Expr(value=Constant(value=0))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if v not in list(new_d.keys()):
            new_d[v] = k
        else:
            0
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",19105,True
"def reverse_list(l):
    if l == []:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",19108,True
"def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '1'","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",19135,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",19177,True
"def remove_zeros(list):
    a = []
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    a = []
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",19193,True
"def remove_zeros(a):
    i = 0
    while i < len(a):
        print(len(a) - i - 1)
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        print(len(a) - i - 1)
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i - 1])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",19204,True
"def sumup(n):
    if int(n) == 0:
        return 0
    return n + sumup(n + 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return 0
    return n + sumup(n + 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",19212,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[:-1]).append(-1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[:-1]).append(-1)","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",19217,True
"def index(str, letter):
    if letter not in str:
        return '-1'
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i += 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return '-1'
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i += 1","def index(str, letter):
    if False:
        0
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",19276,True
"def index(str, letter, num):
    while num > 0:
        i = 0
        while i < len(str):
            if str[i] == letter:
                return i
            else:
                i = i + 1
        if i == len(str):
            return '-1'
    if num > 0:
        num = num - 1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter, num):
    while num > 0:
        i = 0
        while i < len(str):
            if str[i] == letter:
                return i
            else:
                i = i + 1
        if i == len(str):
            return '-1'
    if num > 0:
        num = num - 1","def index(s, letter, num):
    if num == len(s):
        if True:
            0
        return -1
    if s[num] == letter:
        return num
    if True:
        0
    n = index(s, letter, num + 1)
    return n",19288,True
"def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n + 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n + 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",19358,True
"def count_letters(word):
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])","def count_letters(word):
    try:
        i = i + 1
        return count_letters(word[1:])
    except:
        return i","def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",19376,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            bad[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            bad[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",19424,True
"def remove_zeros(list):
    i = 0
    if list[i] == 0:
        list.remove(list[i])",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    if list[i] == 0:
        list.remove(list[i])","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",19438,True
"def search(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
        i = i + 1
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Constant(value=False))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return True
        i = i + 1
        return False","def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",19455,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
        p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in a:
            c.append(b[p])
        p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",19456,True
"def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth + 1 + fibonacci(nth - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth + 1 + fibonacci(nth - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",19499,True
"def fibonacci(n):
    a = 0
    b = 0
    while n > 0:
        prev_a = a
        a = b
        b = prev_a + b
        n -= 1
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 0
    while n > 0:
        prev_a = a
        a = b
        b = prev_a + b
        n -= 1
    return a","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",19504,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        i = i + 1
    else:
        return '-1'
    i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return str[i]
        i = i + 1
    else:
        return '-1'
    i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        if True:
            i = i + 1
    return -1",19526,True
"def append2list(l1, l2=[]):
    if len(l2) == 2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if len(l2) == 2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",19530,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(dict(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(dict(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",19531,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return minimum(l.remove(large))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return minimum(l.remove(large))","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",19534,True
"def swap_keys_values(d):
    a = []
    for entry in list(d.items()):
        u = entry[::-1]
        a.append(u)
    return a",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    a = []
    for entry in list(d.items()):
        u = entry[::-1]
        a.append(u)
    return a","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        new_dict[temp] = keys
    return new_dict",19572,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in a:
            c.append(b[k])
        k = k + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in a:
            c.append(b[k])
        k = k + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",19600,True
"def sumup(n):
    n = n(n + 1) / 2
    return n",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sumup(n):
    n = n(n + 1) / 2
    return n","def sumup(n):
    if n < 2:
        return n
    else:
        0
    sum_to_n = sumup(n - 1)
    if False:
        0
    return n + sum_to_n",19603,True
"def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str.find(letter)
    else:
        return '-1'","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",19615,True
"def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    print(d2)
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0964a543-93db-460b-a0c5-d0c94fea250f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    print(d2)
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3","def swap_unique_keys_values(d):
    new_d = {}
    doubles = set()
    for k, v in list(d.items()):
        if v in new_d:
            doubles.add(v)
        new_d[v] = k
    for k in doubles:
        del new_d[k]
    return new_d",19638,True
"def swap_unique_keys_values(d):
    v = list(d.values())
    for k in v:
        if v.count(v[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_1', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_1', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    v = list(d.values())
    for k in v:
        if v.count(v[k]) != 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",19643,True
"def swap_keys_values(a):
    for entry in a:
        u = entry[::-1]
        a.append(u)
    return a",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(a):
    for entry in a:
        u = entry[::-1]
        a.append(u)
    return a","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",19666,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if j % 2 == 0:
            l3.append(l2[i])
        j = j + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if j % 2 == 0:
            l3.append(l2[i])
        j = j + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",19687,True
"def factorial(n):
    if int(n) >= 1:
        return 1
    return int(n) * factorial(int(n) + 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) >= 1:
        return 1
    return int(n) * factorial(int(n) + 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",19691,True
"def fibonacci(n):
    if n == len(a) - 1:
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == len(a) - 1:
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",19697,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n - 1 + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n - 1 + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",19715,True
"def remove_zeros(list):
    for number in list:
        if number == '0':
            list.remove(list[number])
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if number == '0':
            list.remove(list[number])
    return list","def remove_zeros(list):
    while True:
        if not 0 in list:
            if False:
                0
            break
        list.remove(0)",19754,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i[unique]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i[unique]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",19789,True
"def selection_sort(a):
    p = 0
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",19810,True
"def index(string, letter, position):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, position):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",19890,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return 'True'
        i = i + 1
    return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return 'True'
        i = i + 1
    return 'False'","def search(str, letter):
    if str == '':
        return False
    elif True:
        0
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",19931,True
"def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for key in unique_values:
        new_d[key] = d[key]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for key in unique_values:
        new_d[key] = d[key]
    return new_d","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",19947,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",19948,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    head = a[0]
    tail = a[1:]
    mintail = minimum(tail)
    if head < mintail:
        smallest = mintail
    else:
        smallest = head
    return smallest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    head = a[0]
    tail = a[1:]
    mintail = minimum(tail)
    if head < mintail:
        smallest = mintail
    else:
        smallest = head
    return smallest","def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",19956,True
"def union(a, b):
    i = 0
    c = []
    while i < 6:
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=6)]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < 6:
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",20030,True
"def reverse_list(l):
    if l == None:
        return l
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == None:
        return l
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",20036,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l1.append(l3)
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l1.append(l3)
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",20039,True
"def intersection(a, b):
    int_seen = {}
    leng = len(a)
    k = 0
    while k < leng:
        if a[k] in b:
            int_seen[a[k]] = True
    k = k + 1
    return int_seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    int_seen = {}
    leng = len(a)
    k = 0
    while k < leng:
        if a[k] in b:
            int_seen[a[k]] = True
    k = k + 1
    return int_seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",20042,True
"def swap_keys_values(d):
    for k, v in list(d.items()):
        del d[k]
        d[v] = k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())]), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    for k, v in list(d.items()):
        del d[k]
        d[v] = k","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",20047,True
"def search(string, letter):
    if string == []:
        print('False')
    elif string[0] == letter:
        print('True')
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string == []:
        print('False')
    elif string[0] == letter:
        print('True')
    else:
        search(string[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",20083,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",20109,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0], l1[2]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0], l1[2]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",20134,True
"def reverse_list(l):
    if not l:
        return l[0]
    return reverse_list(l[1:].append(l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return l[0]
    return reverse_list(l[1:].append(l[0]))","def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",20190,True
"def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",20199,True
"def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop(0)
    newli = reverse_list(li)
    newli.append(x)
    return newli",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop(0)
    newli = reverse_list(li)
    newli.append(x)
    return newli","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",20227,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        return i
    else:
        return '-1'","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",20229,True
"def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[k] in b:
            seen[b[k]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[k] in b:
            seen[b[k]] = True
        j = j + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",20273,True
"def fibonacci(n):
    a = 0
    b = 1
    while b < n:
        prev_a = a
        a = b
        b = prev_a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    while b < n:
        prev_a = a
        a = b
        b = prev_a + b
    return a","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",20276,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        dictionary[d[keys]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        dictionary[d[keys]] = key
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",20277,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[::-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[::-1])","def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",20326,True
"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c7fa847c-561b-4652-9a01-05f954e6c8df,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=Constant(value=1), orelse=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",20327,True
"def fibonacci(n):
    previous = 0
    current = 1
    i = 0
    while i < n:
        temp = current
        current += previous
        previous = temp
        i = i + 1
    return current",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    previous = 0
    current = 1
    i = 0
    while i < n:
        temp = current
        current += previous
        previous = temp
        i = i + 1
    return current","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",20337,True
"def merge_lists(l1, l2):
    l1 = []
    l2 = []
    l4 = l1[::2]
    l5 = l2[::2]
    l3 = l1 + l2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l1 = []
    l2 = []
    l4 = l1[::2]
    l5 = l2[::2]
    l3 = l1 + l2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",20407,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1) and i < len(l2):
        l3 = l1[i] + l2[i]
        i += 2
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1) and i < len(l2):
        l3 = l1[i] + l2[i]
        i += 2
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",20433,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                s[i] = '1'
                t = s[:i]
                t += s[i]
                t += s[i:]
                s = t
        if not s.isupper():
            total = 0
            for c in s:
                total += int(c)
            return total
        else:
            return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Constant(value='1')), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Name(id='x_2', ctx=Load())), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                s[i] = '1'
                t = s[:i]
                t += s[i]
                t += s[i:]
                s = t
        if not s.isupper():
            total = 0
            for c in s:
                total += int(c)
            return total
        else:
            return count_letters(s)","def count_letters(s):
    A = False
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    if A:
        if A:
            0
        if True:
            0
    return counter",20475,True
"def factorial(n):
    if n == 0:
        return 1
    fact_of_n = n - 1
    return n * fact_of_n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    fact_of_n = n - 1
    return n * fact_of_n","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",20511,True
"def swap_unique_keys_values(d):
    seen = []
    unseen = []
    for v in list(d.keys()):
        va = d[v]
        if va in unseen:
            seen.append(va)
        else:
            unseen.append(va)
        out = {v: k for k, v in list(d.items()) if v not in seen}
    return out",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='seen', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = []
    unseen = []
    for v in list(d.keys()):
        va = d[v]
        if va in unseen:
            seen.append(va)
        else:
            unseen.append(va)
        out = {v: k for k, v in list(d.items()) if v not in seen}
    return out","def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",20528,True
"def swap_keys_values(d):
    tmp = ''
    for key in d:
        key = tmp
        key = d[key]
        d[key] = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    tmp = ''
    for key in d:
        key = tmp
        key = d[key]
        d[key] = tmp
    return d","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",20640,True
"def minimum(l):
    l = l.sort(key=min())
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Call(func=Name(id='min', ctx=Load()), args=[], keywords=[]))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = l.sort(key=min())
    return l","def minimum(l):
    l.sort()
    return l[0]",20650,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",20682,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        m.remove(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n
    return m",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        m.remove(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 0 or i == 0:
            m.append(n[i])
        i = i + 1
    return n
    return m","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",20689,True
"def fibonacci(n):
    num_one = 0
    num_two = 1
    i = 0
    while i < n:
        num_two = num_two + num_one
        num_one = num_two - num_one
        i = i + 1
    return num_two",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    num_one = 0
    num_two = 1
    i = 0
    while i < n:
        num_two = num_two + num_one
        num_one = num_two - num_one
        i = i + 1
    return num_two","def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",20692,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = i
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = i
                tmp = a[p]
                a[p] = a[j]
                a[j] = tmp
            j = j + 1
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",20705,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",20717,True
"def intersection(a, b):
    c = []
    for item in a:
        if item in b:
            c.append(item)
    return set(c)",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    c = []
    for item in a:
        if item in b:
            c.append(item)
    return set(c)","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",20749,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = a[i]
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = a[i]
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",20804,True
"def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
        j = 0
        while j < len(b):
            if not b[j] in dic:
                dic[b[j]] = True
            j = j + 1
        return dic",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    dic = {}
    while i < len(a):
        dic[a[i]] = True
        i = i + 1
        j = 0
        while j < len(b):
            if not b[j] in dic:
                dic[b[j]] = True
            j = j + 1
        return dic","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen and False:
            0
        i = i + 1
    return c",20824,False
"def factorial(n):
    if n == 0:
        return 1
    else:
        total = 1
        for i in range(0, n):
            total *= i
        return factorial(n - 1) * n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    else:
        total = 1
        for i in range(0, n):
            total *= i
        return factorial(n - 1) * n","def factorial(n):
    A = False
    if A:
        0
    elif A:
        0
    if n < 2:
        return 1
    return n * factorial(n - 1)",20915,True
"def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            print(a.index(file))
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            print(a.index(file))
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        if letter not in c:
            c[dic[letter]] = letter
    return c","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",20917,True
"def swap_unique_keys_values(d):
    A = '@@'
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                values[i] == A
                values[j] == A
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values) and values[i] != A:
        dic[values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='@@')), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_7', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_8', ctx=Load())])]), body=[Expr(value=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])), Expr(value=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = '@@'
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                values[i] == A
                values[j] == A
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values) and values[i] != A:
        dic[values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    if True:
        i = 0
        while i < len(dict_keys):
            d[dict_keys[i]] = dict_values[i]
            i = i + 1
        return d",20944,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:2]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:2]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",20968,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return rdict[letter]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Subscript(value=Name(id='rdict', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return rdict[letter]","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",21000,True
"def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",21011,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(''.join(s))
    else:
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        count_letters(''.join(s))
    else:
        return count_letters(s)","def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",21045,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s.remove[s[0]])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s.remove[s[0]])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",21078,True
"def swap_unique_keys_values(d):
    e = {}
    h = {}
    for k, v in sorted(list(d.items()), reverse=True):
        if v in e:
            e[k] = v
        else:
            e[k] = 'n'
    for k, v in sorted(list(e.items()), reverse=True):
        if v != 'n':
            h[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Constant(value='n'))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='n')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    h = {}
    for k, v in sorted(list(d.items()), reverse=True):
        if v in e:
            e[k] = v
        else:
            e[k] = 'n'
    for k, v in sorted(list(e.items()), reverse=True):
        if v != 'n':
            h[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",21083,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s[:-1]:
            total += 1
            i += 1
            s = s[i:-1]
        return count_letters(s) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load()), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s[:-1]:
            total += 1
            i += 1
            s = s[i:-1]
        return count_letters(s) + 1","def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter",21182,True
"def index(str, letter):
    if letter in str[i]:
        return [i]
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=List(elts=[Name(id='i', ctx=Load())], ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str[i]:
        return [i]
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",21198,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        j = list(l.pop(0))
        return reverse_list(l) + j",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        j = list(l.pop(0))
        return reverse_list(l) + j","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",21210,True
"def fibonacci(n):
    a = [0, 1]
    total = 0
    i = 1
    while i < n:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    total = 0
    i = 1
    while i < n:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
    return a[n]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",21247,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = sys.stdin.readline()
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = sys.stdin.readline()
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",21294,True
"def union(a, b):
    x = a + b
    while 0 < len(x):
        i = 0
        while i < len(x) and x[i] != x:
            i = i + 1
        if i == len(x):
            d[x[i]] = True
    print(union([1, 2, 3], [3, 4, 5]))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    x = a + b
    while 0 < len(x):
        i = 0
        while i < len(x) and x[i] != x:
            i = i + 1
        if i == len(x):
            d[x[i]] = True
    print(union([1, 2, 3], [3, 4, 5]))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",21377,True
"def reverse_list(l=None):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l=None):
    if len(l) == 0:
        return l
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",21391,True
"def reverse_list(a):
    if len(a) == 0:
        return a
    return [l[-1]] + reverse_list(l[:-1])
    return reverse_list(a[a:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='l', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_0', ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return a
    return [l[-1]] + reverse_list(l[:-1])
    return reverse_list(a[a:])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",21409,True
"def search(str, letter):
    if str == []:
        return False
    elif lstr[0] == letter:
        return True
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='lstr', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == []:
        return False
    elif lstr[0] == letter:
        return True
    else:
        return search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",21440,True
"def remove_zeros(nums):
    gway = []
    i = 0
    while i < len(nums):
        if int(nums[i]) != 0:
            gway.append(nums[i])
        i = i + 1
    nums = gway
    return nums",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_1', ctx=Load())), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(nums):
    gway = []
    i = 0
    while i < len(nums):
        if int(nums[i]) != 0:
            gway.append(nums[i])
        i = i + 1
    nums = gway
    return nums","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",21508,True
"def swap_unique_keys_values(d):
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unique_values', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='unique_values', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",21515,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if key not in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if key not in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",21516,True
"def reverse_list(n):
    if len(n) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='l', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='l', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if len(n) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",21543,True
"def fibonacci(n):
    a = 1
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 1
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return a","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",21551,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) - 1:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) - 1:
        return -1","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",21575,True
"def reverse_list(l):
    if not l:
        return l
    return reverse_list(l[:-1].append(l[-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return l
    return reverse_list(l[:-1].append(l[-1]))","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",21583,True
"def union(a, b):
    c = a + b
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a + b
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",21613,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    count = count + 1
    length = count_letters(s[:-1])
    if length == 0:
        return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    count = count + 1
    length = count_letters(s[:-1])
    if length == 0:
        return count","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",21617,True
"def intersection(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return c","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",21622,True
"def reverse_list(a):
    if len(a) == 2:
        return a
    return reverse_list(a[1:] + a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 2:
        return a
    return reverse_list(a[1:] + a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",21625,True
"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    print(list(d.items()))","def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",21656,True
"def swap_keys_values(d):
    return {v: k for k, v in list(dic.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dic', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {v: k for k, v in list(dic.items())}","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",21682,True
"def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if int(l[0]) < lowest:
        lowest = int(l[0])
    return minimum(l[0]).pop",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if int(l[0]) < lowest:
        lowest = int(l[0])
    return minimum(l[0]).pop","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",21722,True
"def minimum(l):
    print('1\n3\n6\n4')",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1\n3\n6\n4')], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    print('1\n3\n6\n4')","def minimum(l):
    return min(l)",21725,True
"def reverse(a):
    rev = []
    for i in len(a):
        rev.append(a[len(a) - i - 1])
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,54e3b0c4-223a-427c-9155-d6954330319d,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    for i in len(a):
        rev.append(a[len(a) - i - 1])
    return rev","def reverse(a):
    if True:
        0
    else:
        0
    b = a[::-1]
    return b",21734,True
"def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    sum_to_n_1 = sumup(n - 1)
    return n * sum_to_n_1",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    sum_to_n_1 = sumup(n - 1)
    return n * sum_to_n_1","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",21746,True
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i < lowest:
            i = lowest
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i < lowest:
            i = lowest
    return lowest","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",21775,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
    return new_d","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",21798,True
"def factorial(n):
    if int(n) == 1:
        return 1
    elif int(n) == 0:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) == 1:
        return 1
    elif int(n) == 0:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",21813,True
"def minimum(l):
    l = l.sort(key=None)
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Constant(value=None))])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = l.sort(key=None)
    return l","def minimum(l):
    l.sort()
    return l[0]",21875,True
"def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",21879,True
"def reverse_list(a):
    if len(a) == 1:
        return [a[0]]
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return [a[0]]
    return reverse_list(a[1:]) + [a[0]]","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",21884,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l.pop(l[1]))
    else:
        return maximum(l.pop(l[0]))",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l.pop(l[1]))
    else:
        return maximum(l.pop(l[0]))","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",21903,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check.append(x[i])
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check.append(y[j])
        j = j + 1
    return answer",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check.append(x[i])
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check.append(y[j])
        j = j + 1
    return answer","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",21940,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",21956,True
"def merge_lists(l1, l2):
    l3 = l1 + l2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1 + l2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",21982,True
"def fibonacci(n):
    Fval = 0
    Sval = 1
    i = 0
    while i <= n:
        if n <= 1:
            return n
        else:
            Next = Fval + Sval
            Fval = Sval
            Sval = Next
        i = i + 1
    return Next",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load()))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    Fval = 0
    Sval = 1
    i = 0
    while i <= n:
        if n <= 1:
            return n
        else:
            Next = Fval + Sval
            Fval = Sval
            Sval = Next
        i = i + 1
    return Next","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",21984,True
"def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] < a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] < a[i]:
                p = i
            z = a[p]
            a[p] = a[c]
            a[c] = z
            i += 1
        c += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",21995,True
"def index(string, letter):
    position = 0
    if string == []:
        print('-1')
    elif string[0] == letter:
        print(position)
    else:
        position += 1
        index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = 0
    if string == []:
        print('-1')
    elif string[0] == letter:
        print(position)
    else:
        position += 1
        index(string[1:], letter)","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",22000,True
"def sumup(N):
    if N != 0:
        N += N - 1
    return N",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='x_0', ctx=Store()), op=Add(), value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sumup(N):
    if N != 0:
        N += N - 1
    return N","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",22020,True
"def swap_unique_keys_values(d):
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='unique_values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unique_values', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='unique_values', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[key[unique_values]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",22071,True
"def fibonacci(n):
    i = -1
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        i = i + 1
    return k",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = -1
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        i = i + 1
    return k","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",22083,True
"def merge_lists(l1, l2):
    l1 = []
    l2 = l1[::2]
    return l2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l1 = []
    l2 = l1[::2]
    return l2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",22132,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1)
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.append(l1)
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",22164,True
"def index(str, letter):
    if letter in str:
        i = 0
        while i < len(string):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        i = 0
        while i < len(string):
            if letter == str[i]:
                return i
            i = i + 1
    else:
        return '-1'","def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",22184,True
"def merge_lists(l1, l2):
    l1 = []
    l3 = l1[::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l1 = []
    l3 = l1[::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",22208,True
"def merge_lists(l1, l2):
    a = []
    i = 0
    while i < len(l1):
        a.append(l1[i])
        i = i + 2
    j = 0
    while i < len(l2):
        a.append(l2[i])
        j = j + 2
    return a",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    a = []
    i = 0
    while i < len(l1):
        a.append(l1[i])
        i = i + 2
    j = 0
    while i < len(l2):
        a.append(l2[i])
        j = j + 2
    return a","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",22216,True
"def fibonacci(n):
    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 
        1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 
        196418, 317811]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34), Constant(value=55), Constant(value=89), Constant(value=144), Constant(value=233), Constant(value=377), Constant(value=610), Constant(value=987), Constant(value=1597), Constant(value=2584), Constant(value=4181), Constant(value=6765), Constant(value=10946), Constant(value=17711), Constant(value=28657), Constant(value=46368), Constant(value=75025), Constant(value=121393), Constant(value=196418), Constant(value=317811)], ctx=Load())), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 
        1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 
        196418, 317811]
    return a[n]","def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",22316,True
"def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[len(l) - 2:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2))), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[len(l) - 2:]).append(l[0])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",22325,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
        else:
            not_unique.append(d[key])
    for i in unique:
        if not not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
        else:
            not_unique.append(d[key])
    for i in unique:
        if not not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    if True:
        for i in a:
            if a[i] not in lis:
                dir[a[i]] = i
        return dir",22345,True
"def reverse_list(a, b=[]):
    if len(b) != len(a) and len(a) != 0:
        b.append(a[-1])
        return reverse_list(a[:-1], b)
    else:
        return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=[]):
    if len(b) != len(a) and len(a) != 0:
        b.append(a[-1])
        return reverse_list(a[:-1], b)
    else:
        return b","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",22353,True
"def sumup(n):
    if n == 1:
        return
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return
    sum_to_n = sumup(n - 1)
    return n + sum_to_n","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",22368,True
"def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev)","def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",22381,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k, v in d:
        if k not in new_d:
            new_d[k] = v
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for k, v in d:
        if k not in new_d:
            new_d[k] = v
    return new_d","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",22399,True
"_A = None


def append2list(l1=_A, l2=_A):
    if l2 is _A:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    elif l1 is _A:
        l1 = []
        for i in l2:
            l1.append(i)
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","_A = None


def append2list(l1=_A, l2=_A):
    if l2 is _A:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    elif l1 is _A:
        l1 = []
        for i in l2:
            l1.append(i)
        return l1","def append2list(l1, l2=None):
    if l2 is None:
        if True:
            0
        l2 = []
        for i in l1:
            l2.append(i)
    else:
        for i in l1:
            l2.append(i)
    return l2",22425,True
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fib(n - 1) + fib(n - 2)","def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",22447,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return 1
    new = reverse_list(l[1:]) + l[:1]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return 1
    new = reverse_list(l[1:]) + l[:1]
    return new","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",22457,True
"def remove_zeros(list):
    i = 0
    if list[i] == 0:
        del list[i]",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    if list[i] == 0:
        del list[i]","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        else:
            0
        list.remove(0)",22494,True
"def swap_unique_keys_values(dictionary_descriptor):
    new_dictionary = {}
    for keys, values in list(dictionary_descriptor.items()):
        try:
            new_dictionary[values] = keys
        except KeyError:
            pass
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dictionary_descriptor):
    new_dictionary = {}
    for keys, values in list(dictionary_descriptor.items()):
        try:
            new_dictionary[values] = keys
        except KeyError:
            pass
    return new_dictionary","def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        del new_dict[value]
    return new_dict",22498,False
"def merge_lists(l1, l2):
    l3 == l1[0::2] + l2[0::2]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='l3', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), step=Constant(value=2)), ctx=Load()))])), Return(value=Name(id='l3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 == l1[0::2] + l2[0::2]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",22516,True
"def minimum(l):
    sorted(l)
    return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    sorted(l)
    return l","def minimum(l):
    return sorted(l)[0]",22521,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",22528,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1) and l3.append(l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1) and l3.append(l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    if True:
        0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",22549,True
"def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop()
    newli = reverse_list(li)
    newli.append(x)
    return newli",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop()
    newli = reverse_list(li)
    newli.append(x)
    return newli","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",22597,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return l[-1].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    return l[-1].append(reverse_list(l[1:]))","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",22634,True
"def union(a, b):
    a not in b
    c = a + b
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a not in b
    c = a + b
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",22637,True
"def intersection(a, b):
    seen = {}
    appended = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
    i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in appended:
            c.append(b[i])
            appended[b[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,b8415cb6-c612-4985-9211-908831b3834e,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    appended = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
    i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in appended:
            c.append(b[i])
            appended[b[i]] = True
        i = i + 1
    return c","def intersection(a, b):
    seen = {}
    appended = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in appended:
            c.append(b[i])
            appended[b[i]] = True
        i = i + 1
    return c",22693,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,b842b3b5-71ff-4f80-9bd4-d5973c3f5123,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)","def index(s, letter):
    if letter in s:
        if False:
            0
        return s.index(letter)
    return -1",22730,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return n + fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 1:
        return 1
    return n + fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",22748,True
"def reverse_list(a):
    return reverse(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    return reverse(a)","def reverse_list(ls):
    ls.reverse()
    return ls",22754,True
"def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[:]):
        return l[0]
    else:
        return minimum(l[:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 1:
        return l[0]
    if l[0] < minimum(l[:]):
        return l[0]
    else:
        return minimum(l[:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",22775,True
"def union(a, b):
    c = set(a + b)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = set(a + b)
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",22825,True
"def remove_zeros(list):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i + 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",22833,True
"def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a).append(a[0])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",22843,True
"def count_letters(s):
    if s == '':
        return 0
    elif s != '':
        s = s.split()
        total += 1
        return total + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    elif s != '':
        s = s.split()
        total += 1
        return total + count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    elif False:
        0
    s = s[1:]
    return 1 + count_letters(s)",22910,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            c = a, b
            return c
            i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            c = a, b
            return c
            i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",22922,True
"def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        if int(n) in k:
            return i
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        if int(n) in k:
            return i
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",22962,True
"def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    for item in deleted:
        del newDick[item]",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e6a8cd93-4b6e-49db-8b16-a473b45b9a4a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    for item in deleted:
        del newDick[item]","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",22974,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 1:
            l3.append(l2[j])
        j = j + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 0:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 1:
            l3.append(l2[j])
        j = j + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",22983,True
"def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + power(nth - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + power(nth - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",22988,True
"def factorial(n=0):
    return product(list(range(n))) * n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=BinOp(left=Call(func=Name(id='product', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n=0):
    return product(list(range(n))) * n","def factorial(n):
    if n < 2 and True:
        return 1
    else:
        0
    return n * factorial(n - 1)",22994,True
"def reverse_list(n):
    if len(n) == 0:
        return []
    return [n[-1] + reverse_list((1)[:-1])]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Constant(value=1), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if len(n) == 0:
        return []
    return [n[-1] + reverse_list((1)[:-1])]","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",23016,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    if letter not in string:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    if letter not in string:
        return 'False'","def search(str, letter):
    if str == '':
        if True:
            return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",23027,True
"def merge_lists(l1, l2):
    l3 = l1.append(l2)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1.append(l2)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",23034,True
"def sumup(n):
    if n == 0:
        return 0
    return sumup(n + (n - 1))",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], keywords=[]))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return sumup(n + (n - 1))","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",23069,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] > l[i + 1]:
        i = i + 1
        l = l[i]
    else:
        l.pop(i + 1)
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] > l[i + 1]:
        i = i + 1
        l = l[i]
    else:
        l.pop(i + 1)
    return minimum(l)","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",23105,True
"def union(a, b):
    i = 0
    d = {}
    while i < len(a):
        d[a[i]] = True
        i = i + 1
        print(d)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    d = {}
    while i < len(a):
        d[a[i]] = True
        i = i + 1
        print(d)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",23132,True
"def intersection(a, b):
    set = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in set:
            set[a[i]] = True
        i = i + 1
        return set",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    set = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in set:
            set[a[i]] = True
        i = i + 1
        return set","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",23135,True
"def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(i)
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(i)
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",23161,True
"def sumup(n):
    if n == 1:
        return 1
    return sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",23177,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                values[i] == '@@'
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values) and values[i] != '@@':
        dic[values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_6', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_7', ctx=Load())])]), body=[Expr(value=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='@@')]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='@@')])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                values[i] == '@@'
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values) and values[i] != '@@':
        dic[values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    if False:
        0
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",23211,True
"def index(str, letter):
    if letter in str:
        return str
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",23220,True
"def intersection(a, b):
    return list(set(a) & set(b))",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    return list(set(a) & set(b))","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",23302,True
"def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        if n in fib:
            return fib[i]
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while i < 10:
        if n in fib:
            return fib[i]
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",23396,True
"def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return reverse_list(a[1:]).append(a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",23410,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del s
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
        elif d[s] in e:
            del s
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",23419,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d3","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",23451,True
"def merge_lists(l1, l2):
    l1 = []
    l2 = []
    l3 = l1 + l2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l1 = []
    l2 = []
    l3 = l1 + l2
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",23462,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(0))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l.pop(0))","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",23470,True
"def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n + 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n * factorial(n + 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",23493,True
"def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        l3.append(l2[i])
        i = i + 2
        j = j + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(l1[i])
        l3.append(l2[i])
        i = i + 2
        j = j + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",23495,True
"def index(word, letter):
    if letter not in word:
        return -1
    else:
        i = 0
        while word[i] != letter:
            i = i + 1
        return i",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(word, letter):
    if letter not in word:
        return -1
    else:
        i = 0
        while word[i] != letter:
            i = i + 1
        return i","def index(string, letter, count):
    print(count)
    k = len(string)
    if False:
        0
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",23502,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        i = i + 1
    else:
        return '-1'
    i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        i = i + 1
    else:
        return '-1'
    i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    if True:
        return -1",23532,True
"def count_letters(s):
    if s == '':
        return 0
    else:
        i = 1
        f = s[i + 1:]
    return i + count_letters(f)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    else:
        i = 1
        f = s[i + 1:]
    return i + count_letters(f)","def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",23545,True
"def maximum(l):
    l = sorted(l)
    if l[len(l) - 1] > l[len(l) - 2]:
        return l[len(l) - 1]
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    l = sorted(l)
    if l[len(l) - 1] > l[len(l) - 2]:
        return l[len(l) - 1]
    return maximum(l)","def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",23641,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(d.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), reverse=True)
    for keys, values in sorx2:
        if values != 'N':
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(d.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), reverse=True)
    for keys, values in sorx2:
        if values != 'N':
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",23707,True
"def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list(l[:1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list(l[:1]))","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",23709,True
"def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    for k in list(inv.keys()):
        if list(inv.keys()).count(inv[k]) > 1:
            del inv[k]
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    inv = {v: k for k, v in list(d.items())}
    for k in list(inv.keys()):
        if list(inv.keys()).count(inv[k]) > 1:
            del inv[k]
    return inv","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",23744,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        dictionary[d[unique]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        dictionary[d[unique]] = key
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",23751,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return 1 + index(str[1:], letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return 1 + index(str[1:], letter, pos)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",23760,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",23832,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",23847,True
"def remove_zeros(list):
    return [value for value in list if value != 0]",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='value', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    return [value for value in list if value != 0]","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        else:
            0
        list.remove(0)",23859,True
"def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",23888,True
"def minimum(l, n=0):
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l, n=0):
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",23959,True
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i > lowest:
            lowest = i
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i > lowest:
            lowest = i
    return lowest","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",23965,True
"def reverse_list(s):
    if len(s) == 1 or len(s) == 0:
        return s
    else:
        return s[-1] + reverse_list(s[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(s):
    if len(s) == 1 or len(s) == 0:
        return s
    else:
        return s[-1] + reverse_list(s[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",23971,True
"def intersection():
    c = []
    while i < len(a):
        if a[i] in b:
            c.append(a[i])
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='b', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection():
    c = []
    while i < len(a):
        if a[i] in b:
            c.append(a[i])
        i = i + 1
    return c","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",23985,True
"def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        print(int(len(str)))
    else:
        return index(str[:len(str)], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        print(int(len(str)))
    else:
        return index(str[:len(str)], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",24029,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] and s not in e:
            e[s] = d[s]
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] and s not in e:
            e[s] = d[s]
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",24040,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] > l[i + 1]:
        i += 1
        l = l[i:]
    else:
        l.pop(i + 1)
    return minimum()",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] > l[i + 1]:
        i += 1
        l = l[i:]
    else:
        l.pop(i + 1)
    return minimum()","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",24066,True
"def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
        1597]
    while i < 10:
        return fib[n]
        i = i + 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34), Constant(value=55), Constant(value=89), Constant(value=144), Constant(value=233), Constant(value=377), Constant(value=610), Constant(value=987), Constant(value=1597)], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
        1597]
    while i < 10:
        return fib[n]
        i = i + 1","def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",24068,True
"def factorial(n):
    if int(n) == 0:
        return 0
    return int(n) * factorial(int(n) - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) == 0:
        return 0
    return int(n) * factorial(int(n) - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",24073,True
"def maximum(n):
    if len(n) == 1:
        return n[0]
    else:
        min_ret = minimum(n[1:])
        return n[0] if n[0] > min_ret else min_ret",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def maximum(n):
    if len(n) == 1:
        return n[0]
    else:
        min_ret = minimum(n[1:])
        return n[0] if n[0] > min_ret else min_ret","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",24086,True
"def swap_keys_values(dic):
    a, b, c = [], [], {}
    for file in dict:
        a.append(file)
    for letter in a:
        c[dic[letter]] = letter
    return c",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='dict', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    a, b, c = [], [], {}
    for file in dict:
        a.append(file)
    for letter in a:
        c[dic[letter]] = letter
    return c","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",24089,True
"def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'
    i = 0
    while i < len(str):
        if str[i] == letter2:
            return i
        i += 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1')), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'
    i = 0
    while i < len(str):
        if str[i] == letter2:
            return i
        i += 1
    return '-1'","def index(s, letter, num):
    if num == len(s):
        if True:
            if True:
                0
            return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",24097,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < line:
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_5', ctx=Load())]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < line:
        while i < a and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",24098,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[1])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",24123,True
"def swap_keys_values(x):
    d = dict((v, k) for k, v in list(x.items()))
    return x",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    d = dict((v, k) for k, v in list(x.items()))
    return x","def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",24152,True
"def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position = position + 1
            return position
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,4490d043-a9e0-48aa-a62c-ddcc67ed7fba,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position = position + 1
            return position
        else:
            return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",24201,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n < 3:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    elif n < 3:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",24214,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        i = i + 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str[i]:
            return i
        i = i + 1
    else:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    if True:
        return -1",24261,True
"def union(a, b):
    x = a + b
    while 0 < len(x):
        i = 0
        while i < len(x) and x[i] != x:
            i = i + 1
    if i == len(x):
        d[x[i]] = True
    print(union([1, 2, 3], [3, 4, 5]))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    x = a + b
    while 0 < len(x):
        i = 0
        while i < len(x) and x[i] != x:
            i = i + 1
    if i == len(x):
        d[x[i]] = True
    print(union([1, 2, 3], [3, 4, 5]))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    if False:
        0
    for number in seen:
        c.append(number)
    return c",24281,True
"def sumup(n):
    if n == 1:
        return 1
    return n + (n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return n + (n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",24314,True
"def index(str, letter):
    if letter not in str:
        print(-1)
    else:
        i = 0
        while str[i] != letter:
            i = i + 1
        print(i)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        print(-1)
    else:
        i = 0
        while str[i] != letter:
            i = i + 1
        print(i)","def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        if True:
            0
        i += 1
    return -1",24322,True
"def swap_keys_values(d):
    d2 = {}
    ds = sorted(d.items, reverse=True)
    for k, v in ds:
        d2[v] = k
    return d2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d2 = {}
    ds = sorted(d.items, reverse=True)
    for k, v in ds:
        d2[v] = k
    return d2","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",24329,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        large = a[0]
        if a[i] > a[0]:
            a.remove(a[0])
        else:
            a.remove(a[1])
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        large = a[0]
        if a[i] > a[0]:
            a.remove(a[0])
        else:
            a.remove(a[1])
    return maximum(a)","def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] > a[1]:
            del a[1]
        else:
            del a[0]
        return maximum(a)",24348,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[1:].append(l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[1:].append(l[0]))","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",24351,True
"def index(string, letter):
    position = 0
    if string == []:
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = 0
    if string == []:
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",24412,True
"def append2list(l1=None, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1=None, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",24431,True
"def search(str, letter):
    if str[-1] != letter:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str[-1] != letter:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",24483,True
"def swap_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return d","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        if False:
            0
        else:
            0
        temp = d[keys]
        new_dict[temp] = keys
    return new_dict",24485,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    tmp = reverse_list(a[1:])
    tmp.append(a[0])
    return tmp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    tmp = reverse_list(a[1:])
    tmp.append(a[0])
    return tmp","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",24494,True
"def swap_unique_keys_values(d):
    e = {}
    for left, right in d:
        if right not in e:
            e[left] = right
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for left, right in d:
        if right not in e:
            e[left] = right
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",24505,True
"def merge_lists(l1, l2):
    l3 = l1[::2] + l2[::2]
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1[::2] + l2[::2]
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",24524,True
"def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
    else:
        print(n)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
    else:
        print(n)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",24573,True
"def fibonacci(n):
    if n < 3:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 3:
        return n
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24577,True
"def swap_keys_values(s):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key) - 1):
        new_d[key[i]] = value[i]
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,75fca52d-a61c-4d91-946c-d376c5569767,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(s):
    new_d = {}
    key = sorted(d.keys())
    value = sorted(d.values())
    for i in range(0, len(key) - 1):
        new_d[key[i]] = value[i]
    return new_d","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",24583,True
"def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    sort = sorted(list(newd.items()), key=lambda x: x[1])
    return sort",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))])), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    sort = sorted(list(newd.items()), key=lambda x: x[1])
    return sort","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",24640,True
"def merge_lists(l1l2):
    return l1l2[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    return l1l2[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",24643,True
"def factorial(n):
    if n == 1:
        return 1
    return n + factorial(n)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,a8d7ba55-2066-48ff-a791-991413f703dc,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    return n + factorial(n)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",24681,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=False)], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",24719,True
"def index(str, letter):
    if letter in str:
        print(letter[0])
    else:
        print(letter[-1])",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        print(letter[0])
    else:
        print(letter[-1])","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",24763,True
"def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(v)
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        d[values[i]] = keys[i]
        i = i + 1
    return sorted(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(v)
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        d[values[i]] = keys[i]
        i = i + 1
    return sorted(d)","def swap_keys_values(in_dict):
    if True:
        0
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    if True:
        0
    return out_dict",24835,True
"def swap_unique_keys_values(d):
    new_d = {}
    vv = []
    for k in d:
        vv.append(d[k])
    for num in vv:
        for k in d:
            if not vv.count(num) > 1:
                if d[k] == num:
                    new_d[k] = num
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    vv = []
    for k in d:
        vv.append(d[k])
    for num in vv:
        for k in d:
            if not vv.count(num) > 1:
                if d[k] == num:
                    new_d[k] = num
    return new_d","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",24872,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            del list[i]
        i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            del list[i]
        i = i + 1
    return list","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",24913,True
"def swap_unique_keys_values(d):
    d = set(d)
    inv = {v: k for k, v in d}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = set(d)
    inv = {v: k for k, v in d}
    return inv","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",24922,True
"def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            print(a, b)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            print(a, b)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",24929,True
"def search(str, letter):
    if str == []:
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == []:
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",24930,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for key in unique:
        dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for key in unique:
        dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",24937,True
"def sumup(n):
    if n == 0:
        return 0
    return n - sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    return n - sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",24957,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    small = a[0]
    if a[1] < small:
        small = a[1]
    else:
        a.remove(a[0])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    small = a[0]
    if a[1] < small:
        small = a[1]
    else:
        a.remove(a[0])
    return minimum(a)","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)",24960,True
"def index(string, letter, rv):
    if string == []:
        return -1
    elif string[0] == letter:
        return rv
    else:
        rv = rv + 1
        return index(string[1:], letter, rv)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, rv):
    if string == []:
        return -1
    elif string[0] == letter:
        return rv
    else:
        rv = rv + 1
        return index(string[1:], letter, rv)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",24962,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dupsorg = {}
    i = 0
    while i != len(dups):
        dupsorg[dups[i]] = True
        i = i + 1
    puredups = []
    for dups in sorted(dupsorg):
        if dupsorg[dups]:
            puredups.append(dups)
    return puredups
    return puredups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_6', ctx=Load()), slice=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), body=[If(test=Subscript(value=Name(id='x_6', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_7', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_7', ctx=Load())), Return(value=Name(id='x_7', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dupsorg = {}
    i = 0
    while i != len(dups):
        dupsorg[dups[i]] = True
        i = i + 1
    puredups = []
    for dups in sorted(dupsorg):
        if dupsorg[dups]:
            puredups.append(dups)
    return puredups
    return puredups","def intersection(a, b):
    A = True
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = A
        if False:
            0
        if A:
            i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = A
        i = i + 1
    return c",25019,True
"def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a[-1]) + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return []
    return reverse_list(a[-1]) + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",25038,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a)]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a)]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",25068,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return l[i]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return l[i]","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",25078,True
"def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + fibonacci(nth - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + fibonacci(nth - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",25100,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return a[len(a) - 1] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return a[len(a) - 1] + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",25199,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        if d.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        if d.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    new_d = {}
    values = list(d.values())
    keys = list(d.keys())
    i = 0
    for i in range(0, len(values)):
        if values.count(values[i]) < 2:
            new_d[values[i]] = keys[i]
    return new_d",25212,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str[1:], letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str[1:], letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",25259,True
"def merge_lists(l1, l2):
    i = 0
    mergedlist = []
    while i < len(l1):
        mergedlist.append(l1[i])
        i = i + 2
    j = 0
    while i < len(l2):
        mergedlist.append(l2[j])
        j = j + 2
    return mergedlist",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    mergedlist = []
    while i < len(l1):
        mergedlist.append(l1[i])
        i = i + 2
    j = 0
    while i < len(l2):
        mergedlist.append(l2[j])
        j = j + 2
    return mergedlist","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",25262,True
"def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        return k
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        return k
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",25269,True
"def merge_lists(l1, l2):
    import sys
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    sys.stdout.write(merged_list)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_2')]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='x_2', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    import sys
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    sys.stdout.write(merged_list)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",25294,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        l = min(l[0], miminum(l[1:]))
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='miminum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        l = min(l[0], miminum(l[1:]))
        return l","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",25304,True
"def count_letters(a):
    if a == '':
        return 0
    return count_letters(s[1:]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(a):
    if a == '':
        return 0
    return count_letters(s[1:]) + 1","def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[1:]) + 1",25331,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return 'True'
        i += 1
    return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return 'True'
        i += 1
    return False","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",25345,True
"def fibonacci(l):
    if fibonacci(0) == 1 and fibonacci(1) == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(l):
    if fibonacci(0) == 1 and fibonacci(1) == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",25386,True
"def fibonacci(x):
    if x == 0:
        return 0
    elif x == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(x):
    if x == 0:
        return 0
    elif x == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",25418,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",25445,True
"def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        c[a[i]] = True
    i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in c:
            c[b[k]] = True
        k = k + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = {}
    i = 0
    while i < len(a):
        c[a[i]] = True
    i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in c:
            c[b[k]] = True
        k = k + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",25461,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    return minimum(l[1:] if l[0] > l[1] else l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return minimum(l[1:] if l[0] > l[1] else l[:-1])","def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",25485,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25606,True
"def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,54e3b0c4-223a-427c-9155-d6954330319d,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter1, letter2):
    i = 0
    while i < len(str):
        if str[i] == letter1:
            return i
        i += 1
    return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",25612,True
"def index(str, letter):
    if letter in str:
        return str[0]
    else:
        return str[-1]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return str[0]
    else:
        return str[-1]","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",25621,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",25649,True
"def union(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            seen[b[i]] = True
            i = i + 1
    for c in seen:
        return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            seen[b[i]] = True
            i = i + 1
    for c in seen:
        return c","def union(a, b):
    A = True
    a = a + b
    if A:
        0
    elif A:
        0
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = A
        i = i + 1
    for number in seen:
        c.append(number)
    return c",25658,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[-1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[-1:])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",25666,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while k < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while k < len(l1):
        l3.append(l1[k])
        print(i, k)
        i = i + 1
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",25748,True
"def reverse_list(a):
    if not a:
        return a
    else:
        return reverse_list(a[1:] + a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if not a:
        return a
    else:
        return reverse_list(a[1:] + a[0])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",25814,True
"def fibonacci(n):
    return n",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    return n","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        if True:
            0
        a, b = b, a + b
    return a",25821,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[i] > a[j]:
                tmp = a[i]
                a[i] = a[j]
                a[j] = tmp
            j += 1
        i += 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,d030c365-0c70-41fc-bf99-b5270c6b8c31,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[i] > a[j]:
                tmp = a[i]
                a[i] = a[j]
                a[j] = tmp
            j += 1
        i += 1
        return a","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",25851,True
"def index(str, letter):
    i = 0
    while str[i] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",25863,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        dictionary[d[unique[key]]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        dictionary[d[unique[key]]] = key
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",25866,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        list.remove(0)
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        list.remove(0)
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",25870,True
"def factorial(n):
    if n == 0:
        return 1
    return n * factorila(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorila', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    return n * factorila(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",25887,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return l
    else:
        return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return l
    else:
        return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",25905,True
"def sumup(n):
    if n == 1:
        return 1
    return n + sum(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return n + sum(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",26000,True
"def factorial(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",26050,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1.append(l1[i])
    i = i + 2
    j = 0
    while j < len(l2):
        l2.append(l2[j])
    j = j + 2
    print(l1 + l2)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1.append(l1[i])
    i = i + 2
    j = 0
    while j < len(l2):
        l2.append(l2[j])
    j = j + 2
    print(l1 + l2)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",26051,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[:-1].append(l[-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[:-1].append(l[-1]))","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",26069,True
"def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        if not a[i] in a:
            seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        if not a[i] in a:
            seen[a[i]] = True
        i = i + 1
        k = 0
        while k < len(b):
            if not b[k] in b:
                seen[b[k]] = True
            k = k + 1
    return seen","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    if len(seen) == 0:
        0
    for number in seen:
        c.append(number)
    return c",26088,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f93e7adc-52fc-42e1-ba0d-59e245864c63,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    l2.append(l1)
    return l2","def append2list(l1, l2=[]):
    if True:
        return l2 + l1",26138,True
"def fibonacci(n):
    if n == 1 or n == 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,db184e8e-e02b-4772-b74b-547b88d21933,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",26226,True
"def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        new_dic[key] = dic[key]
    return new_dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        new_dic[key] = dic[key]
    return new_dic","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items())[:int(len(list(d.items())) / 2)]:
        a.append(v)
    for k, v in list(d.items())[int(len(list(d.items())) / 2):]:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",26256,True
"def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='l1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='l1', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])","def merge_lists(l1, l2):
    if False:
        0
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",26266,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1, l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1, l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while True:
        if not i < len(l1):
            break
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",26286,True
"def fibonacci(n):
    a = 0
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return b",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    while b <= n:
        prev_a = a
        a = b
        b = prev_a + b
    return b","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",26288,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert a[q] < a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert a[q] < a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",26320,False
"def fibonacci(n):
    i = 0
    while i < 10:
        if n in fibonacci:
            print(n[i])
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=10)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='fibonacci', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    while i < 10:
        if n in fibonacci:
            print(n[i])
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",26374,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[+1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=UAdd(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    return list[+1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",26380,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        if not_unique in unique:
            value.append(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    if True:
        for i in a:
            if a[i] not in lis:
                dir[a[i]] = i
        return dir",26405,True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(l1[i])
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(l1[i])
    return l2","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",26475,True
"def search(ls, val, na=0):
    pos = len(ls)
    if pos == len(ls):
        return False
    elif ls[pos] == val:
        return True
    else:
        return search(ls, val, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val, na=0):
    pos = len(ls)
    if pos == len(ls):
        return False
    elif ls[pos] == val:
        return True
    else:
        return search(ls, val, pos + 1)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",26503,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return line.rstrip()","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",26545,True
"def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[d[key]] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[d[key]] = key
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",26546,True
"def swap_unique_keys_values(d):
    vals = list(d.values())
    inv = {v: k for k, v in list(d.items()) if vals.count(v) == '1'}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vals', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='vals', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='1')])], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    vals = list(d.values())
    inv = {v: k for k, v in list(d.items()) if vals.count(v) == '1'}
    return inv","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",26584,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = []
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = kd
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f15a871d-61c5-494f-8886-91e213b59201,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='kd', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = []
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[v] = kd
        else:
            d2[v] = 'N'
        ds2 = sorted(list(d2.items()), reverse=True)
        for k, v in ds2:
            if v != 'N':
                d3[k] = v
        return d3","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",26603,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    for i in s:
        if s.isalpha():
            total += 1
    return total",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    for i in s:
        if s.isalpha():
            total += 1
    return total","def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        if True:
            count += 1
    return count",26627,True
"def swap_unique_keys_values(d):
    swp_d = {}
    nums = []
    final_nums = []
    dic = {}
    for lines in d:
        nums.append(str(d[lines]))
        swp_d[d[lines]] = lines
    for lines in nums:
        if nums.count(lines) == 1:
            final_nums.append(int(lines))
    for words in final_nums:
        dic[words] = swp_d[words]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,142cacda-ba1b-469c-9b25-8603a78324c9,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    swp_d = {}
    nums = []
    final_nums = []
    dic = {}
    for lines in d:
        nums.append(str(d[lines]))
        swp_d[d[lines]] = lines
    for lines in nums:
        if nums.count(lines) == 1:
            final_nums.append(int(lines))
    for words in final_nums:
        dic[words] = swp_d[words]
    return dic","def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    if len(d) == 0:
        0
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",26672,True
"def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        if key not in new_dic:
            new_dic[key] = value
    return new_dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        if key not in new_dic:
            new_dic[key] = value
    return new_dic","def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",26754,True
"def intersection(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",26770,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        k = k + 2
    i = 0
    k = 0
    while i < len(l2):
        l3.append(l2[k])
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        k = k + 2
    i = 0
    k = 0
    while i < len(l2):
        l3.append(l2[k])
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",26784,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",26799,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",26856,True
"def search(str, letter):
    if letter in str:
        print('True')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        print('True')","def search(string, letter):
    i = 0
    if letter in string:
        return True
    return False",26883,True
"def fibonacci(n):
    if n == len(a):
        return a[n]
    elif n != len(a):
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == len(a):
        return a[n]
    elif n != len(a):
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",26930,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] in d:
            d.remove(s)
    print(d)
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] in d:
            d.remove(s)
    print(d)
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",26944,True
"def selection_sort(a):
    p = 0
    j = p + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = p + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",26975,True
"def swap_unique_keys_values(d):
    val = list(d.values())
    for char in val:
        if count(char) > 1:
            del val[char]
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    val = list(d.values())
    for char in val:
        if count(char) > 1:
            del val[char]
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",26999,True
"def union(a, b):
    c = []
    c = a - b
    seen = {}
    i = 0
    while i < len(c):
        if lines(c) not in seen:
            sys.stdout.write(lines[c])
        i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='lines', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = []
    c = a - b
    seen = {}
    i = 0
    while i < len(c):
        if lines(c) not in seen:
            sys.stdout.write(lines[c])
        i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",27006,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        print(count)
        count += 1
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        print(count)
        count += 1
        return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    elif False:
        0
    s = s[1:]
    return 1 + count_letters(s)",27032,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return ord(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return ord(letter)","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",27044,True
"def selection_sort(a):
    i = p
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = p
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",27077,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27152,True
"def count_letters(s):
    if not s:
        return count_letters.count
    s = s[:-1]
    count_letters.count += 1
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), AugAssign(target=Attribute(value=Name(id='count_letters', ctx=Load()), attr='count', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return count_letters.count
    s = s[:-1]
    count_letters.count += 1
    return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)",27153,True
"def index(str, letter, pos):
    import fibonacci
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_3')]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='x_3', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='x_3', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    import fibonacci
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",27182,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(l1)
        return l2
    else:
        return [l1, l2]",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=List(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(l1)
        return l2
    else:
        return [l1, l2]","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",27244,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n < 1:
        print(a[n])
    elif n > 1:
        print(a[n - 1] + a[n - 2])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n < 1:
        print(a[n])
    elif n > 1:
        print(a[n - 1] + a[n - 2])","def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",27278,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",27349,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    i = 10
    while i < 20:
        new = int(fib[i - 1]) + int(fib[i - 2])
        fib.append(new)
        i += 1
    j = 1
    while j < len(fib):
        if j == n:
            return fib[j]
        j += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=10)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=20)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    i = 10
    while i < 20:
        new = int(fib[i - 1]) + int(fib[i - 2])
        fib.append(new)
        i += 1
    j = 1
    while j < len(fib):
        if j == n:
            return fib[j]
        j += 1","def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        if True:
            i = i + 1
    if n != 0 and n != 1:
        return num",27395,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] and s not in e:
            e[s] = d[s]
        print(d[s])
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] and s not in e:
            e[s] = d[s]
        print(d[s])
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",27409,True
"def sumup(n):
    if n == 0:
        return 0
    else:
        return n * sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    else:
        return n * sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",27469,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        i = i + 1
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        i = i + 1
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    if False:
        0
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",27521,True
"def count_letters(n):
    total = 0
    for char in n:
        total += 1
    return count_letters(n)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(n):
    total = 0
    for char in n:
        total += 1
    return count_letters(n)","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",27522,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n - 1 + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",27558,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0, 3]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Tuple(elts=[Constant(value=0), Constant(value=3)], ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0, 3]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",27622,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for key in unique:
        dictionary[d[key]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='keys', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for key in unique:
        dictionary[d[key]] = keys
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",27628,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",27635,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i], l2[i])
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i], l2[i])
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            0
        l3.append(l2[i])
        i += 2
    return l3",27654,True
"def sumup(n):
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",27724,True
"def swap_unique_keys_values(d):
    d = set(d)
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = set(d)
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",27763,True
"def fibonacci(n):
    print(n[n - 1] + n[n - 2])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    print(n[n - 1] + n[n - 2])","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",27774,True
"def swap_unique_keys_values(d):
    q = {}
    a = []
    for key in d:
        value = d[key]
        if value not in a:
            q[value] = key
            a.append(value)
    return q",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    q = {}
    a = []
    for key in d:
        value = d[key]
        if value not in a:
            q[value] = key
            a.append(value)
    return q","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",27794,True
"def factorial(n):
    if n == 1:
        return 1
    return factorial(n - 1) * factorial(n - 2)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    return factorial(n - 1) * factorial(n - 2)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",27854,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i - 1
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i - 1
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",27891,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]) + [a[0]]","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",27978,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
        print('False')",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
        print('False')","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",28014,True
"def swap_keys_values(d):
    dic = {}
    for key in d:
        d[key] = value
        d[value] = d[key]
    return dic",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    for key in d:
        d[key] = value
        d[value] = d[key]
    return dic","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",28023,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1:] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1:] + reverse_list(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",28091,True
"def union(a, b):
    c = a and b
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a and b
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",28103,True
"def swap_keys_values(d):
    return {v: k for k, v in list(a.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {v: k for k, v in list(a.items())}","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",28108,True
"def swap_unique_keys_values(x):
    sorx = sorted(d.items, reverse=True)
    x1 = {}
    x2 = {}
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    sorx = sorted(d.items, reverse=True)
    x1 = {}
    x2 = {}
    for keys, values in sorx:
        if v not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if v != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",28123,True
"def remove_zeros(list):
    for number in list:
        if number == '0':
            list.pop(number)
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if number == '0':
            list.pop(number)
    return list","def remove_zeros(list):
    while True:
        if not 0 in list:
            if False:
                0
            break
        list.remove(0)",28145,True
"def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",28147,True
"def factorial(x):
    if x == 1:
        return 1
    if x == 0:
        return 0
    return x * factorial(x - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(x):
    if x == 1:
        return 1
    if x == 0:
        return 0
    return x * factorial(x - 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",28152,True
"def intersection(a, b):
    int_seen = {}
    k = 0
    while k < len(a):
        if a[k] in b:
            int_seen[a[k]] = True
        k = k + 1
    return int_seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    int_seen = {}
    k = 0
    while k < len(a):
        if a[k] in b:
            int_seen[a[k]] = True
        k = k + 1
    return int_seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",28165,True
"def union(a, b):
    return list(set(a) | set(b))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    return list(set(a) | set(b))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",28207,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return a[0].append(reverse_list(a[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return a[0].append(reverse_list(a[1:]))","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",28223,True
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",28232,True
"def sumup(N):
    if n == 0:
        return 0
    return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(N):
    if n == 0:
        return 0
    return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",28275,True
"def count_letters(s):
    if s == '':
        return count
    count = 0
    count += 1
    return count_letters(s[1:])
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return count
    count = 0
    count += 1
    return count_letters(s[1:])
    return count","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",28291,True
"def factorial(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return n * factorial(n + 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return n * factorial(n + 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",28334,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    minimum = minimum(l[1])
    if l[0] < minimum:
        l.pop(minimum)
    else:
        l.pop(l[0])
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_1', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    minimum = minimum(l[1])
    if l[0] < minimum:
        l.pop(minimum)
    else:
        l.pop(l[0])
    return l[0]","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",28358,True
"def union(a, b):
    return a + b",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def union(a, b):
    return a + b","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",28369,True
"def minimum(n):
    if len(n) == 1:
        return n[0]
    else:
        min_ret = minimum(n[1:])
        return n[0] if n[0] > min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if len(n) == 1:
        return n[0]
    else:
        min_ret = minimum(n[1:])
        return n[0] if n[0] > min_ret else min_ret","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",28377,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        else:
            return '-1'
        i = i + 1
    return letter_pos",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=Constant(value='-1'))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        else:
            return '-1'
        i = i + 1
    return letter_pos","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            0
        i = i + 1
    return -1",28381,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        l2.append(l1)
    return l2","def append2list(l1, l2=[]):
    if True:
        return l2 + l1",28418,True
"def index(str, letter):
    if letter not in str:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    return -1",28487,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",28494,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    b = a[1:]
    return reverse_list(b).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    b = a[1:]
    return reverse_list(b).append(a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",28495,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",28513,True
"def swap_keys_values(d):
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    print({v: k for k, v in list(d.items())})","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",28546,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return l[-1] + reverse_list(l[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    return l[-1] + reverse_list(l[1:])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",28556,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert q < a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert q < a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",28607,False
"def search(str, letter):
    B = False
    A = True
    for letters in str:
        statement = A
        while statement != A:
            if letter in letters:
                print(A)
                statement = B
            else:
                print(B)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Name(id='x_3', ctx=Load())), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_4', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    B = False
    A = True
    for letters in str:
        statement = A
        while statement != A:
            if letter in letters:
                print(A)
                statement = B
            else:
                print(B)","def search(str, letter):
    A = True
    i = 0
    if A:
        while i < len(str):
            if letter == str[i]:
                if A:
                    return A
            i = i + 1
        return False",28612,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if mini > l[i]:
            mini = int(l[i])
        i = i + 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if mini > l[i]:
            mini = int(l[i])
        i = i + 1
    return mini","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",28641,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[0])
    elif l[0] < l[1]:
        l.remove(l[1])
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[0])
    elif l[0] < l[1]:
        l.remove(l[1])
    return minimum(l)","def minimum(a):
    if len(a) == 1:
        return a[-1]
    if a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",28643,True
"def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 1 and i != 0:
            n.remove(n[i])
        i = i + 1
    return n",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(n, m):
    i = 0
    while i < len(m):
        n.append(m[i])
        i = i + 1
    i = 0
    while i < len(n):
        if i % 2 == 1 and i != 0:
            n.remove(n[i])
        i = i + 1
    return n","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",28644,True
"def count_letters(s, l=[]):
    if not s:
        return sum(l)
    l.append(1)
    s = s[1:]
    return count_letters(l, s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s, l=[]):
    if not s:
        return sum(l)
    l.append(1)
    s = s[1:]
    return count_letters(l, s)","def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])",28740,True
"def swap_unique_keys_values(d):
    b = {}
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    b = {}
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",28754,True
"def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return [a[-1]] + reverse_list[:-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return [a[-1]] + reverse_list[:-1]","def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])",28807,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.append(a[0])
    return minimum(a[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.append(a[0])
    return minimum(a[1:])","def maximum(l):
    if len(l) == 1:
        return l[0]
    bigger = maximum(l[1:])
    if l[0] > bigger:
        return l[0]
    return bigger",28816,True
"def fibonacci(n):
    if n < 2:
        return n
    return fib(n - 2) + fib(n - 1)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return n
    return fib(n - 2) + fib(n - 1)","def fibonacci(n):
    a = 1
    b = 1
    if True:
        0
    for i in range(n - 1):
        a, b = b, a + b
    return a",28833,True
"def swap_keys_values(d):
    inv_map = {a: b for b, a in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    inv_map = {a: b for b, a in list(d.items())}","def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",28840,True
"def minimum(lst):
    if lst == []:
        return 0
    return 1 + minimum(lst[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def minimum(lst):
    if lst == []:
        return 0
    return 1 + minimum(lst[:-1])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",28862,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_6', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_7', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_values', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(values):
        dic[values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",28880,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return index(str[1:], letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 0
    else:
        return index(str[1:], letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",28893,True
"def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in b:
            seen[b[j]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in b:
            seen[b[j]] = True
        j = j + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",28928,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
        return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
        return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",28948,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
        return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
        return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",28968,True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return n + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1:
        return 1
    else:
        return n + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",28996,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = str(l1_1) + str(l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = str(l1_1) + str(l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while True:
        if not i < len(l1):
            break
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",29004,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return mid","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29021,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29045,True
"def search(string, letter):
    if letter not in string:
        print('False')
    else:
        print('True')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if letter not in string:
        print('False')
    else:
        print('True')","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",29051,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[i] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            if True:
                0
            store[k] = v
    return {v: k for k, v in list(store.items())}",29087,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",29114,True
"def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[key[d]] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key in d:
        new_dict[key[d]] = key
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",29119,True
"def maximum(l):
    max = 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l).pop(l[1])
    else:
        return maximum(l).pop(l[0])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    max = 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum(l).pop(l[1])
    else:
        return maximum(l).pop(l[0])","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",29175,True
"def swap_unique_keys_values(d):
    A = False
    keyval = []
    new = {}
    done = {}
    for k, v in list(d.items()):
        keyval.append((v, k))
    done[keyval[0][0]] = A
    for each in keyval:
        if each[0] not in done:
            done[each[[0]]] = A
        else:
            done[each[0]] = True
        for each in keyval:
            if not done[each[0]]:
                new[each[0]] = each[1]
        return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_6', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=List(elts=[Constant(value=0)], ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    keyval = []
    new = {}
    done = {}
    for k, v in list(d.items()):
        keyval.append((v, k))
    done[keyval[0][0]] = A
    for each in keyval:
        if each[0] not in done:
            done[each[[0]]] = A
        else:
            done[each[0]] = True
        for each in keyval:
            if not done[each[0]]:
                new[each[0]] = each[1]
        return new","def swap_unique_keys_values(a):
    lis = []
    if False:
        0
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",29245,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if not d.count(d[k]) > 1:
            new_d[k] = d[k]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if not d.count(d[k]) > 1:
            new_d[k] = d[k]
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",29261,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j += 2
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[j])
        j += 2
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",29307,True
"def swap_keys_values(d):
    print(d)
    new_dict = {}
    i = 0
    while i < len(d):
        new_dict[d[i]] = d[0]
        i += 1
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    print(d)
    new_dict = {}
    i = 0
    while i < len(d):
        new_dict[d[i]] = d[0]
        i += 1
    return new_dict","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",29365,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), reverse=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), reverse=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",29397,True
"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n == 0:
        return 0
    else:
        0
    if n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib",29402,True
"def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for v in unique_values:
        new_d[key] = d[key]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    unique_values = list(set(d.values()))
    d = {v: k for k, v in list(d.items())}
    new_d = {}
    for v in unique_values:
        new_d[key] = d[key]
    return new_d","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",29465,True
"def minimum(l):
    if len(l) == 0:
        return l
    min = minimum(l[1:])
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 0:
        return l
    min = minimum(l[1:])
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",29524,True
"def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",29541,True
"def merge_lists(l1, l2):
    l3 = list(set(l1 + l2))
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[])], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = list(set(l1 + l2))
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",29558,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return True
        else:
            return False
        i = i + 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,12d00542-0a26-4a35-a142-ccd508484c14,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return True
        else:
            return False
        i = i + 1","def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            0
        i = i + 1
    return False",29575,True
"def swap_unique_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    invalid = []
    swappeddict = {}
    for value in list(dictionary.values()):
        if value not in oldvalues:
            oldvalues.append(value)
        else:
            oldvalues.pop(value)
            invalid.append(value)
    for key in list(dictionary.keys()):
        if key.value() not in invalid:
            oldkeys.append(key)
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='x_5', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    invalid = []
    swappeddict = {}
    for value in list(dictionary.values()):
        if value not in oldvalues:
            oldvalues.append(value)
        else:
            oldvalues.pop(value)
            invalid.append(value)
    for key in list(dictionary.keys()):
        if key.value() not in invalid:
            oldkeys.append(key)
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if True:
            0
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    if True:
        return dir",29581,True
"def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if line(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i - 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='line', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while i < len(list):
        if line(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i - 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",29582,True
"def swap_unique_keys_values(d):
    seen = {}
    new_d = {}
    for k in d:
        seen[k] += 1
    for item in seen:
        if d[item] == 1:
            new_d[item] = True
    for k in new_d:
        for key in d:
            if k in d:
                new_d[k] = d[key]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = {}
    new_d = {}
    for k in d:
        seen[k] += 1
    for item in seen:
        if d[item] == 1:
            new_d[item] = True
    for k in new_d:
        for key in d:
            if k in d:
                new_d[k] = d[key]
    return new_d","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",29597,True
"def union(a, b):
    a = a - b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = a - b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",29658,True
"def fibonacci(n):
    a = [0, 1]
    if n == len(a) - 1:
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    if n == len(a) - 1:
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",29705,True
"def fibonacci(n):
    a = [0, 1]
    if len(a) == n + 1:
        print(a[n])
    else:
        total = int(a[n]) + int(a[n + 1])
        a.append(total)
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    if len(a) == n + 1:
        print(a[n])
    else:
        total = int(a[n]) + int(a[n + 1])
        a.append(total)
        fibonacci(n + 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",29716,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i - 1
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i - 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i - 1
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",29735,True
"def index(sting, letter):
    if letter not in string:
        print('-1')
    if letter in string:
        a = list(string)
        print(a.index(letter))",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='string', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='string', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(sting, letter):
    if letter not in string:
        print('-1')
    if letter in string:
        a = list(string)
        print(a.index(letter))","def index(s, letter):
    if False:
        0
    if letter in s:
        return s.index(letter)
    return -1",29781,True
"def minimum(l, n=0):
    if l == None:
        return l
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l, n=0):
    if l == None:
        return l
    min = minimum(l[1:], n - 1)
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",29839,True
"def minimum(l):
    lowest = 10000000000
    print(l[0])
    if l == []:
        return lowest
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l[0]).pop",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = 10000000000
    print(l[0])
    if l == []:
        return lowest
    if l[0] < lowest:
        lowest = l[0]
    return minimum(l[0]).pop","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",29960,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",29967,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    print(values)
    for key in d:
        if d.count(values) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for key in d:
        values.append(d[key])
    print(values)
    for key in d:
        if d.count(values) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",29979,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='x_1', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if list(str) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",30018,True
"def minimum(list):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 2:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",30043,True
"def append2list(l1, l2=[]):
    if not l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if not l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=[]):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",30055,True
"def swap_unique_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(v)
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        if values[i] not in d:
            d[values[i]] = keys[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    keys = list(dic.keys())
    values = list(dic.values())
    d = {}
    values = []
    keys = []
    for v in list(dic.values()):
        values.append(v)
    for k in list(dic.keys()):
        keys.append(k)
    i = 0
    while i < len(values):
        if values[i] not in d:
            d[values[i]] = keys[i]
        i = i + 1
    return d","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    if True:
        0
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",30165,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i = i + 1
    if i < len(str):
        print(i)
    else:
        print('-1')","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",30205,True
"def maximum(n=[]):
    return max(maximum(n))",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(n=[]):
    return max(maximum(n))","def maximum(l):
    return max(l)",30206,True
"def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
        else:
            del d2[k]
    print(d2)
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0964a543-93db-460b-a0c5-d0c94fea250f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
        else:
            del d2[k]
    print(d2)
    d3 = {}
    for k, v in list(d2.items()):
        d3[v] = k
    return d3","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",30221,True
"def swap_keys_values(d):
    return {v: d for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_0', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {v: d for k, v in list(d.items())}","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",30225,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        print('False')
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[])), Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        print('False')
        return search(string[1:], letter)","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",30226,True
"def union(a, b):
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",30261,True
"def swap_unique_keys_values(d):
    d = dict(set(d))
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = dict(set(d))
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",30262,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if int(a[i]) in b:
            s.append(a[i])
        i = i + 1
    return s",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if int(a[i]) in b:
            s.append(a[i])
        i = i + 1
    return s","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",30296,True
"def reverse_list(l):
    if len(a) == 0:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,70a531fa-76d5-4949-ae20-9c7e6db61af8,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(a) == 0:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",30308,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    print(l)
    for key, value in list(s.items()):
        if key in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    print(l)
    for key, value in list(s.items()):
        if key in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",30347,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                t = s[:i]
                t += '1'
                t += s[i:]
                s = t
            i += 1
        if not s.isupper():
            total = 0
            for c in s:
                total += int(c)
            return total
        else:
            return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Name(id='x_2', ctx=Load())), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value='1')), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return total
    else:
        i = 0
        for c in s:
            if c.isalpha():
                t = s[:i]
                t += '1'
                t += s[i:]
                s = t
            i += 1
        if not s.isupper():
            total = 0
            for c in s:
                total += int(c)
            return total
        else:
            return count_letters(s)","def count_letters(s):
    A = False
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    if A:
        if A:
            0
        if True:
            0
    return counter",30363,True
"def index(str, letter):
    if letter in str:
        return len(str[letter])
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return len(str[letter])
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",30375,True
"def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[j] in l2:
            l3.append(l2[j])
            j = j + 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[j] in l2:
            l3.append(l2[j])
            j = j + 2
    return l3","def merge_lists(l1, l2):
    if True:
        l3 = []
        i = 0
        while i < len(l1):
            l3.append(l1[i])
            i += 2
        i = 0
        while i < len(l2):
            l3.append(l2[i])
            i += 2
        return l3",30403,True
"def selection_sort(a):
    i = 0
    p = 1
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = 1
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",30429,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s.replace[s[0], ''])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='')], ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s.replace[s[0], ''])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",30464,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",30495,True
"def fibonacci(n):
    if n <= 2:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d030c365-0c70-41fc-bf99-b5270c6b8c31,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 2:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",30525,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    return l[0] < minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return l[0] < minimum(l[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",30571,True
"def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])
        if string[i] == letter:
            return i
        i = i + 1
    if letter not in a:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9c13ddb1-6d39-4008-85d0-50d504649bb6,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])
        if string[i] == letter:
            return i
        i = i + 1
    if letter not in a:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    if i == len(str):
        return -1",30581,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for key in d:
        if key not in new_dict:
            new_dict[d[key]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for key in d:
        if key not in new_dict:
            new_dict[d[key]] = key
    return new_dict","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",30609,True
"def reverse_list(list):
    i = 0
    while i <= len(list) // 2:
        list[i], list[len(list) - 1 - i] = list[len(list) - 1 - i], list[i]
        i += 1
    return list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(list):
    i = 0
    while i <= len(list) // 2:
        list[i], list[len(list) - 1 - i] = list[len(list) - 1 - i], list[i]
        i += 1
    return list","def reverse_list(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - 1 - i]
        a[len(a) - 1 - i] = tmp
        i += 1
    return a",30627,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] < 2]
    for key, value in list(s.items()):
        if s[key] not in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] < 2]
    for key, value in list(s.items()):
        if s[key] not in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",30632,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v in d2:
            d2[v] = 'N'
        else:
            d2[v] = k
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v in d2:
            d2[v] = 'N'
        else:
            d2[v] = k
    ds2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",30661,True
"def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l[0]
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",30665,True
"def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    return rev","def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",30666,True
"def intersection(a, b):
    return a or b",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,99d129a4-97af-42ac-a543-23b9157331f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    return a or b","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",30679,True
"def fibonacci(n):
    a, b = 0, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3bb099c4-4248-4efd-bfe2-3c423b916ce0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a, b = 0, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a","def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",30702,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[t[0]]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_8', ctx=Store()), Name(id='x_9', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_9', ctx=Load()), Name(id='x_8', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_7', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[t[0]]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",30715,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return str[letter]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return str[letter]","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",30723,True
"def sumup(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return n * sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return n * sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    elif False:
        0
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",30728,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    sortd = sorted(list(d.items()), reverse=True)
    return sortd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    sortd = sorted(list(d.items()), reverse=True)
    return sortd","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",30738,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[Expr(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",30763,True
"def reverse_list(l=[]):
    return l.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    return l.reverse()","def reverse_list(a=[]):
    a.reverse()
    return a",30792,True
"def search(str):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","def search(str):
    if letter in str:
        return 'True'
    else:
        return 'False'","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",30855,True
"def index(str, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='ls', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='val', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",30909,True
"def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[j] in l2:
            l3.append(l2[j])
            j = j + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[j] in l2:
            l3.append(l2[j])
            j = j + 1
    return l3","def merge_lists(l1, l2):
    if True:
        l3 = []
        i = 0
        while i < len(l1):
            l3.append(l1[i])
            i += 2
        i = 0
        while i < len(l2):
            l3.append(l2[i])
            i += 2
        return l3",30929,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for key in d:
        if d[key] not in new_dict:
            new_dict[d[key]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for key in d:
        if d[key] not in new_dict:
            new_dict[d[key]] = key
    return new_dict","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",30931,True
"def factorial(n):
    if n == 0 or n == 1:
        return 1
    return factorial(n - 1) * factorial(n - 2)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0 or n == 1:
        return 1
    return factorial(n - 1) * factorial(n - 2)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",30946,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    small = a[0]
    i = 0
    if a[i + 1] < small:
        small = a[i]
    else:
        a.remove(a[i])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    small = a[0]
    i = 0
    if a[i + 1] < small:
        small = a[i]
    else:
        a.remove(a[i])
    return minimum(a)","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)",31017,True
"def factorial(n):
    if n == 1:
        return 0
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 0
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",31018,True
"def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l[0]
    return l.append(reverse_list[:-1])","def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",31025,True
"def fibonacci(n):
    n1 = 0
    n2 = 1
    count = 0
    while count < n:
        if n == 0:
            print(n1)
        elif n == 1:
            print(n2)
        else:
            print(n1)
            print(n2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))])])], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    n1 = 0
    n2 = 1
    count = 0
    while count < n:
        if n == 0:
            print(n1)
        elif n == 1:
            print(n2)
        else:
            print(n1)
            print(n2)","def fibonacci(n):
    if n == 0:
        return 0
    if True:
        if n == 1:
            return 1
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",31081,True
"def reverse_list(l):
    if len(l) == 0:
        return l
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l
    return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",31151,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[-2] > l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(L[:-2] + l[-1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='L', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[-2] > l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(L[:-2] + l[-1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",31164,True
"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return '-1'",,31219,False
"def remove_zeros(a):
    i = 0
    while i < len(a):
        if a[i] == 0:
            del a[i]
        elif a[i] == 0:
            del a[i]
        i = i + 1
        return a",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        if a[i] == 0:
            del a[i]
        elif a[i] == 0:
            del a[i]
        i = i + 1
        return a","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)
        elif False:
            0",31227,True
"def remove_zeros(list):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,161bb8fd-c916-4d4e-a439-1dce6fc8f542,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='a', ctx=Load()), ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len[a]:
        if int(a[i]) == 0:
            a.remove(a[i])
            i = i - 1
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",31243,True
"def remove_zeros(a):
    i = 0
    while len(a):
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while len(a):
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",31248,True
"def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < len(i):
        j = k
        k = k + j
        if n in k:
            return i
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < len(i):
        j = k
        k = k + j
        if n in k:
            return i
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",31272,True
"def fibonacci(n):
    if n > 1:
        return fibonacci(n - 2) + fiboacci(n - 1)
    return n",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fiboacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n > 1:
        return fibonacci(n - 2) + fiboacci(n - 1)
    return n","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",31283,True
"def count_letters(s):
    count = 0
    for x in s:
        count += 1
        return count_letters(s)
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    for x in s:
        count += 1
        return count_letters(s)
    return count","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",31319,True
"def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth + fibonacci(nth - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth + fibonacci(nth - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",31365,True
"def intersection(a, b):
    seen = []
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = []
    i = 0
    while i < len(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",31386,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v in bad:
            del wards[v]
        elif v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for k, v in list(wards.items()):
        if v in bad:
            del wards[v]
        elif v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}","def swap_unique_keys_values(a):
    A = False
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
        elif A:
            0
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
        elif A:
            0
    return dir",31395,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys[1] in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys[1] in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",31406,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n <= 1:
        print(a[n])
    elif n > 1:
        print(a[n - 1] + a[n - 2])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n <= 1:
        print(a[n])
    elif n > 1:
        print(a[n - 1] + a[n - 2])","def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",31426,True
"def reverse_list(a, b=[]):
    if len(b) != len(a):
        b.append(a[-1])
        return reverse_list(a[:-1], b)
    else:
        return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=[]):
    if len(b) != len(a):
        b.append(a[-1])
        return reverse_list(a[:-1], b)
    else:
        return b","def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",31445,True
"def minimum(l):
    l = l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = l.sort()
    return l[0]","def minimum(l):
    l.sort()
    return l[0]",31463,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    line = result[i]
    while 0 < len(line):
        while i < len(a) and s[i] != line:
            i = i + 1
        if i == len(s):
            s.append(line)
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    if len(a) == 0:
        0
    else:
        while i < len(a):
            if a[i] not in seen:
                c.append(a[i])
                seen[a[i]] = True
            i = i + 1
    return c",31472,True
"def count_letters(s):
    if len(s) == 1:
        return 1
    return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 1:
        return 1
    return 1 + count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",31598,True
"def count_letters(s='', i=0):
    print((s, i))
    if s == '':
        return i
    i += 1
    return count_letters(s.replace[s[0], '', 1], i)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=''), Constant(value=1)], ctx=Load()), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s='', i=0):
    print((s, i))
    if s == '':
        return i
    i += 1
    return count_letters(s.replace[s[0], '', 1], i)","def count_letters(s, i=0):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",31620,True
"def remove_zeros(list):
    value = 0
    while value in list:
        list.remove(value)
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    value = 0
    while value in list:
        list.remove(value)
    return list","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",31624,True
"def fibonacci(n):
    if n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",31680,True
"def swap_keys_values():
    new_dict = {}
    for key in d:
        new_dict[d[key]] = key
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    new_dict = {}
    for key in d:
        new_dict[d[key]] = key
    return new_dict","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",31702,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if d[key] in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if d[key] in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",31710,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[i])
        j += 2
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    j = 0
    while j < len(l2):
        l3.append(l2[i])
        j += 2
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",31750,True
"def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",31757,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            bad[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            bad[k] = v
    for k, v in list(wards.items()):
        if v not in bad:
            end[k] = v
    return {v: k for k, v in list(end.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",31761,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 1
    else:
        return index(str[1:], letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return 1
    else:
        return index(str[1:], letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",31816,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        x = 0
        y = 1
        z = 2
        for n in range(3, n):
            x = y + z
            y = z
            z = x
        return x
    else:
        retrun - 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), For(target=Name(id='x_0', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3), Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Expr(value=BinOp(left=Name(id='retrun', ctx=Load()), op=Sub(), right=Constant(value=1)))])])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n > 1:
        x = 0
        y = 1
        z = 2
        for n in range(3, n):
            x = y + z
            y = z
            z = x
        return x
    else:
        retrun - 1","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    elif False:
        0
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",31859,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",31869,True
"def minimum(list=[]):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    print(max_value)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list=[]):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    print(max_value)","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",31875,True
"def swap_unique_keys_values(d):
    new_d = {}
    seen = []
    for key in d:
        seen.append(d[key])
    for key in d:
        if d[key] in set(seen):
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    seen = []
    for key in d:
        seen.append(d[key])
    for key in d:
        if d[key] in set(seen):
            new_d[d[key]] = key
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",31992,True
"def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",32012,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n <= 2:
        return n
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d030c365-0c70-41fc-bf99-b5270c6b8c31,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    if n <= 2:
        return n
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",32072,True
"def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if d[k] not in opposite:
            opposite[d[k]] = k
        else:
            del d[k]
    return opposite",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if d[k] not in opposite:
            opposite[d[k]] = k
        else:
            del d[k]
    return opposite","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",32081,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    d2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='ds2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d2:
            d2[k] = v
        else:
            d2[v] = 'N'
    d2 = sorted(list(d2.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d3[k] = v
    return d3","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",32106,True
"def swap_keys_values(d):
    tmp = ''
    for key in d:
        key = key.split()
        tmp = key[0]
        key[0] = key[1]
        key[1] = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    tmp = ''
    for key in d:
        key = key.split()
        tmp = key[0]
        key[0] = key[1]
        key[1] = tmp
    return d","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",32179,True
"def swap_keys_values(d):
    return d((v, k) for k, v in d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='x_0', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return d((v, k) for k, v in d.items())","def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",32192,True
"def intersection(a, b):
    d = a - b
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = a - b
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",32207,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    return 'False'","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",32266,True
"def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(list(newd.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(list(newd.items()))","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",32287,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        return count_letters(''.join(s))
    else:
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    elif s != '':
        s = list(s)
        s.pop()
        count += 1
        return count_letters(''.join(s))
    else:
        return count_letters(s)","def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",32326,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='find_smallest_position', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1","def selection_sort(a):
    if True:
        0
    else:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    return a",32331,True
"def minimum(n):
    if n == 1:
        return n[0]
    else:
        min_ret = minimum
        return n[0] if n[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='minimum', ctx=Load())), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 1:
        return n[0]
    else:
        min_ret = minimum
        return n[0] if n[0] < min_ret else min_ret","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",32403,True
"def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
    i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='x_3', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
    i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",32450,True
"def factorial(n):
    if n == 1:
        return n
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return n
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",32458,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = a[i]
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = a[i]
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = a[i]
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",32461,True
"def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.pop(l1)
                return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    for lines in l1:
        i = 0
        while i < len(l1):
            if i == 0 or i % 2 == 0:
                l3.pop(l1)
                return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",32462,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1[i]
    i = i + 1
    while i < len(l2):
        return l2[i]
    i = i + 1",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1[i]
    i = i + 1
    while i < len(l2):
        return l2[i]
    i = i + 1","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",32492,True
"def minimum(list=[]):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(list=[]):
    if len(list) == 1:
        return list[0]
    max_value = max(list)
    return minimum(list.remove(max_value))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",32522,True
"def factorial(n):
    if n == 1:
        return n
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return n
    else:
        return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",32528,True
"def fibonacci(n):
    list = []
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i + 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    print(list[-1])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = []
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num = list[i] + list[i + 1]
        else:
            new_num = list[i] + 1
        list.append(new_num)
        i = i + 1
    print(list[-1])","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",32571,True
"def minimum(n):
    if n == 0:
        return n
    elif n[0] < n[1:]:
        return n[0]
    elif n[0] > n[1:]:
        return minimum(n - 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 0:
        return n
    elif n[0] < n[1:]:
        return n[0]
    elif n[0] > n[1:]:
        return minimum(n - 1)","def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",32574,True
"def index(str, letter):
    return len(str)
    i = 0
    while str[i] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    return len(str)
    i = 0
    while str[i] != letter:
        i = i + 1
    if i == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",32599,True
"def selection_sort(a):
    i = 1
    while i < len(a):
        smallest = i
        j = i + 1
        while j < len(a):
            if a[i] < a[smallest]:
                smallest = i
            j = j + 1
        temp = a[i]
        a[i] = a[j]
        a[j] = temp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 1
    while i < len(a):
        smallest = i
        j = i + 1
        while j < len(a):
            if a[i] < a[smallest]:
                smallest = i
            j = j + 1
        temp = a[i]
        a[i] = a[j]
        a[j] = temp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",32631,True
"def reverse_list(l):
    if len(l) == 0:
        return ''
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return ''
    return [l[-1]] + reverse_list(l[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",32649,True
"def search(string, letter):
    if letter == string:
        return 'True'
    else:
        search(string[1:], letter)
    return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Expr(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), Return(value=Constant(value='False'))], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if letter == string:
        return 'True'
    else:
        search(string[1:], letter)
    return 'False'","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",32661,True
"def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        return int(len(str))
    else:
        return index(str[:len(str)], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if len(str) == 0:
        return -1
    elif str[len(str)] == letter:
        return int(len(str))
    else:
        return index(str[:len(str)], letter)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",32710,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s - s[0])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s - s[0])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",32787,True
"def minimum(l):
    if len(l) == 1:
        return l
    f, m = l[0], minimum(l[1:])
    if f < m:
        return f
    else:
        return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l
    f, m = l[0], minimum(l[1:])
    if f < m:
        return f
    else:
        return m","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",32790,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        unique.pop(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_4', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_7', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    value = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not_unique.append(key)
    for i in unique:
        unique.pop(i)
    for keys in value:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t[:int(len(t) / 2)]:
        del new_d[v]
    for v in t[int(len(t) / 2):]:
        del new_d[v]
    return new_d",32798,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[i] + 1
        list.append(nums)
        i = 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[i] + 1
        list.append(nums)
        i = 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",32799,True
"def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return sumup(n + 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return sumup(n + 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",32865,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
                new_keys.append(keys[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(new_keys):
        dic[new_values[i]] = new_keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_6', ctx=Store()), Name(id='x_7', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_7', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_9', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_8', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_9', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_9', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
                new_keys.append(keys[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(new_keys):
        dic[new_values[i]] = new_keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",32888,True
"def remove_zeros(list):
    i = 0
    if list[i] == '0':
        del list[i]
    i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    if list[i] == '0':
        del list[i]
    i = i + 1
    return list","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",32912,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert q < a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[mid] <= q
        if q < a[mid]:
            high = mid
            assert q < a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",32938,False
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    i = 0
    j = i + 1
    while i < len(l):
        if i < j[i]:
            j[i] = i
    return i",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    i = 0
    j = i + 1
    while i < len(l):
        if i < j[i]:
            j[i] = i
    return i","def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]",32989,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return l
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return l
    else:
        return reverse_list(l[1:]) + l[0]","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",32993,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    i = 0
    while i < len(d):
        values.append(d[i])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    i = 0
    while i < len(d):
        values.append(d[i])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    z = []
    l = []
    for c in list(d.items()):
        l.append(c[1])
    for c in l:
        if l.count(c) == 1:
            z.append(c)
        if False:
            0
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",33028,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[:-1] + l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    return reverse_list(l[:-1] + l[0])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",33046,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=BinOp(left=BinOp(left=Name(id='new_num', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            new_num + list[i] + list[i - 1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",33116,True
"def minimum(l):
    if len(l) == 0:
        return l[0]
    min = minimum(l[1:])
    if l[0] < min:
        return l[0]
    else:
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 0:
        return l[0]
    min = minimum(l[1:])
    if l[0] < min:
        return l[0]
    else:
        return min","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",33150,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    print(l)
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    print(l)
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",33151,True
"def reverse_list(l):
    if len(l) == 2:
        return l
    else:
        return list(l.pop(0)) + reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 2:
        return l
    else:
        return list(l.pop(0)) + reverse_list(l)","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",33207,True
"def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if int(l[0]) < lowest:
        lowest = l[0]
    return minimum(l[0]).pop",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if int(l[0]) < lowest:
        lowest = l[0]
    return minimum(l[0]).pop","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",33212,True
"def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + reverse_list(ihavethehighground[-1] - 1
            )",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return ihavethehighground[-1] + reverse_list(ihavethehighground[-1] - 1
            )","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",33222,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",33333,True
"def remove_zeros(list):
    for number in list:
        if '0' in list:
            return list.remove(0)
        else:
            return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for number in list:
        if '0' in list:
            return list.remove(0)
        else:
            return list","def remove_zeros(list):
    while 0 in list:
        if True:
            if True:
                0
        list.remove(0)",33339,True
"def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(i)
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l1', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) / 2:
        l3.append(i)
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",33341,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].split(',')",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i]).split
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].split(',')","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",33381,True
"def fibonacci(i, n=1):
    if i == 1 or i == 0:
        return 1
    return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e9910cff-d2a2-4310-a748-9ad97a5a964c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(i, n=1):
    if i == 1 or i == 0:
        return 1
    return fibonacci(i - 1) + fibonacci(i - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",33383,True
"def swap_keys_values(x):
    d = {v: k for k, v in list(x.items())}
    return x",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(x):
    d = {v: k for k, v in list(x.items())}
    return x","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",33395,True
"def swap_unique_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",33402,True
"def remove_zeros(list, val):
    for i in range(list.count(val)):
        list.remove(val)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list, val):
    for i in range(list.count(val)):
        list.remove(val)","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",33424,True
"def count_letters(s):
    if not s:
        return 0
    return 1 + s[1:]",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return 0
    return 1 + s[1:]","def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])",33439,True
"def reverse_list(l):
    return l if len(l) == 1 else reverse_list(l[1:]) + [l[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Name(id='x_0', ctx=Load()), orelse=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return l if len(l) == 1 else reverse_list(l[1:]) + [l[0]]","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",33440,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])[::2]
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])[::2]
        i = i + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Subscript(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), slice=Slice(step=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])[::2]
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])[::2]
        i = i + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",33456,True
"def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",33470,True
"def reverse_list(l):
    return reverse_list(l[-1] + l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reverse_list(l[-1] + l[:-1])","def reverse_list(l):
    return l[::-1]",33472,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if b[i] not in c:
            c.append(b[i])
        elif a[i] not in c:
            c.append(a[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if b[i] not in c:
            c.append(b[i])
        elif a[i] not in c:
            c.append(a[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif False:
            0
        i = i + 1
    return c",33475,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter[i] == str:
            print('1')
        else:
            print('-1')
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter[i] == str:
            print('1')
        else:
            print('-1')
        i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",33483,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
        if value in list(new.values()):
            del d[key]
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            new[key] = value
        if value in list(new.values()):
            del d[key]
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",33495,False
"def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",33510,True
"def search(ls, val, pos):
    if pos == len(ls):
        return False
    elif ls[pos] == val:
        return True
    else:
        return search(ls, val, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(ls, val, pos):
    if pos == len(ls):
        return False
    elif ls[pos] == val:
        return True
    else:
        return search(ls, val, pos + 1)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",33533,True
"def intersection():
    import sys
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_0')]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='f1con', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='f1con', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='f2con', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='f2con', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection():
    import sys
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",33534,True
"def remove_zeros(list):
    i = 0
    no_zero_list = []
    while i < len(list):
        if list[i] != 0:
            no_zero_list.append(list[i])
        i = i + 1
    return no_zero_list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    no_zero_list = []
    while i < len(list):
        if list[i] != 0:
            no_zero_list.append(list[i])
        i = i + 1
    return no_zero_list","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",33550,True
"def sumup(n):
    if n < 2:
        return 1
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n < 2:
        return 1
    sum_to_n = sumup(n - 1)
    return n + sum_to_n","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",33553,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == '0':
            list.remove(list[i])
        i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == '0':
            list.remove(list[i])
        i = i + 1
    return list","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",33606,True
"def factorial(n):
    if n == 0:
        return 0
    return n * factorila(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorila', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n * factorila(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",33607,True
"def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return n(n + 1) / 2",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=BinOp(left=Call(func=Name(id='x_0', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), op=Div(), right=Constant(value=2)))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return n(n + 1) / 2","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",33612,True
"def union(a, b):
    a = []
    b = []
    return a, b",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = []
    b = []
    return a, b","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",33628,True
"def fibonacci(n):
    firN = 0
    secN = 1
    while n > 0:
        prev_N = firN
        firN = secN
        sec_N = prev_N + secN
        n -= 1
    return firN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    firN = 0
    secN = 1
    while n > 0:
        prev_N = firN
        firN = secN
        sec_N = prev_N + secN
        n -= 1
    return firN","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",33637,True
"def search(str, letter):
    for letters in str:
        if letter in str:
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    for letters in str:
        if letter in str:
            print('True')
        else:
            print('False')","def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",33668,True
"def reverse_list(n):
    if len(n) == 0:
        return 0
    return reverse_list(n.reverse())",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(n):
    if len(n) == 0:
        return 0
    return reverse_list(n.reverse())","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",33683,True
"def union(a, b):
    union = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",33726,True
"def reverse_list(a):
    if a == '':
        return a
    else:
        return reverse_list(a[1:] + a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if a == '':
        return a
    else:
        return reverse_list(a[1:] + a[0])","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",33737,True
"def merge_lists(l1, l2):
    l3 = []
    my_list = l3.split(',')
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return my_list",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    my_list = l3.split(',')
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return my_list","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",33764,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    print('-1')","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",33803,True
"def swap_unique_keys_values(d):
    for k in list(inv.keys()):
        if list(d.values()).count(d[k]) > 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    for k in list(inv.keys()):
        if list(d.values()).count(d[k]) > 1:
            del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",33805,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
        print(a[i])
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,50aef720-52de-4735-8874-78f5a311b939,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
        print(a[i])
        return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",33808,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l3.append(l1[i])
    i = i + 2
    j = 0
    while j < len(l2):
        l4.append(l2[j])
    j = j + 2
    print(l3 + l4)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='l3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='l4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='l3', ctx=Load()), op=Add(), right=Name(id='l4', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l3.append(l1[i])
    i = i + 2
    j = 0
    while j < len(l2):
        l4.append(l2[j])
    j = j + 2
    print(l3 + l4)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",33827,True
"def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str) - 1:
        i = i + 1
    if i + 1 == len(str):
        return '-1'
    else:
        return i",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while str[i] != letter and i < len(str) - 1:
        i = i + 1
    if i + 1 == len(str):
        return '-1'
    else:
        return i","def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",33832,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        list.remove(0)
    i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        list.remove(0)
    i = i + 1","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",33849,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            i = i + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            i = i + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",33879,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[:-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[:-1]] + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",33949,True
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in range(1, len(l)):
        if i > lowest:
            lowest = i
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in range(1, len(l)):
        if i > lowest:
            lowest = i
    return lowest","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",33982,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",33983,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return a[-1] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return a[-1] + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",33993,True
"def union(a, b):
    c = a, b
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load())), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a, b
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",34021,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,553c9a10-8e3d-401b-8100-2094287197ed,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",34061,True
"def reverse_list(l=[]):
    if len(l) == 0:
        return []
    else:
        return [l[-1] + reverse_list(l[:-1])]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=List(elts=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if len(l) == 0:
        return []
    else:
        return [l[-1] + reverse_list(l[:-1])]","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",34075,True
"def sumup(n):
    print(n)
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    print(n)
    if n == 0:
        return 1
    else:
        return n * sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",34113,True
"def minimum(l):
    for line in l:
        print(line)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def minimum(l):
    for line in l:
        print(line)","def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",34140,True
"def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    for k, v in list(d.items()):
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'X'
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0964a543-93db-460b-a0c5-d0c94fea250f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='X'))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    d3 = {}
    for k, v in list(d.items()):
        if v not in d2:
            d2[v] = k
        else:
            d2[v] = 'X'
    print(d2)","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",34152,True
"def fibonacci(n):
    num_one = 0
    num_two = 1
    while i < n:
        num_two = num_two + num_one
        num_one = num_two - num_one
        i = i + 1
    return num_two",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    num_one = 0
    num_two = 1
    while i < n:
        num_two = num_two + num_one
        num_one = num_two - num_one
        i = i + 1
    return num_two","def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",34165,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while True:
        if not i < len(l1):
            break
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",34214,True
"def swap_keys_values(d):
    for key in d:
        key = key.split()
        tmp = key[0]
        key[0] = key[1]
        key[1] = tmp
    return tmp",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    for key in d:
        key = key.split()
        tmp = key[0]
        key[0] = key[1]
        key[1] = tmp
    return tmp","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",34219,True
"def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            i += 1
        z = a[p]
        a[p] = a[c]
        a[c] = z
        c += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    c = 0
    while c < len(a):
        i = c
        p = c
        while i < len(a):
            if a[p] > a[i]:
                p = i
            i += 1
        z = a[p]
        a[p] = a[c]
        a[c] = z
        c += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",34224,True
"def merge_lists(l1, l2):
    i = 1
    while i < len(l1):
        del l1[i]
    i = i + 1
    i = 1
    while i < len(l2):
        del l2[i]
    i = i + 1
    print(l1 + l2)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 1
    while i < len(l1):
        del l1[i]
    i = i + 1
    i = 1
    while i < len(l2):
        del l2[i]
    i = i + 1
    print(l1 + l2)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",34230,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del d[k]
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del d[k]
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",34238,True
"def minimum(n):
    if n == 0:
        return n
    elif n[0] < minimum(n[1:]):
        return n[0]
    else:
        n[0] > n[1:]
    return minimum(n - 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Expr(value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 0:
        return n
    elif n[0] < minimum(n[1:]):
        return n[0]
    else:
        n[0] > n[1:]
    return minimum(n - 1)","def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",34262,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        return letter_pos
    i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        return letter_pos
    i = i + 1","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",34308,True
"def minimum(l):
    l = sort(l)
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sort', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l = sort(l)
    return l[0]","def minimum(l):
    l.sort()
    return l[0]",34316,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    for key, value in list(s.items()):
        if s[key] in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",34331,True
"def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    for item in deleted:
        del newDick[item]
    print(newDick)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e6a8cd93-4b6e-49db-8b16-a473b45b9a4a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newDick = {}
    deleted = []
    for item in dick:
        if dick[item] not in newDick:
            newDick[dick[item]] = item
        else:
            deleted.append(dick[item])
    for item in deleted:
        del newDick[item]
    print(newDick)","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",34345,True
"def swap_keys_values():
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvlaues] = oldkeys
    return swappeddict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='dictionary', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dictionary', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dictionary', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='oldvlaues', ctx=Load()), ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvlaues] = oldkeys
    return swappeddict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",34366,True
"def maximum(l):
    m = 0
    for line in l:
        if line > m:
            m = line
    return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    m = 0
    for line in l:
        if line > m:
            m = line
    return m","def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",34381,True
"def append2list(l1, l2=None):
    if l2 is None:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",34383,True
"def sumup(n):
    if n == 1:
        return 1
    sum_to_n_1 = sumup(n - 1)
    return n + sum_to_n_1",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    sum_to_n_1 = sumup(n - 1)
    return n + sum_to_n_1","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",34387,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
                new_keys.append(keys[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(keys):
        dic[new_values[i]] = new_keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_6', ctx=Store()), Name(id='x_7', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_7', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_9', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_8', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_9', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_9', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
                new_keys.append(keys[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(keys):
        dic[new_values[i]] = new_keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",34426,True
"def reverse_list(l):
    if len(l) == reverse_list(l):
        return l
    return 1 + reverse_list(l[-1] + l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == reverse_list(l):
        return l
    return 1 + reverse_list(l[-1] + l[:-1])","def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])",34432,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_8', ctx=Store()), Name(id='x_9', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_9', ctx=Load()), Name(id='x_8', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_7', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_10', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='x_7', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_10', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    values = []
    dic = {}
    new_values = []
    new_keys = []
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if not seen[t[0]]:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",34505,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in new:
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in new:
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",34508,True
"def sumup(n):
    if n == 0:
        return 1
    return n + (n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 1
    return n + (n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",34542,True
"def remove_zeros(list):
    i = 0
    for value in list:
        if value == 0:
            del value
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Name(id='x_2', ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    for value in list:
        if value == 0:
            del value
    return list","def remove_zeros(list):
    if False:
        0
    while True:
        if not 0 in list:
            break
        list.remove(0)",34557,True
"def swap_unique_keys_values(d):
    e = {}
    h = {}
    for k, v in d:
        if v in e:
            e[k] = v
        else:
            e[k] = 'n'
    for k, v in e:
        if v != 'n':
            h[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Constant(value='n'))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='n')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    h = {}
    for k, v in d:
        if v in e:
            e[k] = v
        else:
            e[k] = 'n'
    for k, v in e:
        if v != 'n':
            h[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",34599,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1])
    if l[0] < mini:
        l.pop(mini)
    else:
        l.pop(l[0])
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1])
    if l[0] < mini:
        l.pop(mini)
    else:
        l.pop(l[0])
    return l[0]","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",34612,True
"def reverse_list(l):
    if len(l) != 0:
        temp = q.pop(0)
        reverse(ll)
        l.append(temp)
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='ll', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) != 0:
        temp = q.pop(0)
        reverse(ll)
        l.append(temp)
    return l","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",34619,True
"def reverse_list(l=[]):
    i = 0
    while i < len(l):
        new_list = new_list.append(l[len(l) - i])
        i += 1",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    i = 0
    while i < len(l):
        new_list = new_list.append(l[len(l) - i])
        i += 1","def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",34653,True
"def search(str, letter):
    if str[-1] != a:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='a', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str[-1] != a:
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",34658,True
"def maximum(l, i=0):
    j = i
    while j < len(l) and l[j] > l[-1]:
        j += 1
    if j < len(l):
        tmp = l[i]
        l[i] = l[j]
        l[j] = tmp
    if j > len(l):
        return l[-1]
    return minimum(l, i + 1)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l, i=0):
    j = i
    while j < len(l) and l[j] > l[-1]:
        j += 1
    if j < len(l):
        tmp = l[i]
        l[i] = l[j]
        l[j] = tmp
    if j > len(l):
        return l[-1]
    return minimum(l, i + 1)","def maximum(l):
    if True:
        0
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    l.remove(l[0])
    return maximum(l)",34678,False
"def reverse_list(a):
    if len(a) == 1:
        return a
    else:
        return reverse_list[:-2]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    else:
        return reverse_list[:-2]","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",34756,True
"def reverse_list(list):
    if list == []:
        return []
    else:
        return list(reverse_list(list[1:])).append(list[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='x_0', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(list):
    if list == []:
        return []
    else:
        return list(reverse_list(list[1:])).append(list[0])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",34866,True
"def selection_sort(a):
    import func_reverse
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9e8689c2-5967-4244-adc0-65049ce12be4,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_1')]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    import func_reverse
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                swap(a, i, j)
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1
    return a",34935,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",35001,True
"def fibonacci(n):
    first = 0
    second = 0
    while 0 < n:
        last = first
        first = second
        second = last + second
        n = n - 1
    return first",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Constant(value=0), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    first = 0
    second = 0
    while 0 < n:
        last = first
        first = second
        second = last + second
        n = n - 1
    return first","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",35017,True
"def minimum(n):
    if n == 0:
        return n
    elif n[0] < minimum(n[1:]):
        return n[0]
    elif n[0] > n[1:]:
        return minimum(n - 1)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 0:
        return n
    elif n[0] < minimum(n[1:]):
        return n[0]
    elif n[0] > n[1:]:
        return minimum(n - 1)","def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",35020,True
"def search(string, letter):
    if letter not in string:
        return 'False'
    else:
        return 'True'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,a93c9eeb-104a-4436-bd9a-c2e65d311d9e,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value='False'))], orelse=[Return(value=Constant(value='True'))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if letter not in string:
        return 'False'
    else:
        return 'True'","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",35022,True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
        x = a
    else:
        return a + fibonacci(a - x)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(a):
    if a == 0 or a == 1:
        return 1
        x = a
    else:
        return a + fibonacci(a - x)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",35097,True
"def intersection():
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='f1con', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='f1con', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='f2con', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='f2con', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection():
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",35112,True
"def fibonacci(n):
    if n == 0 and n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 and n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",35121,True
"def remove_zeros(list):
    while 0 in list:
        list.remove(0)
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    while 0 in list:
        list.remove(0)
    return list","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",35125,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",35141,True
"def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    for key, value in list(s.items()):
        if key in l:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='c', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    c = Counter(list(s.values()))
    l = [k for k, v in list(s.items()) if c[v] == 1]
    for key, value in list(s.items()):
        if key in l:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",35186,True
"def factorial(n):
    if int(n) == 1:
        return 1
    return int(n) * factorial(int(n) - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) == 1:
        return 1
    return int(n) * factorial(int(n) - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",35256,True
"def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
    j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
    j = j + 1
    return a","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",35316,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    if letter in str:
        letter_pos = i + 1
        return letter_pos
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    if letter in str:
        letter_pos = i + 1
        return letter_pos
    else:
        print('-1')","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",35317,True
"def union(a, b):
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        for number in seen:
            union.append(number)
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if a[i] or b[i] not in seen:
            seen[a[i]] = True
            seen[b[i]] = True
        for number in seen:
            union.append(number)
    return union","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        if True:
            i = i + 1
    for number in seen:
        c.append(number)
    return c",35336,True
"def swap_keys_values(d):
    new_dict = {}
    for k, v in (list(d.keys()), list(d.values())):
        new_dict[v] = k
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,198db91d-9bcb-463c-838e-d8957f078a4a,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for k, v in (list(d.keys()), list(d.values())):
        new_dict[v] = k
    return new_dict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",35363,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",35372,True
"def selection_sort(a):
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        smallest(a, j, p)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='smallest', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_3', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        smallest(a, j, p)
        swap(a, i, p)
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        if len(a) > 0:
            while j < len(a):
                if a[j] < a[i]:
                    tmp = a[j]
                    a[j] = a[i]
                    a[i] = tmp
                j += 1
        i += 1
    return a",35401,True
"def swap_unique_keys_values(d):
    d = list(set(d))
    inv = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = list(set(d))
    inv = {v: k for k, v in list(d.items())}
    return d","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",35427,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",35476,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value in list(new.values()):
            del new[key]
        elif value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value in list(new.values()):
            del new[key]
        elif value not in list(new.values()):
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",35509,True
"def sumup(n):
    if n > 0:
        n = n + sumup(n - 1)
    else:
        print(n)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n > 0:
        n = n + sumup(n - 1)
    else:
        print(n)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",35511,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] >= maximum(l[1:]):
        return l[0]
    else:
        return maximum(l[n + 1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,198db91d-9bcb-463c-838e-d8957f078a4a,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] >= maximum(l[1:]):
        return l[0]
    else:
        return maximum(l[n + 1:])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",35526,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 1:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 1:
            l3.append(l2[j])
        j = j + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if i % 2 == 1:
            l3.append(l1[i])
        i = i + 1
    j = 0
    while j < len(l2):
        if i % 2 == 1:
            l3.append(l2[j])
        j = j + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        if True:
            l3.append(l1[i])
            i += 2
    i = 0
    while i < len(l2):
        if True:
            l3.append(l2[i])
            i += 2
    return l3",35535,True
"def selection_sort(a):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",35544,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.has(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='has', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.has(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict","def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",35564,True
"def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    unique_values = []
    values = []
    for key in d:
        values.append(key)
    for value in values:
        if values.count(value) < 2:
            unique_values.append(value)
    for key in d:
        if key in unique_values:
            new_dict[unique_values[key]] = key
    return new_dict","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",35568,True
"def sumup(n):
    if n == 1:
        return 1
    return n - sum(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    return n - sum(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",35581,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1]
        i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Expr(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1]
        i = i + 1
    return a","def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",35613,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i][::2]).split(',')
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i][::2]).split(',')
        i = i + 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i][::2]).split(',')
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i][::2]).split(',')
        i = i + 1
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",35639,True
"def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(l[1:])
    if a[0] < l:
        return l[0]
    else:
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return n[0]
    else:
        l = minimum(l[1:])
    if a[0] < l:
        return l[0]
    else:
        return l","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",35677,True
"def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            a.append(c)
            i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        if a != b:
            a.append(c)
            i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",35684,True
"def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return '1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter, i):
    if letter in str[i]:
        return i
    else:
        return '1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",35688,True
"def index(string, letter):
    position = -1
    i = 0
    while i < len(string):
        if string[i] == letter:
            position = i
        i = i + 1
    return position",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = -1
    i = 0
    while i < len(string):
        if string[i] == letter:
            position = i
        i = i + 1
    return position","def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",35702,True
"def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    print(a)
    for k, v in list(dict.items()):
        print(a.count('v'))
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    print(a)
    for k, v in list(dict.items()):
        print(a.count('v'))
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items())[:int(len(list(d.items())) / 2)]:
        a.append(v)
    for k, v in list(d.items())[int(len(list(d.items())) / 2):]:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",35707,True
"def minimum(n):
    print(n)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(n):
    print(n)","def minimum(l):
    return min(l)",35788,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split(',')
        i = i + 1
    return l3[::2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i]).split(',')
        i = i + 1
    return l3[::2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",35819,True
"def swap_unique_keys_values(d):
    q = {}
    a = []
    for key in d:
        value = d[key]
        if value not in a:
            q[value] = key
            a.append(value)
    print(a)
    return q",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    q = {}
    a = []
    for key in d:
        value = d[key]
        if value not in a:
            q[value] = key
            a.append(value)
    print(a)
    return q","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",35848,True
"def factorial(n):
    if n == 0:
        return 0
    total = 1
    for i in range(n):
        total *= i
    return factorial(n - 1) * n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    total = 1
    for i in range(n):
        total *= i
    return factorial(n - 1) * n","def factorial(n):
    if n < 2:
        return 1
    elif True:
        0
    if True:
        0
    return n * factorial(n - 1)",35859,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(keys):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load())]), Compare(left=Name(id='x_7', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_8', ctx=Load())])]), body=[Expr(value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_7', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dic = {}
    new_values = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    i = 0
    while i < len(values):
        j = 0
        while j < len(values):
            if values[i] == values[j] and i != j:
                0
            else:
                new_values.append(values[i])
            j = j + 1
        i = i + 1
    i = 0
    while i < len(keys):
        dic[new_values[i]] = keys[i]
        i = i + 1
    return dic","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        if test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",35879,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    x = []
    while n < len(s):
        if s[n] not in s:
            x.append(s[n])
        n = n + 1
    return x",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0
    x = []
    while n < len(s):
        if s[n] not in s:
            x.append(s[n])
        n = n + 1
    return x","def intersection(a, b):
    A = True
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            seen[a[i]] = A
            i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = A
        i = i + 1
    return c",35883,True
"def reverse_list(l):
    if len(l) != 0:
        temp = l.pop(0)
        reverse(l)
        l.append(temp)
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='reverse', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) != 0:
        temp = l.pop(0)
        reverse(l)
        l.append(temp)
    return l","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",35891,True
"def reverse_list(l):
    for i in l:
        return reversed(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    for i in l:
        return reversed(l)","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",35900,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        l = reverse_list(l[1:]) + list(l.pop(0))
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))), Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        l = reverse_list(l[1:]) + list(l.pop(0))
        return l","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",35922,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    print(len(str))",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    print(len(str))","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",35937,True
"def append2list(l1, l2=None):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=None):
    l2 = l2 or []
    for i in l1:
        l2.append(i)
    return l2",35966,True
"def union(a, b):
    result = a + b
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    return result",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='s', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    i = 0
    while i < len(a) and a[i] == s:
        i = i + 1
    return result","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",35975,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not unique.append(key)
    for keys in unique:
        if not keys in unique:
            dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[Expr(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    not_unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
        else:
            not unique.append(key)
    for keys in unique:
        if not keys in unique:
            dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",35984,True
"def reverse_list(a):
    return a.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    return a.reverse()","def reverse_list(ls):
    ls.reverse()
    return ls",35986,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return a + reverse_list(a[1:1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return a + reverse_list(a[1:1])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",36013,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[v] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",36051,True
"def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            a.append(c)
            return c
            i = i + 1",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Return(value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = []
    while i < len(a):
        if a != b:
            a.append(c)
            return c
            i = i + 1","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",36082,True
"def swap_keys_values(dictionary):
    new_dict = {}
    for k, v in list(dictionary.items()):
        new_dict[v] = k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(dictionary):
    new_dict = {}
    for k, v in list(dictionary.items()):
        new_dict[v] = k","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",36130,True
"def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
    else:
        return n",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    n = int(n)
    if n > 0:
        n = n + sumup(n - 1)
    else:
        return n","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",36152,True
"def fibonacci(a):
    x = a
    if a == 0 or a == 1:
        return 1
    else:
        return a + fibonacci(a - x)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(a):
    x = a
    if a == 0 or a == 1:
        return 1
    else:
        return a + fibonacci(a - x)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",36161,True
"def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",36174,True
"def minimum(n):
    i = 0
    while i < n:
        i = i + 1
    return i",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n):
    i = 0
    while i < n:
        i = i + 1
    return i","def minimum(l):
    if False:
        0
    elif True:
        0
    return sorted(l)[0]",36205,True
"def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
    return {v: k for k, v in list(e.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for s in d:
        if d[s] not in e:
            e[s] = d[s]
    return {v: k for k, v in list(e.items())}","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",36211,True
"def swap_keys_values(d):
    newdict = {}
    keys = list(d.keys())
    values = list(d.values())
    i = 0
    while i < len(d):
        newdict[keys[i]] = values[i]
        i = i + 1
    return newdict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    newdict = {}
    keys = list(d.keys())
    values = list(d.values())
    i = 0
    while i < len(d):
        newdict[keys[i]] = values[i]
        i = i + 1
    return newdict","def swap_keys_values(d):
    if False:
        0
    return {d[key]: key for key in d}",36266,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",36285,True
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    else:
        return n * factorial(n - 1)",36294,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    return count + 1, count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",36310,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b33a8ad6-3321-48f9-b796-fc62eb24c45f,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",36318,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < mid:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if q < mid:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",36333,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",36376,True
"def minimum(l, min):
    if not l:
        return []
    return minimum(l[1:], l[0] if l[0] < min else min)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, min):
    if not l:
        return []
    return minimum(l[1:], l[0] if l[0] < min else min)","def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",36420,True
"def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='x_6', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_7', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    kv = []
    dic = {}
    seen = {}
    for k, v in list(d.items()):
        kv.append((v, k))
    seen[kv[0][0]] = A
    for t in kv:
        if t[0] not in seen:
            seen[t[0]] = A
        else:
            seen[t[0]] = True
    for t in kv:
        if seen[t[0]] == A:
            dic[t[0]] = t[1]
    return dic","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
        else:
            0
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",36432,True
"def search(str, letter):
    for letters in str:
        if letters in str:
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))])], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    for letters in str:
        if letters in str:
            print('True')
        else:
            print('False')","def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",36437,True
"def selection_sort(a):
    i = 0
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        a[i] = tmp
        a[p] = a[i]
        tmp = a[p]
        i = i + 1
    return a","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",36439,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    if letter not in string:
        print('False')",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)
    if letter not in string:
        print('False')","def search(str, letter):
    if str == '':
        if True:
            return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",36507,True
"def factorial(n):
    if n == 0:
        return 0
    return n + factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n + factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",36509,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        if q < a[high]:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        if q < a[high]:
            high = mid
            assert q <= a[high]
    return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",36517,False
"def merge_lists(l1, l2):
    import sys
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    print(merged_list)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='x_2')]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    import sys
    merged_list = []
    i = 0
    while i < len(l1):
        merged_list.append(l1[i])
        i = i + 2
    i = 0
    while i < len(l2):
        merged_list.append(l2[i])
        i += 2
    print(merged_list)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",36692,True
"def swap_unique_keys_values(d):
    e = {}
    for d_tup in list(d.items()):
        if d.values.count(d_tup[1]) == 1:
            e[d_tup[1]] = d_tup[0]
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    e = {}
    for d_tup in list(d.items()):
        if d.values.count(d_tup[1]) == 1:
            e[d_tup[1]] = d_tup[0]
    return e","def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",36718,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if int(list) == 0:
            list.remove(list[i])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if int(list) == 0:
            list.remove(list[i])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",36736,True
"def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    return count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",36767,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].split(',')",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(step=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i = i + 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i = i + 1
    return l3[::2].split(',')","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",36813,True
"def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        count += 1
        return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return count
    elif s != '':
        s = list(s)
        s.pop()
        """""""""""".join(s)
        count += 1
        return count_letters(s)","def count_letters(s):
    if s == '':
        return 0
    elif False:
        0
    s = s[1:]
    return 1 + count_letters(s)",36819,True
"def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ea7c3666-b2a8-45fc-9644-69fa2415de49,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    i = 0
    a = []
    while i < len(string):
        a.append(string[i])","def index(steve, letter):
    if True:
        if False:
            0
        return steve.find(letter)",36836,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in unique:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",36890,True
"def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop()
    newli.append(x)
    s = reverse_list(li)
    for i in s:
        newli.append(i)
    return newli",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(li):
    newli = []
    if len(li) == 1:
        return li
    x = li.pop()
    newli.append(x)
    s = reverse_list(li)
    for i in s:
        newli.append(i)
    return newli","def reverse_list(l):
    if l == []:
        return []
    if False:
        0
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",36922,True
"def index(str, letter, pos):
    if str[pos] == letter:
        print('1')
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='-1')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if str[pos] == letter:
        print('1')
    else:
        print('-1')","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",36955,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)","def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",36975,True
"def fibonacci(l):
    if l == 1 or l == 1:
        return 1
    return fibonacci(l - 1) + fibonacci(l - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(l):
    if l == 1 or l == 1:
        return 1
    return fibonacci(l - 1) + fibonacci(l - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",37019,True
"def reverse_list(l):
    if l == []:
        return []
    else:
        return list(reverse_list(l[1:])).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    else:
        return list(reverse_list(l[1:])).append(l[0])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",37045,True
"def count_letters(s):
    count = 0
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count = count + 1
    if length == 0:
        return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count = 0
    if s == '':
        return 0
    length = count_letters(s[:-1])
    count = count + 1
    if length == 0:
        return count","def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",37055,True
"def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return [a[:-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1 or len(a) == 0:
        return a
    return [a[:-1]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])",37077,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n < len(list):
        if len(list) > 1:
            new = list[i] + list[i - 1]
        else:
            new = list[i] + 1
        list.append(new)
        i = i + 1
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n < len(list):
        if len(list) > 1:
            new = list[i] + list[i - 1]
        else:
            new = list[i] + 1
        list.append(new)
        i = i + 1
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",37079,True
"def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        if n in k:
            return i
        i = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d2330156-60dd-4aca-a925-9aa27e3edb48,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    j = 1
    k = 1
    while i < n:
        j = k
        k = k + j
        if n in k:
            return i
        i = i + 1","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",37087,True
"def factorial(n):
    if n == 1:
        return 1
    return n + factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,a8d7ba55-2066-48ff-a791-991413f703dc,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    return n + factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",37094,True
"def swap_keys_values():
    new_dic = {}
    for key in dic:
        if dic[key] not in new_dic:
            new_dic[dic[key]] = key
    return new_dic",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f734d662-6b82-46af-93a9-92b490e12476,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='dic', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='dic', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    new_dic = {}
    for key in dic:
        if dic[key] not in new_dic:
            new_dic[dic[key]] = key
    return new_dic","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        if True:
            out_dict[v] = k
    return out_dict",37103,True
"def sumup(n):
    total = 0
    for i in range(n):
        total + i
    return total + n",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    total = 0
    for i in range(n):
        total + i
    return total + n","def sumup(n):
    if n < 2:
        if False:
            0
        return n
    else:
        0
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",37109,True
"def reverse_list(a, x=[]):
    if len(a) == 1 or len(a) == 0:
        return a
    f = reverse_list(a[:-1])
    x.append(f)
    return x",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a, x=[]):
    if len(a) == 1 or len(a) == 0:
        return a
    f = reverse_list(a[:-1])
    x.append(f)
    return x","def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])",37113,True
"def factorial(n):
    return n if n < 2 else n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,c7fa847c-561b-4652-9a01-05f954e6c8df,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=Name(id='x_0', ctx=Load()), orelse=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def factorial(n):
    return n if n < 2 else n * factorial(n - 1)","def factorial(n):
    if n < 2 and True:
        return 1
    else:
        0
    return n * factorial(n - 1)",37121,True
"def reverse_list(a):
    if len(a) == 0:
        return a
    e = a[0]
    a = a[1:]
    b = reverse_list(a) + e
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,6fb1b046-1d89-4162-8437-722d44e22f50,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return a
    e = a[0]
    a = a[1:]
    b = reverse_list(a) + e
    return b","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",37147,True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,5c105474-42d8-4a95-a311-034a93c693c8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'","def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",37150,True
"def swap_unique_keys_values(d):
    seen = []
    new = {}
    for key, value in list(d.items()):
        if value not in seen:
            value.append(seen)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = []
    new = {}
    for key, value in list(d.items()):
        if value not in seen:
            value.append(seen)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",37153,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    l = reverse_list(a[1:]).append(a[0])
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    l = reverse_list(a[1:]).append(a[0])
    return l","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",37160,True
"def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    fact_of_n = n - 1
    return n * fact_of_n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    fact_of_n = n - 1
    return n * fact_of_n","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",37208,True
"def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[i] in l2:
            l3.append(l2[i])
            i = i + 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    j = 0
    l3 = []
    while i < len(l1) and j < len(l2):
        if l1[i] in l1:
            l3.append(l1[i])
            i = i + 2
        elif l2[i] in l2:
            l3.append(l2[i])
            i = i + 2
    return l3","def merge_lists(l1, l2):
    if True:
        l3 = []
        i = 0
        while i < len(l1):
            l3.append(l1[i])
            i += 2
        i = 0
        while i < len(l2):
            l3.append(l2[i])
            i += 2
        return l3",37224,True
"def search(string, letter):
    if string == ' ':
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string == ' ':
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",37266,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(d[key])
    for keys in d:
        if keys in unique:
            dictionary[d[key]] = key
    return dictionary","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",37268,True
"def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",37272,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='l3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while True:
        if not i < len(l1):
            break
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",37291,True
"def append2list(l1, l2=None):
    if l2 != None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 != None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",37293,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del d[v]
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del d[v]
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",37299,True
"def factorial(n):
    if n == 0:
        return 0
    fact_of_n = n - 1
    return n * fact_of_n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    fact_of_n = n - 1
    return n * fact_of_n","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",37304,True
"def reverse_list(l=[]):
    if l.isempty():
        return '[]'
    for i in reversed(l):
        return list(i)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='isempty', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='[]'))], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    if l.isempty():
        return '[]'
    for i in reversed(l):
        return list(i)","def reverse_list(l):
    if l == []:
        return []
    if False:
        0
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",37328,True
"def sumup(n):
    if n == 0:
        return 1
    return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,2f42085d-bb24-498f-9d99-42137e03966f,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 1
    return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",37334,True
"def maximum(l):
    max = 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum.pop(l[1])
    else:
        return maximum.pop(l[0])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='maximum', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='maximum', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    max = 0
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        return maximum.pop(l[1])
    else:
        return maximum.pop(l[0])","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",37410,True
"def reverse_list(l):
    if len(l) == 0:
        return l
    return a[-1] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l
    return a[-1] + reverse_list(a[:-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",37431,True
"def union(a, b):
    s = a + b
    return set(s)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    s = a + b
    return set(s)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",37459,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] < l[i + 1]:
        i += 1
        l = l[i:]
    else:
        l.pop(i + 1)
    return minimum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    i = 0
    if l[i] < l[i + 1]:
        i += 1
        l = l[i:]
    else:
        l.pop(i + 1)
    return minimum(l)","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",37461,True
"def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    j = 0
    while j < len(b):
        if not b[j] in seen:
            seen[b[j]] = True
        j = j + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",37475,True
"def minimum(l):
    return sorted(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return sorted(l)","def minimum(l):
    return min(l)",37517,True
"def swap_keys_values(dictionary_descriptor):
    new_dictionary = {}
    for keys, values in dictionary_descriptor:
        new_dictionary[values] = keys",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(dictionary_descriptor):
    new_dictionary = {}
    for keys, values in dictionary_descriptor:
        new_dictionary[values] = keys","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",37561,True
"def index(str, letter, pos):
    if str[pos] == letter:
        return str[pos]
    elif str[pos] != letter:
        return '-1'
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='-1'))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if str[pos] == letter:
        return str[pos]
    elif str[pos] != letter:
        return '-1'
    else:
        return index(str, letter, pos + 1)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",37566,True
"def swap_unique_keys_values(d):
    d1 = {}
    new_dict = {}
    for k, v in d:
        if d[v] not in d1:
            d1[v] = k
        else:
            d1[v] = ''
    for k, v in d1:
        if v != '':
            new_dict[k] = v
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=''))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d1 = {}
    new_dict = {}
    for k, v in d:
        if d[v] not in d1:
            d1[v] = k
        else:
            d1[v] = ''
    for k, v in d1:
        if v != '':
            new_dict[k] = v
    return new_dict","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",37639,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i].rstrip()
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i].rstrip()
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",37688,True
"def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,d31360b5-795b-45df-bd6f-a99df2683eae,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)))]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    list = [0]
    i = 0
    while n >= len(list):
        if len(list) > 1:
            nums = list[i] + list[i - 1]
        else:
            nums = list[1] - 1
        list.append(nums)
        i = 1 - i
    return list[-1]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        else:
            0
    return fib[n]",37700,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[:-1]] + reverse_list(a[::-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return [a[:-1]] + reverse_list(a[::-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",37756,True
"def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return [ihavethehighground[-1]] + reverse_list(ihavethehighground[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(ihavethehighground):
    if len(ihavethehighground) == 1:
        return ihavethehighground
    else:
        return [ihavethehighground[-1]] + reverse_list(ihavethehighground[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",37768,True
"def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return 'False'
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False')), Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string[0] == letter:
        return 'True'
    else:
        return 'False'
        return search(string[1:], letter)","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",37789,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mnum = minimum(l[1:])
        minn = mnum
        if mnum < minn:
            minn = mnum
        return minn",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mnum = minimum(l[1:])
        minn = mnum
        if mnum < minn:
            minn = mnum
        return minn","def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    else:
        if mylist[0] > mylist[1]:
            mylist.remove(mylist[0])
            return minimum(mylist)
        mylist.remove(mylist[1])
        return minimum(mylist)",37804,True
"def union(a, b):
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,5c105474-42d8-4a95-a311-034a93c693c8,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",37806,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:]).append(l.pop(0))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:]).append(l.pop(0))","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",37820,True
"def search(string, letter):
    string = input()
    letter = input()
    if letter not in string:
        print('False')
    else:
        print('True')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='False')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='True')], keywords=[]))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    string = input()
    letter = input()
    if letter not in string:
        print('False')
    else:
        print('True')","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",37824,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i += 1
    return -1",37841,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l2:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l2:
        l2.append(i)
    return l2","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",37849,True
"def sumup(n):
    if n == 0:
        return n
    return n + (n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return n
    return n + (n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",37872,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) - 1:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1952771b-859e-46c9-8146-448dc8ef5870,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Return(value=Constant(value='-1'))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) - 1:
        return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",37898,True
"def selection_sort(a, j, k):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_3', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a, j, k):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        swap(a, i, j)
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",37962,True
"def search(str, letter):
    i = 0
    if letter == str[i]:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Constant(value='False'))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    if letter == str[i]:
        return 'True'
    else:
        return 'False'","def search(str, letter):
    if letter in str:
        return True
    else:
        return False",37966,True
"def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",37976,True
"def search(string, letter):
    if string == '':
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='False'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value='True'))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    if string == '':
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",37986,True
"def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        c[dic[letter]] = letter
    return c",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7d992268-b79a-4106-8fbb-4f53742d117d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dic):
    a, b, c = [], [], {}
    for file in dic:
        if file in a:
            a.pop(a.index(file))
        else:
            a.append(file)
    for letter in a:
        c[dic[letter]] = letter
    return c","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",37989,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(a)",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,50aef720-52de-4735-8874-78f5a311b939,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(a)","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",37996,True
"def swap_keys_values(d):
    new_dict = {}
    for key, value in d:
        return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c007cbe7-350c-4111-aa1b-fca93c97d7f3,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for key, value in d:
        return d","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",38024,True
"def swap_keys_values(d):
    new = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new = {v: k for k, v in list(d.items())}","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",38045,True
"def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            seen[b[i]] = True
            i = i + 1
            print(seen)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='union', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load()), List(elts=[Constant(value=3), Constant(value=4), Constant(value=5)], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def union(a, b):
    seen = {}
    i = 0
    while i < len(a):
        sys.stdout.write(a[i])
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(seen):
        if b[i] not in seen:
            sys.stdout.write(b[i])
            seen[b[i]] = True
            i = i + 1
            print(seen)
    if __name__ == '__main__':
        print(union([1, 2, 3], [3, 4, 5]))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    if True:
        0
    else:
        0
    for number in seen:
        c.append(number)
    return c",38101,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low - 1",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return low - 1","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38151,True
"def union(a, b):
    union = a + b
    seen = {}
    c = []
    i = 0
    while i < len(union):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = a + b
    seen = {}
    c = []
    i = 0
    while i < len(union):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",38180,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        print(i, k)
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1):
        l3.append(l1[k])
        print(i, k)
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    if False:
        0
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",38205,True
"def minimum(n):
    if n == 1:
        return n[0]
    else:
        return n[0] if n[0] < minimum else minimum",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='minimum', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='minimum', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 1:
        return n[0]
    else:
        return n[0] if n[0] < minimum else minimum","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",38220,True
"def factorial(n=0):
    return math.factorial(n)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='factorial', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def factorial(n=0):
    return math.factorial(n)","def factorial(n):
    if n < 2 and True:
        return 1
    else:
        0
    return n * factorial(n - 1)",38249,True
"def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return check",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,e44b26cb-9ae2-4852-8e5e-b3d0f2b1ec60,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(x, y):
    answer = []
    check = {}
    i = 0
    while i < len(x):
        if not x[i] in check:
            answer.append(x[i])
            check[x[i]] = True
        i = i + 1
    j = 0
    while i < len(y):
        if not y[j] in check:
            answer.append(y[j])
            check[y[j]] = True
        j = j + 1
    return check","def union(a, b):
    c = []
    i = 0
    while i < len(a):
        if a[i] not in c:
            c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",38286,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        return minimum(l[1:] if l[0] > l[-1] else l[-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f93e7adc-52fc-42e1-ba0d-59e245864c63,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        return minimum(l[1:] if l[0] > l[-1] else l[-1])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",38302,True
"def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='0'))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def sumup(n):
    if int(n) == 0:
        return '0'
    else:
        return n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    else:
        sum_to_n = sumup(n - 1)
        return n + sum_to_n",38318,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1) / 2:
        if l1[i] in l1:
            l3.append(l1[i])","def merge_lists(l1, l2):
    if False:
        0
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",38329,True
"def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,a998fa29-b3b1-437f-9555-da670b1ae43b,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    if True:
        return n * factorial(n - 1)",38351,True
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        return l1","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",38389,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        count = 0
        while str[count] != letter:
            count += 1
    return count",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        count = 0
        while str[count] != letter:
            count += 1
    return count","def index(string, letter, count):
    print(count)
    k = len(string)
    if False:
        0
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",38396,True
"def reverse_list(a, x=[]):
    if len(a) == 1:
        return a
    f = reverse_list[:-1]
    x.append(f)
    return x",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a, x=[]):
    if len(a) == 1:
        return a
    f = reverse_list[:-1]
    x.append(f)
    return x","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",38460,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif a[0] < minimum(l[1:]):
        return a[0]
    return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    elif a[0] < minimum(l[1:]):
        return a[0]
    return minimum(l[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    elif False:
        0
    return [s for s in l if all(s <= i for i in l)][0]",38463,True
"def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return merging1",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[i]
    j = j + 2
    mergedlist = merging1 + merging2
    return merging1","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",38465,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        if l1[i] in l1:
            l3.append(l1[i])
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    if False:
        0
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",38493,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",38530,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        dictionary[d[unique]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not d[key] in unique:
            unique.append(key)
        dictionary[d[unique]] = key
    return dictionary","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",38537,True
"def swap_keys_values(d):
    a2 = {}
    a3 = {}
    ar = sorted(list(d.items()), reverse=True)
    for k, v in ar:
        a2[v] = k
    ar2 = sorted(list(a2.items()), reverse=True)
    for k, v in ar2:
        a3[k] = v
    return a3",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    a2 = {}
    a3 = {}
    ar = sorted(list(d.items()), reverse=True)
    for k, v in ar:
        a2[v] = k
    ar2 = sorted(list(a2.items()), reverse=True)
    for k, v in ar2:
        a3[k] = v
    return a3","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",38562,True
"def count_letters(s, l=[]):
    if not s:
        return sum(l)
    l.append(1)
    s = s[1:]
    return count_letters(s, l)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s, l=[]):
    if not s:
        return sum(l)
    l.append(1)
    s = s[1:]
    return count_letters(s, l)","def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])",38565,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] > a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] > a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",38600,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))), Assert(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='x_4', ctx=Load()), Name(id='x_3', ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), Assert(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assert(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]))]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = len(a) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q < a[high]
        return low","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38614,True
"def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    i = 0
    while i < len(oldkeys):
        swappeddict[oldvalues[i]] = oldkeys[i]
        i = i + 1
    return swappeddict","def swap_keys_values(d):
    new_dict = {}
    if len(list(d.items())) > 0:
        for pair in list(d.items()):
            new_dict[pair[1]] = pair[0]
    else:
        0
    return new_dict",38624,True
"def intersection(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in a:
            seen[b[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in a:
            seen[b[i]] = True
        i = i + 1
    return c","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",38648,True
"def selection_sort(a):
    a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    a.sort()","def selection_sort(a):
    return sorted(a)",38685,True
"def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            print(value)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='b', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new = {}
    for key, value in list(d.items()):
        if value not in list(new.values()):
            print(value)
            new[key] = value
    inverse = {a: b for b, a in list(new.items())}
    return inverse","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",38687,True
"def minimum(n):
    if len(n) == 0:
        return ''
    x = n.sort()
    return x[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n):
    if len(n) == 0:
        return ''
    x = n.sort()
    return x[0]","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",38704,True
"def reverse_list(l):
    if len(l) == reverse_list():
        return l
    return 1 + reverse_list(l[-1] + l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='reverse_list', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == reverse_list():
        return l
    return 1 + reverse_list(l[-1] + l[:-1])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",38705,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return minumum(l.remove(large))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minumum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    large = l[0]
    for num in l:
        if num > large:
            large = num
    return minumum(l.remove(large))","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",38724,True
"def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    for k, v in list(dict.items()):
        if a.count('v') == 1:
            dict1[k] = v
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='x_4')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    dict1 = {}
    a = []
    for k, v in list(dict.items()):
        a.append(v)
    for k, v in list(dict.items()):
        if a.count('v') == 1:
            dict1[k] = v
    new_dict = {v: k for k, v in list(dict1.items())}
    return new_dict","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",38758,True
"def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvalues] = oldkeys
    return swappeddict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(dictionary):
    oldkeys = []
    oldvalues = []
    swappeddict = {}
    for key in dictionary:
        oldkeys.append(list(dictionary.keys()))
        oldvalues.append(list(dictionary.values()))
    for e in oldkeys:
        swappeddict[oldvalues] = oldkeys
    return swappeddict","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",38765,True
"def fibonacci(n):
    if n == len(a):
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='a', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == len(a):
        return a[n]
    elif n != len(a) - 1:
        a.append(int(a[len(a) - 1] + a[len(a) - 2]))
    else:
        return fibonacci(n)","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",38825,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[smal]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='smal', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[smal]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",38844,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = j + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = j + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",38845,True
"def swap_unique_keys_values(dict):
    for k, v in list(dict.items()):
        print(v)
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dict):
    for k, v in list(dict.items()):
        print(v)
    new_dict = {v: k for k, v in list(dict.items())}
    return new_dict","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",38850,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i + 1
        j = p
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i + 1
        j = p
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",38874,True
"def remove_zeros(list):
    for n in (list == 0):
        list.remove(0)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    for n in (list == 0):
        list.remove(0)","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",38882,True
"def maximum(a):
    if len(a) == 1:
        return list(a[0])
    return maximum(a.remove(min(a)))",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return list(a[0])
    return maximum(a.remove(min(a)))","def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",38995,True
"def selection_sort(a):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='swap', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    while i < len(a):
        j = i
        k = i
        while k < len(a):
            if a[j] > a[k]:
                k = j
            k = k + 1
        swap(a, i, j)
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",39018,True
"def index(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(ls, val):
    i = 0
    while i < len(ls):
        if ls[i] == val:
            return i
        i = i + 1
    return -1","def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",39048,True
"def fibonacci(n):
    a = [0, 1]
    if n == len(a):
        return a[n]
    else:
        total = int(a[n]) + int(a[n + 1])
        a.append(total)
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1]
    if n == len(a):
        return a[n]
    else:
        total = int(a[n]) + int(a[n + 1])
        a.append(total)
        fibonacci(n + 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39059,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if d[k] in new_d:
            del new_d[k]
        else:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if d[k] in new_d:
            del new_d[k]
        else:
            new_d[v] = k
    return new_d","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",39149,True
"def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='revers', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Name(id='x_6', ctx=Load()), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_6', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(x):
    x1 = {}
    x2 = {}
    sorx = sorted(list(x.items()), reverse=True)
    for keys, values in sorx:
        if values not in x1:
            x1[values] = keys
        else:
            x1[values] = 'N'
    sorx2 = sorted(list(x1.items()), revers=True)
    for keys, values in sorx2:
        if values != sorx2:
            x2[keys] = values
    return x2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",39177,True
"def intersection(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen:
            c.append(b[i])
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen:
            c.append(b[i])
        i = i + 1
    return c","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",39225,True
"def factorial(n):
    if n == 0:
        return n
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return n
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",39247,True
"def swap_unique_keys_values(d):
    d_swap = {}
    for x in d:
        d_swap[d[x]] = x
        if d[x] in d_swap:
            del d_swap[d[x]]
    return d_swap",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,71d3efb1-0433-44ad-83f0-224949653177,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d_swap = {}
    for x in d:
        d_swap[d[x]] = x
        if d[x] in d_swap:
            del d_swap[d[x]]
    return d_swap","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",39260,True
"def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(newd)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values():
    keys = []
    values = []
    newd = {}
    for word in d:
        keys.append(word)
    for word in d:
        values.append(d[word])
    for i in range(0, len(values)):
        newd[values[i]] = keys[i]
    print(newd)","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][:
        int(len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]
        ) / 2)]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[:int(len(list(in_dict.items())) / 2)][int
        (len(list(in_dict.items())[:int(len(list(in_dict.items())) / 2)]) / 2):
        ]:
        out_dict[v] = k
    for k, v in list(in_dict.items())[int(len(list(in_dict.items())) / 2):]:
        out_dict[v] = k
    return out_dict",39286,True
"def remove_zeros(list):
    i = 0
    while i in List:
        list.remove(0)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='List', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i in List:
        list.remove(0)","def remove_zeros(list):
    while 0 in list:
        list.remove(0)",39311,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(a[i])
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,50aef720-52de-4735-8874-78f5a311b939,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(a[i])
        i = i + 1","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",39315,True
"def index(str, letter):
    if letter in str[i]:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str[i]:
        return i
    else:
        return '-1'","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",39324,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,b842b3b5-71ff-4f80-9bd4-d5973c3f5123,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",39346,True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    else:
        return a + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    else:
        return a + fibonacci(a - 1)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39404,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n < i:
        return a[n]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n < i:
        return a[n]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39405,True
"def merge_lists(l1, l2):
    i = 0
    l3 = l1[i + 1] + l2[i + 1]
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = l1[i + 1] + l2[i + 1]
    return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",39423,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    for value in d:
        values.append(d[value])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ebcb6801-87f5-4fa5-b252-f89ccb02603a,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_6', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_7', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_5', ctx=Load()), slice=Name(id='x_7', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    for value in d:
        values.append(d[value])
    for key in d:
        if values.count(d[key]) == 1:
            keys.append(key)
            values.append(d[key])
    new = {}
    i = 0
    while i < len(keys):
        val = values[i]
        key = keys[i]
        new[val] = key
        i = i + 1
    return new","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",39478,True
"def reverse_list(l=[]):
    return l.sort(reverse=True)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[])], type_ignores=[])","def reverse_list(l=[]):
    return l.sort(reverse=True)","def reverse_list(a=[]):
    a.reverse()
    return a",39479,True
"def intersection(a, b):
    seen = {}",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",39500,True
"def reverse_list(a, b=0):
    if a == 0:
        return 0
    c = reverse_list[-1:]
    a.append(c)
    return c",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='reverse_list', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=0):
    if a == 0:
        return 0
    c = reverse_list[-1:]
    a.append(c)
    return c","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",39552,True
"def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",39593,True
"def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), l3.append(l2_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Tuple(elts=[Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i < len(l1):
        l1_1 = l1[i]
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1), l3.append(l2_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    if True:
        0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",39607,True
"def index(string, letter, position):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter, position)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, position):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter, position)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",39616,True
"def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev.strip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev.strip())","def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",39634,True
"def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if l < lowest:
        lowest = l[0]
    return minimum(l[0]).pop",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=10000000000)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='pop', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    lowest = 10000000000
    if l == []:
        return lowest
    if l < lowest:
        lowest = l[0]
    return minimum(l[0]).pop","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",39641,True
"def count_letters(s=''):
    return count(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,82c933c3-be69-41b5-9530-1fe384a7f993,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Return(value=Call(func=Name(id='count', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s=''):
    return count(s)","def count_letters(s):
    return len(s)",39643,True
"def remove_zeros(list):
    if n in list == 0:
        list.remove(0)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In(), Eq()], comparators=[Name(id='x_0', ctx=Load()), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    if n in list == 0:
        list.remove(0)","def remove_zeros(list):
    if False:
        0
    elif True:
        0
    while 0 in list:
        list.remove(0)",39647,True
"def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        new_dic[key] = value
    return new_dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dic = {}
    for key in d:
        value = d[key]
        dic[value] = key
    new_dic = {}
    for key in dic:
        new_dic[key] = value
    return new_dic","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items())[:int(len(list(d.items())) / 2)]:
        a.append(v)
    for k, v in list(d.items())[int(len(list(d.items())) / 2):]:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",39699,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,50aef720-52de-4735-8874-78f5a311b939,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
        return a","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",39736,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fib', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n < 2:
        return 1
    return fib(n - 1) + fib(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",39741,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if l[i] < mini:
            mini = l[i]
        i += 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l):
        if l[i] < mini:
            mini = l[i]
        i += 1
    return mini","def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",39749,True
"def union(a, b):
    i = 0
    c = {}
    while i < len(a):
        c.append(a[i])
        if b[i] not in c:
            c.append(b[i])
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    c = {}
    while i < len(a):
        c.append(a[i])
        if b[i] not in c:
            c.append(b[i])
        i = i + 1
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",39775,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",39776,True
"def search(string, letter):
    print(letter in string)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())])], keywords=[]))], decorator_list=[])], type_ignores=[])","def search(string, letter):
    print(letter in string)","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter and True:
            0
        i += 1
    return False",39787,False
"def remove_zeros(a):
    i = 0
    while i < len(a):
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(a):
    i = 0
    while i < len(a):
        if int(a[len(a) - i]) == 0:
            a.remove(a[len(a) - i])
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",39809,True
"def selection_sort(a):
    i = 0
    p = 0
    j = 1
    while i < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = 0
    j = 1
    while i < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1","def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",39832,True
"def minimum(l):
    if len(l) == 1:
        print(l[0])
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        print(l[0])
    if l[0] < minimum(l[1:]):
        return l[0]
    else:
        return minimum(l[1:])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",39841,True
"def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[j]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    merging1 = l1[i]
    i = i + 2
    j = 0
    merging2 = l2[j]
    j = j + 2
    mergedlist = merging1 + merging2
    return mergedlist","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",39856,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = 0
        j = 1
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",39878,True
"def swap_unique_keys_values(d):
    if list(d.values()).count(d[k]) != 1 in list(d.keys()):
        del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,8f0fb5da-2965-4add-800c-347702711f78,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[]), ops=[NotEq(), In()], comparators=[Constant(value=1), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    if list(d.values()).count(d[k]) != 1 in list(d.keys()):
        del d[k]
    inv = {v: k for k, v in list(d.items())}
    return inv","def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",39888,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 1]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 1]
    else:
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39899,True
"def selection_sort(a):
    i = 0
    p = 0
    j = len(a) - 1 - i
    while i < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load()))), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    p = 0
    j = len(a) - 1 - i
    while i < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
        i = i + 1","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",39906,True
"def search(str, letter):
    if letter in str:
        print(True)
    if letter not in str:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=False)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        print(True)
    if letter not in str:
        print(False)","def search(string, letter):
    A = False
    if A:
        0
    i = 0
    if letter in string:
        return True
    return A",39946,True
"def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position += 1
            return position
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_3', ctx=Load()))], orelse=[Return(value=Constant(value='-1'))])], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        position = 0
        if letter in str:
            position += 1
            return position
        else:
            return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",39950,True
"def swap_unique_keys_values():
    dic1 = {}
    dic2 = {}
    dicsort = sorted(list(d.items()), reverse=True)
    for k, v in dicsort:
        if v not in dic1:
            dic1[v] = k
        else:
            dic1[v] = 'N'
    dicsort2 = sorted(list(dic1.items()), reverse=True)
    for k, v in dicsort2:
        if v != 'N':
            dic2[k] = v
    return dic2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values():
    dic1 = {}
    dic2 = {}
    dicsort = sorted(list(d.items()), reverse=True)
    for k, v in dicsort:
        if v not in dic1:
            dic1[v] = k
        else:
            dic1[v] = 'N'
    dicsort2 = sorted(list(dic1.items()), reverse=True)
    for k, v in dicsort2:
        if v != 'N':
            dic2[k] = v
    return dic2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",39965,True
"def fibonacci(n):
    if n <= 1:
        return 0
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 1:
        return 0
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39982,True
"def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]) + list(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a
    return reverse_list(a[1:]) + list(a[0])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",39991,True
"def union(a, b):
    i = 0
    while i < len(a) and a[i] != b:
        i = i + 1
    return i < len(a)",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a) and a[i] != b:
        i = i + 1
    return i < len(a)","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    if True:
        0
    else:
        0
    return c",40003,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[0])
    elif l[1] < l[0]:
        l.remove(l[0])
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[0])
    elif l[1] < l[0]:
        l.remove(l[0])
    return minimum(l)","def minimum(a):
    if len(a) == 1:
        return a[-1]
    if a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",40023,True
"def swap_keys_values(d):
    dic = {}
    a = list(d.values())
    b = list(d.keys())
    print(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e65c3029-39bf-4873-8e7a-599cb24be899,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    dic = {}
    a = list(d.values())
    b = list(d.keys())
    print(a)","def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",40049,True
"def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
    return seen",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    seen = []
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    k = 0
    while k < len(b):
        if not b[k] in seen:
            seen[b[k]] = True
        k = k + 1
    return seen","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",40093,True
"def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    d3 = {}
    for k, v in list(d2.items()):
        if v not in list(d.values()):
            d3[v] = k
    return d3",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0964a543-93db-460b-a0c5-d0c94fea250f,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    for k, v in list(d.items()):
        if v not in list(d2.values()):
            d2[k] = v
    d3 = {}
    for k, v in list(d2.items()):
        if v not in list(d.values()):
            d3[v] = k
    return d3","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",40098,True
"def index(string, letter):
    position = 0
    if string == ' ':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter):
    position = 0
    if string == ' ':
        return '-1'
    elif string[0] == letter:
        return position
    else:
        position += 1
        return index(string[1:], letter)","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",40106,True
"def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    elif len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",40120,True
"def minimum(n):
    if n != None:
        print(min(n))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n != None:
        print(min(n))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",40160,True
"def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, v)
            d.pop(k, v)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    for k, v in list(d.items()):
        if v in wards:
            d.pop(k, v)
            d.pop(k, v)
        if v not in wards:
            wards[k] = v
    return {v: k for k, v in list(d.items())}","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if False:
            0
        if d_0[key] not in d:
            d[d_0[key]] = key
        del d[d_0[key]]
    return d",40173,False
"def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a):
        s[a[i]] = True
        i = i + 1
    if a[i] in s:
        s.append()
    return",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a):
        s[a[i]] = True
        i = i + 1
    if a[i] in s:
        s.append()
    return","def union(a, b):
    A = False
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if A:
            0
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        elif A:
            0
        i = i + 1
    return c",40175,True
"def reverse_list(l):
    return reverse_list(l[-1]).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reverse_list(l[-1]).append(l[:-1])","def reverse_list(l):
    return l[::-1]",40218,True
"def union(a, b):
    return a and b",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,99d129a4-97af-42ac-a543-23b9157331f8,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    return a and b","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",40234,True
"def index(str, letter):
    if letter in str:
        return letter[i]
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,5bdd4d7a-504a-4b32-ac06-c9d0e6adb55a,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter in str:
        return letter[i]
    else:
        return -1","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",40278,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            del wards[k]
        elif v not in wards:
            wards[k] = v
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",40282,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return n + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",40292,True
"def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return a[-1] + reverse_list(a[::-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9d69cd84-adaa-42a8-9530-416762b34c13,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 1:
        return a[0]
    return a[-1] + reverse_list(a[::-1])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",40393,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 1)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",40466,True
"def reverse_list(l):
    if len(l) == 0:
        return 0
    else:
        return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return 0
    else:
        return l[-1] + reverse_list(l[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",40495,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return list(l.pop(0)) + reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return list(l.pop(0)) + reverse_list(l)","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",40535,True
"def selection_sort(a):
    p = 0
    j = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    p = 0
    j = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return a","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",40548,True
"def intersection(a, b):
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    while i < len(a):
        if a[i] in b:
            d.append(a[i])
        i = i + 1
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",40568,True
"def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + fibonacci(nth - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c2ac2f07-625e-4a88-84b0-2a916b646959,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(nth):
    if nth == 1 or nth == 0:
        return 1
    return nth - 1 + fibonacci(nth - 1)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",40572,True
"def fibonacci(n):
    a, b = 0, 1
    for num in range(n):
        a, b = b, a + b
        return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a, b = 0, 1
    for num in range(n):
        a, b = b, a + b
        return a","def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",40573,True
"def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(f1con, f2con):
    d1 = {}
    i = 0
    while i != len(f1con):
        line = f1con[i]
        d1[line] = True
        i = i + 1
    dups = []
    i = 0
    while i != len(f2con):
        line = f2con[i]
        if line in list(d1.keys()):
            dups.append(line)
        i = i + 1
    dups = sorted(list(set(dups)))
    return dups","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",40597,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for wards in bad:
        if wards not in bad:
            end.update(wards)
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])])], orelse=[]), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v in wards:
            bad[k] = v
        elif v not in wards:
            wards[k] = v
    for wards in bad:
        if wards not in bad:
            end.update(wards)
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        elif False:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",40600,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return mid - 1",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e6d9cdf-3f65-4f24-a2da-9a7ea1150f01,2017.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=Div(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] > q:
            high = mid
        else:
            low = mid + 1
    return mid - 1","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40601,True
"def reverse_list(list):
    if list == []:
        return []
    elif len(list) == 1:
        return [].append(list)
    else:
        return reverse_list(list[1:]).append(list[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=List(elts=[], ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def reverse_list(list):
    if list == []:
        return []
    elif len(list) == 1:
        return [].append(list)
    else:
        return reverse_list(list[1:]).append(list[0])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",40610,True
"def minimum(n):
    n = n.strip()
    print(min(n))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(n):
    n = n.strip()
    print(min(n))","def minimum(l):
    l.sort()
    return l[0]",40686,True
"def intersection(a, b):
    seen = {}
    i = 0
    while i < leb(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='leb', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    i = 0
    while i < leb(a):
        if a[i] in b and not a[i] in seen:
            seen[a[i]] = True
        i = i + 1
    return seen","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",40710,True
"def append2list(l1, l=[]):
    l2 = []
    for item in l1:
        l2.append(item)
    for item in l:
        l2.append(item)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l=[]):
    l2 = []
    for item in l1:
        l2.append(item)
    for item in l:
        l2.append(item)
    return l2","def append2list(l1, l2=[]):
    empty = []
    for i in l2:
        empty.append(i)
    for i in l1:
        empty.append(i)
    return empty",40733,True
"def sumup(n):
    if n == 0:
        return 0
    sum_to_n_minus_1 = sumup(n - 1)
    return n + sum_to_n_minus_",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,d05025fd-0a14-4010-acb6-dea38896a651,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='sum_to_n_minus_', ctx=Load())))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 0:
        return 0
    sum_to_n_minus_1 = sumup(n - 1)
    return n + sum_to_n_minus_","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",40764,True
"def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s.count(s[key]) == 1:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s.count(s[key]) == 1:
            new_dict[value] = key
    return new_dict","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",40766,True
"def reverse_list(a):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c4832969-41c4-4f49-a5b9-3475e4308c10,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0 or len(a) == 1:
        return 0
    else:
        return [a[-1]] + reverse_list(a[:-1])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",40846,True
"def sumup(n):
    if n == 1:
        return 1
    n = n + sumup(n - 1)",sumup,sumup,Return the sum of all integers up to n.,assert sumup(0)==0 and sumup(1)==1 and sumup(2)==3 and sumup(10)==55 and sumup(27)==378,False,3386630d-db39-4134-a4bb-b4908e2b7522,2017.0,"Module(body=[FunctionDef(name='sumup', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='sumup', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def sumup(n):
    if n == 1:
        return 1
    n = n + sumup(n - 1)","def sumup(n):
    if n < 2:
        return n
    sum_to_n = sumup(n - 1)
    return n + sum_to_n",40861,True
"def factorial(n):
    if n == 0:
        return 1
    fact_of_n = factorial(n - 1)
    return n * fact_of_n(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='x_1', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    fact_of_n = factorial(n - 1)
    return n * fact_of_n(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",40864,True
"def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i > lowest:
            i = lowest
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l=[]):
    if len(l) == 0:
        return l
    lowest = 0
    for i in l:
        if i > lowest:
            i = lowest
    return lowest","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",40897,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return ord(letter) - 100",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=BinOp(left=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=100)))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return ord(letter) - 100","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",40914,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return F(n - 1) + F(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='F', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='F', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return F(n - 1) + F(n - 2)","def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",40924,True
"def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    sum_to_n_1 = factorial(n - 1)
    return n * sum_to_n_1",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1:
        return 1
    elif n == 0:
        return 0
    sum_to_n_1 = factorial(n - 1)
    return n * sum_to_n_1","def factorial(n):
    if n < 2:
        return 1
    elif False:
        0
    return n * factorial(n - 1)",40927,True
"def minimum(l):
    if l == []:
        return []
    lowest = 100
    for line in l:
        if line < lowest:
            lowest = line
    return minimum(lowest)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if l == []:
        return []
    lowest = 100
    for line in l:
        if line < lowest:
            lowest = line
    return minimum(lowest)","def minimum(a, mini=0):
    if not a:
        return mini
    else:
        0
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",40949,True
"def swap_keys_values(d):
    for k, v in list(d.items()):
        k, v = v, k
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), Name(id='x_1', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    for k, v in list(d.items()):
        k, v = v, k
    return d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",40958,True
"def fibonacci(l):
    if l == 1 or l == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(l):
    if l == 1 or l == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)","def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",40964,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if 0 not in list:
            list.remove(0)
        i = i + 1",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Constant(value=0), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if 0 not in list:
            list.remove(0)
        i = i + 1","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)",40970,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if not key in unique:
            unique.append(key)
    for keys in unique:
        dictionary[d[keys]] = keys
    return dictionary","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",41012,True
"def reverse_list(l):
    return reverse_list(l[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reverse_list(l[1:])","def reverse_list(l):
    return l[::-1]",41028,True
"def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if s == '':
        return 0
    return total + count_letters(s[1:])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",41060,True
"def remove_zeros(list):
    while 0 in list:
        for i in list:
            if i == 0:
                list.remove(i)
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,03141ef3-f364-4b7c-9f52-990a173ac162,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    while 0 in list:
        for i in list:
            if i == 0:
                list.remove(i)
    return list","def remove_zeros(list):
    if True:
        if False:
            0
        while 0 in list:
            list.remove(0)",41070,True
"def swap_unique_keys_values(n):
    dic = {}
    values = []
    no_uni = []
    for key in n:
        if n[key] in values:
            no_uni.append(n[key])
        else:
            values, append(n[key])
    for key in n:
        if not n[key] in no_uni:
            dic[n[key]] = key
    return dic",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Expr(value=Tuple(elts=[Name(id='x_2', ctx=Load()), Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()))])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(n):
    dic = {}
    values = []
    no_uni = []
    for key in n:
        if n[key] in values:
            no_uni.append(n[key])
        else:
            values, append(n[key])
    for key in n:
        if not n[key] in no_uni:
            dic[n[key]] = key
    return dic","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",41107,True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b307bc6a-3e47-4e87-960f-7f47db5cc8d8,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value='-1'))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[keyword(arg='x_2', value=Name(id='x_2', ctx=Load()))]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",41164,True
"def maximum(l):
    return sorted(l)[len() - 1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return sorted(l)[len() - 1]","def maximum(l):
    return sorted(l)[len(l) - 1]",41243,True
"def intersection(a, b):
    c = []
    while i < len(a):
        if a[i] in b:
            c.append(a[i])
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    c = []
    while i < len(a):
        if a[i] in b:
            c.append(a[i])
        i = i + 1
    return c","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",41251,True
"def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",41259,True
"def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        return n
        fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2)), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_0', ctx=Load())), Expr(value=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 0
    a = [0, 1]
    if n == 0:
        return a[len(a) - 2]
    else:
        total = 0
        total = int(a[i]) + int(a[i + 1])
        a.append(total)
        i = i + 1
        return n
        fibonacci(n - 1)","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41262,True
"def reverse_list(s, x=[]):
    if len(s) == 1 or len(s) == 0:
        return s
    else:
        x.append(s[-1])
        return x + reverse_list(s[:-1], x)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(s, x=[]):
    if len(s) == 1 or len(s) == 0:
        return s
    else:
        x.append(s[-1])
        return x + reverse_list(s[:-1], x)","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",41265,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    print(a[n - 1] + a[n - 2])",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,c601c339-f2b7-4564-a96b-2de852eabb7b,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=5), Constant(value=8), Constant(value=13), Constant(value=21), Constant(value=34)], ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[]))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    print(a[n - 1] + a[n - 2])","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        if True:
            0
        a, b = b, a + b
    return a",41290,True
"def factorial(n):
    if n == 0:
        return 1
    total = 1
    for i in range(0, n):
        total *= i
    return factorial(n - 1) * n",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Mult(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 1
    total = 1
    for i in range(0, n):
        total *= i
    return factorial(n - 1) * n","def factorial(n):
    if n < 2:
        return 1
    elif True:
        0
    if True:
        0
    return n * factorial(n - 1)",41304,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[0]] = key
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for key in d:
        if d[key] in unique:
            unique.append(d[key])
        for i in unique:
            dictionary[unique[0]] = key
    return dictionary","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    if True:
        0
    return {v: k for k, v in list(store.items())}",41323,True
"def minimum(l):
    i = 0
    if len(l) == 1:
        return l[0]
    if l[i] > l[i + 1]:
        i = i + 1
        l = l[i]
    else:
        l.pop(i + 1)
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    i = 0
    if len(l) == 1:
        return l[0]
    if l[i] > l[i + 1]:
        i = i + 1
        l = l[i]
    else:
        l.pop(i + 1)
    return minimum(l)","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",41330,True
"def union(a, b):
    c = a + b
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if c[i] not in seen:
            seen[c[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    c = a + b
    union = []
    i = 0
    while i < len(a) and i < len(b):
        if c[i] not in seen:
            seen[c[i]] = True
        i = i + 1
    for number in seen:
        union.append(number)
    return union","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",41359,True
"def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a):
        s[a[i]] = True
        i = i + 1
    return",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return()], decorator_list=[])], type_ignores=[])","def union(a, b):
    result = a + b
    s = []
    i = 0
    while i < len(a):
        s[a[i]] = True
        i = i + 1
    return","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            if False:
                0
            seen[a[i]] = True
        else:
            0
        i = i + 1
    return c",41421,True
"def factorial(n):
    if n == 0:
        return 0
    return n + n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,9e8689c2-5967-4244-adc0-65049ce12be4,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 0:
        return 0
    return n + n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",41428,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return i",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d2a254e-7beb-402f-8a24-1414f9d11b3c,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return i","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",41472,True
"def fibonacci(n):
    a = 0
    b = 1
    while b > 0:
        prev_a = a
        a = b
        b = prev_a + b
        n -= 1
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_0', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    while b > 0:
        prev_a = a
        a = b
        b = prev_a + b
        n -= 1
    return a","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",41481,True
"def factorial(n):
    if int(n) == 1:
        return 1
    return int(n) * factorial(int(n) + 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) == 1:
        return 1
    return int(n) * factorial(int(n) + 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",41484,True
"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > maximun(a[1:]):
        return a[0]
    else:
        return maximum(a[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2017.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='maximun', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > maximun(a[1:]):
        return a[0]
    else:
        return maximum(a[1:])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",41531,True
"def merge_lists(l1, l2):
    l3 = l1 + l2
    return l3[2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=2), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1 + l2
    return l3[2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",41542,True
"def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    i = 0
    s = []
    while i < len(a) and i < len(b):
        if a[i] in b:
            s.append(a[i])
        i = i + 1
    n = 0","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        i = i + 1
    return d",41543,True
"def factorial(number):
    if number == 0:
        return 1
    return factorial(number - 1) * number",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,f0e181d7-e245-4188-8b78-18a1eeb6a1bc,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def factorial(number):
    if number == 0:
        return 1
    return factorial(number - 1) * number","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",41562,True
"def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        return total
    elif n == 1:
        total = n1
        return total
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        return total",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_3', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    total = 0
    n0 = 0
    n1 = 1
    if n == 0:
        total = n0
        return total
    elif n == 1:
        total = n1
        return total
    else:
        while total < n:
            n = n0 + n1
            n0 = n1
            n1 = n
            total = total + 1
        return total","def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",41566,False
"def minimum(l):
    if len(l) == 1:
        return l
    else:
        return mini(l[0], minimum(l[1:]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='mini', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l
    else:
        return mini(l[0], minimum(l[1:]))","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",41583,True
"def intersection(a, b):
    c = []
    for i in a:
        if i in b and not i in c:
            c.append(i)
        return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    c = []
    for i in a:
        if i in b and not i in c:
            c.append(i)
        return c","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",41628,True
"def merge_lists(l1, l2):
    l3 = l1[0:2] + l2[0:2]
    return l3[0:2]",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))), Return(value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = l1[0:2] + l2[0:2]
    return l3[0:2]","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",41654,True
"def search(str, letter):
    for letter in str:
        return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2017.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    for letter in str:
        return True","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter and True:
            0
        i += 1
    return False",41667,False
"def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        elif k in opposite:
            del opposite[k]
    return opposite",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,14e87307-1c4a-4225-9151-a02ef086f467,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    opposite = {}
    for k in d:
        if k not in opposite:
            opposite[d[k]] = k
        elif k in opposite:
            del opposite[k]
    return opposite","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",41685,True
"def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9dea5530-0f82-4127-b25f-20c784224a03,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    mini = 0
    i = 0
    while i < len(l) - 1:
        if int(l[i]) <= mini:
            mini = int(l[i])
        i = i + 1
    return mini","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",41708,True
"def intersection(a, b):
    d = a + b
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = a + b
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",41723,True
"def factorial(n):
    if n == 1 or n == 0:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,5aa80855-56ed-43aa-9b33-19faef108ec0,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if n == 1 or n == 0:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",41757,True
"def remove_zeros(list):
    remove[0].list
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,2c13dbec-3676-4a81-84ae-11e26467d09e,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Attribute(value=Subscript(value=Name(id='remove', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='x_0', ctx=Load())), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    remove[0].list
    return list","def remove_zeros(list):
    while 0 in list:
        if False:
            0
        else:
            0
        list.remove(0)",41773,True
"def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=0)), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='x_6', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_6', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_6', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    while i <= len(l1):
        l1_1 = l1[0:]
        print(l1_1)
        i += 2
        j = 0
        while j < len(l2):
            l2_1 = l2[j]
            j += 2
            l3 = []
            l3.append(l1_1)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        if True:
            0
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",41783,True
"def swap_keys_values(d):
    new_d = {}
    for k, v in zip(d):
        new_d[v] = k
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2017.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = {}
    for k, v in zip(d):
        new_d[v] = k
    return new_d","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",41800,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 3)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=3))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n + fibonacci(n - 3)","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41807,True
"def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,5ba5010e-c0ac-4560-9fa6-aadbc278c3f8,2017.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse(a):
    rev = []
    i = 0
    while i < len(a):
        rev.append(a[len(a) - i])
        i = i + 1
    print(rev.rstrip())","def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",41825,True
"def union(a, b):
    union = a + b
    return sorted(sets.union(a, b))",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sets', ctx=Load()), attr='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def union(a, b):
    union = a + b
    return sorted(sets.union(a, b))","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        else:
            0
        i = i + 1
    if True:
        return c",41863,True
"def fibonacci(n):
    values = [0, 1]
    i = 2
    while i <= n:
        terms.append(values[i - 1] + values[i - 2])
        i = i + 1
    return values[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2017.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='terms', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    values = [0, 1]
    i = 2
    while i <= n:
        terms.append(values[i - 1] + values[i - 2])
        i = i + 1
    return values[n]","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",41872,True
"def swap_unique_keys_values(d):
    d = {}
    d2 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d:
            d[v] = k
        else:
            d[v] = 'N'
    ds2 = sorted(list(d.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d2[k] = v
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value='N'))])], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Name(id='x_5', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d = {}
    d2 = {}
    ds = sorted(list(d.items()), reverse=True)
    for k, v in ds:
        if v not in d:
            d[v] = k
        else:
            d[v] = 'N'
    ds2 = sorted(list(d.items()), reverse=True)
    for k, v in ds2:
        if v != 'N':
            d2[k] = v
    return d2","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
        else:
            0
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",41975,True
"def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del wards[k]
    return {v: k for k, v in list(wards.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), Return(value=DictComp(key=Name(id='x_5', ctx=Load()), value=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    wards = {}
    bad = {}
    end = {}
    for k, v in list(d.items()):
        if v not in wards:
            wards[k] = v
        elif v in wards:
            del wards[k]
    return {v: k for k, v in list(wards.items())}","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",42019,True
"def merge_lists(l1, l2):
    for num in l1:
        l2.append(num)
        l3 = sorted(l2)
        return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,f40d6a8a-0620-4bda-8c98-4c952edace05,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    for num in l1:
        l2.append(num)
        l3 = sorted(l2)
        return l3","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",42062,True
"def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            del list[i]
        else:
            i = i + 1
    return list",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2017.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    i = 0
    while i < len(list):
        if list[i] == 0:
            del list[i]
        else:
            i = i + 1
    return list","def remove_zeros(list):
    while 0 in list:
        if True:
            list.remove(0)
        else:
            0",42073,True
"def append2list(l1, l2=None):
    if l2 == None:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2017.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",42087,True
"def minimum(n):
    if min(n) != None:
        print(min(n))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def minimum(n):
    if min(n) != None:
        print(min(n))","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",42126,True
"def union(a, b):
    A = 'end'
    i = ''
    c = []
    while i != A:
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        else:
            i = A
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='end')), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_4', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))])])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    A = 'end'
    i = ''
    c = []
    while i != A:
        if a[i] not in c:
            c.append(a[i])
        elif c[i] not in c:
            c.append(c[i])
        else:
            i = A
    return c","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    if False:
        0
    return c",42128,True
"def factorial(n):
    if int(n) == 1:
        return 1
    return n * factorial(n - 1)",factorial,factorial,Compute the factorial of the given number.,assert factorial(-1)==1 and factorial(0)==1 and factorial(1)==1 and factorial(2)==2 and factorial(5)==120 and factorial(20)==2432902008176640000,False,0412928d-97c6-46f2-980b-7d98214b9765,2017.0,"Module(body=[FunctionDef(name='factorial', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def factorial(n):
    if int(n) == 1:
        return 1
    return n * factorial(n - 1)","def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n - 1)",42167,True
"def index(str, letter):
    if str[0] == letter:
        return 0
    else:
        return 1 + index(str[1:], letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='index', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if str[0] == letter:
        return 0
    else:
        return 1 + index(str[1:], letter)","def index(str, letter, num):
    i = 0
    while i < len(str):
        if True:
            0
        if str[i] == letter:
            return i
        i += 1
    return -1",42195,True
"def swap_unique_keys_values(d):
    seen = []
    unseen = []
    for v in list(d.keys()):
        va = d[v]
        if va in unseen:
            seen.append(va)
        else:
            unseen.append(va)
        out = {v: k for k, v in list(d.items()) if v in unseen}
    return out",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='unseen', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='unseen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='unseen', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='x_4', ctx=Store())], value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='unseen', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = []
    unseen = []
    for v in list(d.keys()):
        va = d[v]
        if va in unseen:
            seen.append(va)
        else:
            unseen.append(va)
        out = {v: k for k, v in list(d.items()) if v in unseen}
    return out","def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",42203,True
"def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1, l2[i])
        i = i + 2
    print(l3)",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,9de68f60-663e-4929-b3e2-88948f90a669,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    l3 = []
    while i < len(l1):
        l3.append(l1, l2[i])
        i = i + 2
    print(l3)","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        if True:
            0
        l3.append(l2[i])
        i += 2
    return l3",42260,True
"def count_letters(s):
    count == 0
    for c in s:
        count += 1
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,1ea53a09-863b-4396-bbe3-e75221238368,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    count == 0
    for c in s:
        count += 1
    return count","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",42278,True
"def intersection(a, b):
    d = c - b
    return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2017.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='c', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    d = c - b
    return d","def intersection(a, b):
    d = []
    i = 0
    while i < len(a):
        if a[i] in b and a[i] not in d:
            d.append(a[i])
        elif False:
            0
        i = i + 1
    if True:
        return d",42286,True
"def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e380b6f8-84c6-4978-a85b-78c22ace6b9b,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load())), Return(value=Constant(value='-1'))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = str[0]
    letter_pos = 1
    while i < len(str):
        if letter in str:
            letter_pos = i + 1
        i = i + 1
    return letter_pos
    return '-1'","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",42316,True
"def reverse_list(l):
    return lambda l: backwards(l[1:]) + l[:1] if l else []",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Name(id='x_0', ctx=Load()), body=BinOp(left=Call(func=Name(id='backwards', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())), orelse=List(elts=[], ctx=Load()))))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return lambda l: backwards(l[1:]) + l[:1] if l else []","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",42339,True
"def count_letters(s):
    total = 0
    if not s:
        return total
    else:
        for c in s[:-1]:
            total += 1
    return count_letters(s) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,4a1f2726-b713-40f0-b544-9de55d617a12,2017.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    total = 0
    if not s:
        return total
    else:
        for c in s[:-1]:
            total += 1
    return count_letters(s) + 1","def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter",42374,True
"def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s[key] not in s:
            new_dict[value] = key
    for key, value in new_dict:
        if new_dict[key] in s:
            del new_dict[key]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c3a18502-e93d-4fc5-ab00-d42531abe362,2017.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(s):
    new_dict = {}
    for key, value in list(s.items()):
        if s[key] not in s:
            new_dict[value] = key
    for key, value in new_dict:
        if new_dict[key] in s:
            del new_dict[key]
    return new_dict","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",42385,True
"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        l = minimum(a[1:])
    if a[0] < l:
        return l[0]
    else:
        return l",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        l = minimum(a[1:])
    if a[0] < l:
        return l[0]
    else:
        return l","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",42401,True
"def index(str, letter):
    if letter not in str:
        return -1
    else:
        return str",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2017.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    if letter not in str:
        return -1
    else:
        return str","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",42419,True
"def selection_sort(a):
    n = input()
    a = []
    while n != 'end':
        a.append(int(n))
        n = input()
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9ae0539b-3842-4209-9c3e-252c74db087e,2017.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='end')]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load())), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    n = input()
    a = []
    while n != 'end':
        a.append(int(n))
        n = input()
    i = 0
    while i < len(a):
        small = i
        j = small + 1
        while j < len(a):
            if a[j] < a[small]:
                small = j
            j += 1
        tmp = a[small]
        a[small] = a[i]
        a[i] = tmp
        i += 1
    i = 0
    while i < len(a):
        print(a[i])
        i += 1","def selection_sort(a):
    if True:
        0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                if True:
                    p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",42441,True
"def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1) or i < len(l2):
        l3.append(l1[k])
        l3.append(l2[k])
        k = k + 2",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2017.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=2)))], orelse=[])], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    i = 0
    k = 0
    l3 = []
    while i < len(l1) or i < len(l2):
        l3.append(l1[k])
        l3.append(l2[k])
        k = k + 2","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        if True:
            0
        i += 2
    return l3",42466,True
"def minimum(a):
    if len(a) == 1:
        return n[0]
    elif min <= a[len(a)]:
        min = a[len(a)]
        a.pop()
    else:
        a.pop()
    return minumum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2017.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='n', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))])]), Return(value=Call(func=Name(id='minumum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return n[0]
    elif min <= a[len(a)]:
        min = a[len(a)]
        a.pop()
    else:
        a.pop()
    return minumum(a)","def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",42483,True
"def union(a, b):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2017.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='c', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    i = 0
    while i < len(a):
        c.append(a[i])
        i = i + 1
    p = 0
    while p < len(b):
        if b[p] not in c:
            c.append(b[p])
        p = p + 1
    return c","def union(a, b):
    A = True
    a = a + b
    seen = {}
    if A:
        0
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = A
        elif A:
            0
        i = i + 1
    return c",42485,True
